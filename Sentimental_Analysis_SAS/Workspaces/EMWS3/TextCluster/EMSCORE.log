MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:08:05" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                January 16, 2022
Time:                18:08:05
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2OUTZGE "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2OUTZGE new;
MPRINT(EM_DIAGRAM):   run;
35174      %let EMEXCEPTIONSTRING=;
35175      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35176      * SCORE: TextCluster;
MPRINT(EM_DIAGRAM):   * SCORE: TextCluster;
35177      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35178      %let EM_ACTION = SCORE;
35179      %let syscc = 0;
35180      %macro main();
35181      
35182         %if %upcase(&EM_ACTION) eq CREATE %then %do;
35183            filename temp catalog 'sashelp.emtxtext.cluster_create.source';
35184            %include temp;
35185            %create();
35186         %end;
35187         %if %upcase(&EM_ACTION) eq TRAIN %then %do;
35188            filename temp catalog 'sashelp.emtxtext.cluster_train.source';
35189            %include temp;
35190            %train();
35191         %end;
35192         %if %upcase(&EM_ACTION) eq REPORT %then %do;
35193            filename temp catalog 'sashelp.emtxtext.cluster_report.source';
35194            %include temp;
35195            %report();
35196         %end;
35197         %if %upcase(&EM_ACTION) eq SCORE %then %do;
35198            filename temp catalog 'sashelp.emtxtext.cluster_score.source';
35199            %include temp;
35200            %score();
35201         %end;
35202      %mend main;
35203      
35204      %main();
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.cluster_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.CLUSTER_SCORE.SOURCE.
35205     +%macro tmc_score(import_ds=,configdata=,export_ds=,term_ds=,export_out=,clusters_ds=,svdu=,svds=,
35206     +    import_out=,em_outstat=,prefixstring=,ocluster=,ndescterms=,ftmout=,fterms=,hier=);
35207     +  %if &import_ds ne %then %do;
35209     +    %let syscc=0;
35211     +    %tmc_doc_score(import=&import_ds,export=&export_ds,emoutstat=&em_outstat,
35212     +                termds=&term_ds,clusters=&clusters_ds,configds=&configdata,
35213     +                _scrout=&import_out, svd_u=&svdu, svd_s=&svds, prefix=&prefixstring,
35214     +                outclusters=&ocluster, descterms=&ndescterms, filterterms=&fterms,
35215     +                filtertmout=&ftmout, hierds=&hier);
35217     +  %end;
35219     +%mend tmc_score;
35220     +%macro score();
35222     +    %global last_parse_node last_filter_node last_prescore_node server_err
35223     +      parsevar EM_SASMSG ;
35224     +    %let syscc=0;
35225     +    %if ^%symexist(tm_debug) %then %let tm_debug=0;
35226     +    /*use saved version of em_info in case macro is not populated*/
35227     +    %em_getname(key=last_tm_nodes, type=data);
35229     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
35230     +    %include temp;
35231     +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
35232     +                        em_variableset=&em_data_variableset);
35233     +    %if &EMEXCEPTIONSTRING ne %then %goto end_cluster_score;
35234     +    %let lastparsenode=&last_parse_node;
35235     +    %let lastfilternode=&last_filter_node;
35236     +    %let lastprescore=&last_prescore_node;
35237     +    %let filt_node=;
35239     +   %em_getname(key=terms, type=data);
35240     +   %em_getname(key=docs, type=data);
35241     +   %em_getname(key=clusters, type=data);
35242     +   %em_getname(key=svd_u, type=data);
35243     +   %em_getname(key=svd_s, type=data);
35244     +   %em_getname(key=emoutstat, type=data);
35245     +   %em_getname(key=tmconfig, type=data);
35247     +   %em_getname(key=tmout, type=data);
35248     +   %em_getname(key=validout, type=data);
35249     +   %em_getname(key=testout, type=data);
35250     +   %em_getname(key=scoreout, type=data);
35251     +   %em_getname(key=PRESCORECODE, type=file, extension=sas);
35252     +   %let systmutil=;
35254     +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
35255     +    %include temp;
35256     +    filename temp catalog 'sashelp.emtext.tmemclus.source';
35257     +    %include temp;
35258     +    filename temp catalog 'sashelp.emtext.tmpred.source';
35259     +    %include temp;
35260     +    filename temp catalog 'sashelp.emtext.tmsort.source';
35261     +    %include temp;
35262     +    filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
35263     +    %include temp;
35264     +    filename temp catalog 'sashelp.emtext.tmsvd.source';
35265     +    %include temp;
35266     +    filename temp catalog 'sashelp.emtext.tmfast.source';
35267     +    %include temp;
35269     +   %let EM_PUBLISHCODE = PUBLISH;
35270     +   %let EM_SCORECODEFORMAT = DATASTEP;
35271     +   %let overwrite_pre = ;
35273     +   %let lastprescore=%trim(%left(&lastprescore));
35275     +   /* Create indexed term table for writing out score code */
35276     +   proc sql noprint;
35277     +       select count(*) into :svdkeep
35278     +       from &em_user_svd_s
35279     +       where keep=1;
35280     +   create table _clusterms as
35281     +      select key, term, role, keep, freq, numdocs, parent, _ispar, weight from &em_user_terms;
35283     +   data _filter_tmout;
35284     +      set &EM_LIB..&lastfilternode._tmout;
35285     +   run;
35287     +   %tmc_score(import_ds=&em_import_data,export_ds=&em_export_train,
35288     +              import_out=_filter_tmout,
35289     +              export_out=&EM_export_transaction,
35290     +              term_ds=_clusterms,
35291     +              clusters_ds=&em_user_clusters,
35292     +              svdu=&em_user_svd_u,
35293     +              svds=&em_user_svd_s,
35294     +              em_outstat=&em_user_emoutstat,
35295     +              configdata=&em_user_tmconfig,
35296     +              prefixstring=&EM_NODEID,
35297     +              ocluster=&em_user_clusters,
35298     +              ndescterms=&em_property_ndescterms,
35299     +              fterms=&EM_LIB..&lastfilternode._terms,
35300     +              ftmout=&EM_LIB..&lastfilternode._tmout,
35301     +              hier=&em_user_hierds);
35303     +   %tmc_score(import_ds=&em_import_validate,export_ds=&em_export_validate,
35304     +              export_out=&EM_USER_validout,
35305     +              import_out=&EM_LIB..&lastfilternode._validout,
35306     +              term_ds=_clusterms,
35307     +              clusters_ds=&em_user_clusters,
35308     +              svdu=&em_user_svd_u,
35309     +              svds=&em_user_svd_s,
35310     +              em_outstat=&em_user_emoutstat,
35311     +              configdata=&em_user_tmconfig,
35312     +              prefixstring=&EM_NODEID);
35313     +   %tmc_score(import_ds=&em_import_test,export_ds=&em_export_test,
35314     +              export_out=&EM_USER_testout,
35315     +              import_out=&EM_LIB..&lastfilternode._testout,
35316     +              term_ds=_clusterms,
35317     +              clusters_ds=&em_user_clusters,
35318     +              svdu=&em_user_svd_u,
35319     +              svds=&em_user_svd_s,
35320     +              em_outstat=&em_user_emoutstat,
35321     +              configdata=&em_user_tmconfig,
35322     +              prefixstring=&EM_NODEID);
35324     +   %if &syscc>4 %then %do;
35325     +       %let syscc=0;
35326     +       %goto end_cluster_score;
35327     +   %end;
35329     +   * path of the diagram ;
35330     +   %let emwspath = ;
35331     +   data _null_;
35332     +      call symput("emwspath", strip(pathname("&EM_LIB")));
35333     +   run;
35335     +   filename pre "&EM_USER_PRESCORECODE";
35336     +   data _null_;
35337     +       file pre;
35338     +       put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
35339     +       put '%include temp;';
35340     +       put 'filename temp catalog "sashelp.emtext.tmpred.source";';
35341     +       put '%include temp;';
35342     +       put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
35343     +       put '%include temp;';
35344     +       put 'filename temp catalog "sashelp.emtext.tmsort.source";';
35345     +       put '%include temp;';
35346     +       put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
35347     +       put '%include temp;';
35348     +       put 'filename temp catalog "sashelp.emtext.tmfast.source";';
35349     +       put '%include temp;';
35350     +       put 'filename temp;';
35351     +   run;
35354     +   /* We need to use last prescore */
35355     +   %if &lastprescore ne %then %do;
35356     +      %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
35357     +      filename tmpre "&tmprescoreFile";
35358     +      %em_copyfile(infref=tmpre, outfref=pre, append=Y);
35359     +      filename tmpre;
35360     +   %end;
35362     +   data _codeclusters;
35363     +        set &em_user_clusters (drop=clus_desc);
35364     +   run;
35366     +     %if not %symexist(em_term_loc) %then %do;
35367     +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
35368     +         libname termloc "&em_term_loc";
35370     +      %let scored_terms = termloc.&lastfilternode._filtterms;
35371     +       %let scored_clust = termloc.&EM_NODEID._clusters;
35372     +       %let scored_config = termloc.&EM_NODEID._tmconfig;
35373     +       %let scored_svd_u = termloc.&EM_NODEID._svd_u;
35374     +       %let scored_svd_s= termloc.&EM_NODEID._svd_s;
35376     +       %if &em_property_algorithm=1.0 %then  %do;
35377     +          %let scored_emoutstat= termloc.&EM_NODEID._emoutstat;
35378     +       %end;
35380     +   %end;
35381     +   %else %do; /* Write out data sets to external directory */
35382     +       libname termloc "&em_term_loc";
35383     +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
35384     +           %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
35385     +           %goto end_cluster_score;
35386     +       %end;
35388     +      /* copy datasets to use for prescore code*/
35389     +       data termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
35390     +         set _codeclusters;
35391     +       run;
35393     +       data termloc.&EM_LIB._&EM_NODEID._svd_u;
35394     +         set &em_user_svd_u;
35395     +       run;
35397     +       data termloc.&EM_LIB._&EM_NODEID._svd_s;
35398     +         set &em_user_svd_s;
35399     +       run;
35401     +       data termloc.&EM_LIB._&EM_NODEID._tmconfig;
35402     +         set &em_user_tmconfig;
35403     +       run;
35405     +       %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
35406     +       %let scored_clust = termloc.&EM_LIB._&EM_NODEID._CLUSTERS;
35407     +       %let scored_config = termloc.&EM_LIB._&EM_NODEID._tmconfig;
35408     +       %let scored_svd_u = termloc.&EM_LIB._&EM_NODEID._svd_u;
35409     +       %let scored_svd_s= termloc.&EM_LIB._&EM_NODEID._svd_s;
35411     +       %if &em_property_algorithm=1.0 %then  %do;
35412     +         data termloc.&EM_LIB._&EM_NODEID._emoutstat;
35413     +         set &em_user_emoutstat;
35414     +         run;
35415     +           %let scored_emoutstat= termloc.&EM_LIB._&EM_NODEID._emoutstat;
35416     +       %end;
35417     +   %end;
35421     +   %let _score_append=;
35423     +   * Now save code, if necessary, for search phrase;
35424     +   filename _tmscore "&EM_FILE_EMPUBLISHSCORECODE";
35425     +   %if &em_property_algorithm=1.0 %then %do;
35426     +   data _NULL_;
35427     +     file _tmscore;
35428     +     length string $200;
35429     +     string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
35430     +     put string;
35431     +     string="      termds=&scored_terms, configds=&scored_config,";
35432     +     put string;
35433     +     string= "      clusters=&scored_clust, emoutstat=&scored_emoutstat, ";
35434     +     put string;
35435     +     string = "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
35436     +     put string;
35437     +     string='data &em_score_output; set work._newexport;';
35438     +     put string;
35439     +    run;
35440     +    %end;
35441     +    %else %do;
35442     +    data _NULL_;
35443     +     file _tmscore;
35444     +     string= '%'||"tmc_doc_score(import="||'&em_score_output'||",export=work._newexport,";
35445     +     put string;
35446     +     put "      termds=&scored_terms,configds=&scored_config,";
35447     +     put "      clusters=&scored_clust, ";
35448     +     put "      _scrout=work.&lastfilternode._out, svd_u=&scored_svd_u, svd_s=&scored_svd_s, prefix=&em_nodeid);";
35449     +     put 'data &em_score_output; set work._newexport;';
35450     +    run;
35451     +    %end;
35452     +   filename _tmscore;
35454     +%end_cluster_score:
35455     +    filename temp;
35456     +    %if &tm_debug =0 %then %do;
35457     +    proc sql noprint;
35458     +        drop table _clusterms;
35459     +        drop table _filter_tmout;
35460     +        drop table _codeclusters;
35461     +    quit;
35462     +    %end;
35464     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
35466     +/* ****************************************************************
35467     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35468     + *
35469     + * Name:             tm_get_last_filter.sas
35470     + * Product:          SAS Text Miner
35471     + * Language:         Sas
35472     + * Script:
35473     + *
35474     + * Usage:
35475     + *
35476     + * Purpose:  macro to get the last filter node and the last parse node in the
35477     + *   diagram that corresponds to the current parse variable.  If there is no filter
35478     + *   node, the filter node is set to the last parse node.
35479     + *
35480     + *
35481     + *
35482     + * History:
35483     + * 14Aug09 Initial Coding
35484     + *
35485     + * Notes:
35486     + *    Returns an error in the following cases:
35487     + *      1. There is no preceding parse node.
35488     + *      2. There is no parse node with the current parse variable.
35489     + *
35490     + * Last Modified By:
35491     + * Last Modified On: Wed Sep 23 15:35:04 2009
35492     + *
35493     + * End
35494     + * ************************************************************** */
35495     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
35496     +   %let last_parse_node=;
35497     +   %let last_filter_node=;
35498     +   %let last_prescore_node=;
35499     +   %let server_err=;
35500     +   %let EMEXCEPTIONSTRING=;
35501     +   %let syscc=0;
35502     +
35503     +    /* verify that setinit for SAS Text Miner is currently active */
35504     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
35505     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
35506     +        %goto end_macro;
35507     +        %end;
35508     +
35509     +
35510     +    * find last filter or text parse node if no filter node. ;
35511     +   %if %sysfunc(exist(&eminfo)) %then %do;
35512     +      proc sql noprint;
35513     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
35514     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
35515     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
35516     +      quit;
35517     +
35518     +   %end;
35519     +
35520     +   %if &last_parse_node= %then %do;
35521     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
35522     +      %goto end_macro;
35523     +      %end;
35524     +
35525     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
35526     +   %else %let last_filter_node = %ktrim(&last_filter_node);
35527     +   %let last_parse_node = %ktrim(&last_parse_node);
35528     +
35529     +   * Check to make sure parse variable is present and still exists;
35530     +   %let parsevar = ;
35531     +   proc sql noprint;
35532     +    select parsevar into :parsevar
35533     +    from &em_lib..&last_filter_node._tmconfig;
35534     +    quit;
35535     +
35536     +    *check for dropped parsevar on input dataset;
35537     +       %let parsevarOK= ;
35538     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
35539     +       data _null_;
35540     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
35541     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
35542     +         run;
35543     +       %if(&parsevarOK eq ) %then %do;
35544     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
35545     +          %goto end_macro;
35546     +          %end;
35547     +%end_macro:
35548     +
35549     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS3.TextCluster_last_tm_nodes where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS3.TextCluster_last_tm_nodes where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS3.TextCluster_last_tm_nodes where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS3.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS3.TextCluster_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;

NOTE: There were 1 observations read from the data set EMWS3.TEXTCLUSTER_VARIABLESET.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
35550     +/* ****************************************************************
35551     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35552     + *
35553     + * Name:             tm_data2code.sas
35554     + * Product:          SAS Text Miner
35555     + * Language:         Sas
35556     + * Script:
35557     + *
35558     + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
35559     + *
35560     + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
35561     + *  to be view or data.
35562     + *
35563     + *    PARAMETERS:
35564     + *        DATA        = data set
35565     + *        OUTDATA     = out data set
35566     + *        OUTFILE     = file where to saved the code
35567     + *        APPEND      = append (Y/N)
35568     + * History:
35569     + * 11Jun09 Initial Coding
35570     + *
35571     + * Notes:
35572     + *
35573     + * Last Modified By:
35574     + * Last Modified On: Thu Jul 23 11:00:06 2009
35575     + *
35576     + * End
35577     + * ************************************************************** */
35578     +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
35579     +%if &data eq %then %do;
35580     +   %put ERROR: Data set not defined;
35581     +   %end;
35582     +%else %do;
35583     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
35584     +       %put ERROR: Data set does not exist;
35585     +       %end;
35586     +   %else %do;
35587     +      %global em_data em_outdata em_codefile em_append;
35588     +      %let em_data=&data;
35589     +      %let em_outdata=&outdata;
35590     +      %let em_codefile=&outfile;
35591     +      %let em_append=&append;
35592     +      proc display c=sashelp.emutil.data2code.scl; run;
35593     +      %end;
35594     +   %end;
35595     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmemclus.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMEMCLUS.SOURCE.
35596     +
35597     + /*
35598     +
35599     +  Macro:   tmemclus.sas
35600     +  Purpose: Call proc emclus with given defaults and parameters.
35601     +  Syntax:  %tmemclus(data=, role=, clusters=, seed=,
35602     +                   outstat=, out=, vars=, cov=, iter=, secclus=,
35603     +                   seciter=, min=, method=, eps=, init=, print=,
35604     +                   p=, outliers=, decvar=, initstd=, dist=,
35605     +                   secstd=, nobs=, threads=);
35606     +  Required Parameters:  data=      The input data set.
35607     +                        role=      Train or score
35608     +                        clusters=  The number of primary clusters
35609     +
35610     +  Optional Parameters:  vars=      Variables to be used
35611     +                   cov=       Type of covariance matrix
35612     +                   iter=      Number of EM iterations
35613     +                   secclus    Number of secondary clusters
35614     +                   seciter    Number of k-means iterations
35615     +                   min=       Minimum number of obs in a cluster
35616     +                   method=    Standard or scaled
35617     +                   eps=       Stopping tolerance
35618     +                   init=      Random, Fastclus, or Emclus
35619     +                   print=     All, last, or none
35620     +                   p=
35621     +                   outliers=  Keep, cluster, or ignore
35622     +                   outstat=   Name of OUTSTAT data set
35623     +                   out=       Name of OUT data set
35624     +                   seed=      Name of SEED data set
35625     +                   decvar=    Proportion to decrease variances
35626     +                   initstd=   Initial standard deviation
35627     +                   dist=      Minimum distance between clusters
35628     +                   secstd=    Secondary cluster max std dev.
35629     +                   nobs=      Number of obs read in each iteration
35630     +  History:
35631     +  2001/01/16 - Bill Wheeler - Initial Coding.
35632     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
35633     +*/
35634     +%MACRO tmemclus(data=, role=, clusters=, seed=,
35635     + outstat=, out=, vars=, cov=, iter=, secclus=,
35636     + seciter=, min=, method=, eps=, init=, print=,
35637     + p=, outliers=, decvar=, initstd=, dist=, secstd=, nobs=, threads=);
35638     +
35639     + %local saveout saveseed op1 op2 op3 op4;
35640     +
35641     + %LET saveout = &out;
35642     + %LET saveseed = &outstat;
35643     +
35644     + /* defaults */
35645     + %if &role= %then %let role = TRAIN;
35646     + %if &seed ne %then %let seed = seed=&seed;
35647     + %if &vars= %then %let var = ;
35648     + %else %let var = var &vars;
35649     + %if &cov ne %then %let cov = cov = &cov;
35650     + %if &iter ne %then %let iter = iter = &iter;
35651     + %if &init ne %then %let init = init = &init;
35652     + %if &eps ne  %then %let eps = eps = &eps;
35653     + %if &min ne %then %let min = min = &min;
35654     + %if &seciter ne %then %let seciter = seciter = &seciter;
35655     + %if &print ne %then %let print = print = &print;
35656     + %if &p ne %then %let p = p = &p;
35657     + %if &outliers ne %then %let outliers = outliers = &outliers;
35658     + %if &method ne %then %let method = method = &method;
35659     + %if &decvar ne %then %let decvar = decvar = &decvar;
35660     + %if &outstat ne %then %let outstat = outstat = &outstat;
35661     + %if &out ne %then %let out = out = &out;
35662     + %if (&threads >= 0)  %then %let threads = threads = &threads;
35663     + %else %let threads = ;
35664     +
35665     + %LET op1 = ;
35666     + %LET op2 = ;
35667     + %LET op3 = ;
35668     + %LET op4 = ;
35669     + %if ^(&initstd=) %then %let op1 = %str(initstd = &initstd);
35670     + %if ^(&dist=) %then %let op2 = %str(dist = &dist);
35671     + %if ^(&secstd=) %then %let op3 = %str(secstd = &secstd);
35672     + %if ^(&nobs=) %then %let op4 = %str(nobs = &nobs);
35673     +
35674     +
35675     + %IF &SYSVER < 9 %THEN %DO;
35676     +    %LET cov = ;
35677     +    %LET decvar = ;
35678     +    %LET outliers = ;
35679     +    %LET out = ;
35680     + %END;
35681     +
35682     +
35683     + %if %upcase(&role) = TRAIN %then
35684     + %do;
35685     +   proc emclus data = &data
35686     +   clusters = &clusters
35687     +   &seed
35688     +   &outstat
35689     +   &out
35690     +   &init
35691     +   &eps
35692     +   &method
35693     +   &secclus
35694     +   &min
35695     +   &print
35696     +   &outliers
35697     +   &iter
35698     +   &op1 &op2
35699     +   &op3 &op4
35700     +   &decvar
35701     +   &cov
35702     +   &threads
35703     +   ;
35704     +   &var;
35705     + %end;
35706     + %else
35707     +  %do;
35708     +    proc emclus data = &data
35709     +    role = score
35710     +    clusters = &clusters
35711     +    &seed
35712     +    &out
35713     +    &cov
35714     +    ;
35715     +    &var;
35716     +  %end;
35717     +
35718     + %IF &SYSVER < 9 and &saveout ^= %THEN %DO;
35719     +   proc emclus data = &data
35720     +   role = score
35721     +   clusters = &clusters
35722     +   seed = &saveseed
35723     +   &saveout
35724     +   ;
35725     +   &var;
35726     + %END;
35727     +
35728     +
35729     +%MEND tmemclus;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmpred.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMPRED.SOURCE.
35730     +
35731     +/*
35732     +  Macro: tmpred(inds,outds,clusters,type=,ignore=,freqDS=)
35733     +
35734     +  Description: This macro will take output from
35735     +     emclus and generate predicted
35736     +      predicted clusters.
35737     +
35738     +  Parms: inds - input data set, produced by emclus.
35739     +   outds - data set with clusters created by this macro.
35740     +   clusters - number of clusters that should be on this data set
35741     +   type - valid values: 'max' or 'prob'.  Max will just take the
35742     +      cluster with the highest probability as the predicted cluster.
35743     +      In the case of a tie the first cluster with that value will
35744     +       selected.
35745     +      Prob will attempt to select multiple clusters based on
35746     +      how many clusters were requested.  That is if 3 clusters
35747     +      were requested, any cluster with prob>1/3 will be selected
35748     +      as the predicted cluster. THIS OPTION IS UNTESTED.
35749     +*/
35750     +
35751     +%macro tmpred(inds,outds,clusters,type=, ignore=0, freqDS=, compress=1);
35752     +
35753     +  %local _str newfreqDS _flag;
35754     +
35755     +  * set the optional arguments;
35756     +  %if &type= %then %let type=max;
35757     +  %if &ignore = 1 %then %let
35758     +    _str = if _CLUSTER_ = &clusters then _CLUSTER_ = .;
35759     +  %else %let _str = ;
35760     +  %if %str(&freqDS) ^= %str() %then %do;
35761     +   %let newfreqDS = &freqDS(keep=_c1-_c&clusters);
35762     +   %let _flag = 1;
35763     +  %end;
35764     +  %else %let _flag = 0;
35765     +
35766     +  %if &compress = 1 %then %let compress = compress=Y;
35767     +  %else %let compress = ;
35768     +
35769     +  data &outds(&compress drop=_c1-_c&clusters)
35770     +    %if &_flag = 1 %then %do;
35771     +    &newfreqDS
35772     +    %end;
35773     +    ;
35774     +    set &inds end=eof;
35775     +   * array for holding all probabilities;
35776     +    array _p prob1--prob&clusters;
35777     +    array _c(&clusters);
35778     +    retain _c 0;
35779     +   * get rid of working columns;
35780     +    drop _max_ _i /*prob1--prob&clusters*/ _WARN_;
35781     +    /* keep the largest probability and the cluster */
35782     +    _max_ = 0;
35783     +    do _i = 1 to &clusters;
35784     +      if _p(_i) > _max_ then do;
35785     +        _max_ = _p(_i);
35786     +        _CLUSTER_ = _i;
35787     +      end;
35788     +    end;
35789     +    if (_CLUSTER_ >= 1) and (_CLUSTER_ <= &clusters) then
35790     +      _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
35791     +    else _CLUSTER_ = .;
35792     +    &_str;
35793     +    %if &_flag = 1 %then %do;
35794     +      if eof then do;
35795     +        output &freqDS;
35796     +                output &outDS;
35797     +          end;
35798     +          else output &outDS;
35799     +        %end;
35800     +
35801     +    run;
35802     +%mend tmpred;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsort.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSORT.SOURCE.
35803     + /*
35804     +PROC SORT macro
35805     +
35806     +%tmsort(data=, out=, by=);
35807     +
35808     +data=      - name of input data set (outtree data set from PROC CLUSTER)
35809     +out=       - name of the output data set
35810     +by=        - by statement
35811     +options=   - proc options
35812     +*/
35813     +
35814     +%macro tmsort(data=, out=, by=, options=, threads=THREADS);
35815     +  %if %BQUOTE(&out) ^= %then %let out = out =  &out;
35816     +  %if &SYSVER < 9 %then %let threads = ;
35817     +
35818     +  proc sort data = %STR(&data) &threads &options
35819     +    &out;
35820     +    by &by;
35821     +  run;
35822     +
35823     +%mend tmsort;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tmc_doc_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMC_DOC_SCORE.SOURCE.
35824     +/*****************************************************************************
35825     +*
35826     +* tmc_doc_score
35827     +*
35828     +*  import  =  the doc data set of _document_ ids's as input
35829     +*  export = the new doc dataset with the svd dimensions and cluster results as output
35830     +*  termds = the terms table as input
35831     +*  clusters = input dataset of clusters from train
35832     +*  emoutstat = input dataset of seeds from training
35833     +*  _scrout = input OUT data set to be scored, may be trimmed based on conent of termds
35834     +*  svd_u = input singular vectors
35835     +
35836     +
35837     +*  svd_s = input singular values
35838     +*  prefxi = variable prefix string identifier.
35839     +*
35840     +**************************************************************************************/
35841     +
35842     +%macro tmc_doc_score(import=,export=,termds=,export_out=,clusters=,emoutstat=,
35843     +                 _scrout=,svd_u=,svd_s=,configds=,prefix=, outclusters=,hierds=,
35844     +                filterterms=,filtertmout=, descterms=);
35845     +
35846     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
35847     +
35848     +    proc sql noprint;
35849     +        select cellwgt into: cellwgt
35850     +            from &configds;
35851     +        select clus_alg into: algorithm
35852     +            from &configds;
35853     +        select parseVar into :textvar
35854     +            from &configds;
35855     +        select count(*) into :nclus
35856     +            from &clusters;
35857     +        select count(*) into :svdkeep
35858     +            from &svd_s
35859     +            where keep=1;
35860     +    quit;
35861     +
35862     +    %let svdkeep=%left(&svdkeep);
35863     +    %let nclus=%left(&nclus);
35864     +    %let algorithm=%left(&algorithm);
35865     +    %Let cellwgt=%left(&cellwgt);
35866     +    data _import_ds;
35867     +        set &import;
35868     +    run;
35869     +
35870     +
35871     +    %tmsort(data=&termds(where=(keep='Y')), out=_terms(keep= KEY PARENT),
35872     +            by=KEY);
35873     +    %tmsort(data=&_scrout, out=&_scrout, by=_termnum_);
35874     +
35875     +    data _svdm1;
35876     +        merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_))
35877     +              &_scrout (in = _A_ rename=(_COUNT_=COUNT));
35878     +        by _termnum_;
35879     +        if _B_;
35880     +        if (_A_ and _B_ and (PARENT ne .))
35881     +          then _TERMNUM_ = PARENT;
35882     +
35883     +        keep _TERMNUM_ _DOCUMENT_ COUNT;
35884     +        if (_DOCUMENT_=.) or (COUNT=.) then delete;
35885     +    run;
35886     +
35887     +    proc sql ;
35888     +       create table _scrout as select distinct _TERMNUM_, _DOCUMENT_,
35889     +        sum(COUNT) as _COUNT_ from _svdm1
35890     +        group by _TERMNUM_, _DOCUMENT_;
35891     +
35892     +       drop table _svdm1;
35893     +       drop table _terms;
35894     +    quit;
35895     +
35896     +    %tmsort(data=&termds(where=(KEEP='Y' and PARENT=.)),
35897     +         out=_weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT),
35898     +         by=KEY, options=, threads=);
35899     +
35900     +
35901     +    %tmsort(data=_scrout, out=_scrout, by=_DOCUMENT_, options=, threads=);
35902     +      %let svdkeep=%left(&svdkeep);
35903     +      data &svd_u;
35904     +         set &svd_u(keep= index col1-col&svdkeep);
35905     +      run;
35906     +
35907     +      proc sql;
35908     +         create table  _inweights as
35909     +         select a.*
35910     +         from _weights a right join &svd_u b
35911     +         on a.index=b.index
35912     +         ;
35913     +       quit;
35914     +    %if %lowcase(&cellwgt) = bin %then %let cellwgt=BINARY;
35915     +    proc spsvd data=_scrout IN_U=&svd_u
35916     +        local = &cellwgt global = none in_global = _inweights ;
35917     +        row _TERMNUM_;
35918     +        col _DOCUMENT_;
35919     +        entry _COUNT_;
35920     +        output colpro=_COLPRO bigpro normcol prefix="&prefix._SVD";
35921     +    run;
35922     +    proc sort data=_import_ds;
35923     +    by _DOCUMENT_; run;
35924     +
35925     +    proc sort data=_colpro;
35926     +    by INDEX;
35927     +    run;
35928     +
35929     +    data &export;
35930     +        merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
35931     +        by _DOCUMENT_;
35932     +        if _C_;
35933     +    run;
35934     +
35935     +    data &export;
35936     +       set  &export;
35937     +       array svd_array &prefix._SVD1 - &prefix._SVD&svdkeep.;
35938     +       do i = 1 to dim(svd_array);
35939     +          if svd_array(i)=. then svd_array(i)=0;
35940     +       end;
35941     +       drop i;
35942     +    run;
35943     +
35944     +
35945     +    %tmsort(data=&export, out=, by=_document_, options=, threads=);
35946     +
35947     +    %if %left(&algorithm)=1.0 %then %do;
35948     +
35949     +        %tmemclus(data=&export,
35950     +            role=SCORE, clusters=&nclus,
35951     +            seed=&emoutstat,
35952     +            outstat=, out=&export,
35953     +            vars=%STR(&prefix._SVD1 - &prefix._SVD&SVDKEEP),
35954     +            cov=, iter=5, secclus=,
35955     +            seciter=, min=, method=, eps=.1, init=, print=,
35956     +            p=, outliers=, decvar=0,
35957     +            initstd=, dist=, secstd=, nobs=);
35958     +        run;
35959     +
35960     +        %tmpred(&export, &export, &nclus, type=, ignore=0,
35961     +                  freqDS=, compress=1);
35962     +
35963     +        data &export;
35964     +           set &export;
35965     +           rename prob1-prob&nClus = &prefix._prob1-&prefix._prob&nclus;
35966     +           rename _cluster_=&prefix._cluster_;
35967     +        run;
35968     +
35969     +        %if &outclusters ne %then %do;
35970     +              %let memloc = _tmmem;
35971     +              proc tmutil data=&_scrout key=&filterterms ;
35972     +                 control init memloc="&memloc" release;
35973     +                 output keeponly out=_outtmutil;
35974     +              run;
35975     +
35976     +              data _docdata;
35977     +                 set &export (rename=(&prefix._cluster_=cluster));
35978     +              run;
35979     +
35980     +              /* Recalculate desc terms */
35981     +              data _terms_;
35982     +               set &filterterms;
35983     +               by key _ispar;
35984     +               if first.key then
35985     +                output;
35986     +               else;
35987     +              run;
35988     +
35989     +              data _terms_;
35990     +               set _terms_;
35991     +               if _ispar='+' then
35992     +                  Term=_ispar || ' ' || term;
35993     +              run;
35994     +
35995     +             %tmsort(data=_outtmutil,
35996     +               out=_tmout_,
35997     +               by=_termnum_,
35998     +                  options=,
35999     +               threads=threads);
36000     +
36001     +
36002     +             data _tmout_;
36003     +               merge _tmout_ (in=_A_)
36004     +                  _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
36005     +               by _termnum_;
36006     +               if _A_;
36007     +             run;
36008     +
36009     +             data _docs_;
36010     +               set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
36011     +               _SEGMNT_=_cluster_;
36012     +             run;
36013     +
36014     +             %tmterm1(DSN_TPARS=_tmout_,
36015     +              DSN_CLUS=_docs_,
36016     +              DSN_DESC=_desc_,
36017     +              N_DESC_TERMS=&descterms,
36018     +              N_CLUS=&nclus,
36019     +              top_freq=%eval(&descterms*2),
36020     +              key=);
36021     +
36022     +             %tmsort(data=_desc_,
36023     +               out=_desc_,
36024     +               by=_cluster_,
36025     +                  options=,
36026     +               threads=threads);
36027     +
36028     +             proc sql noprint;
36029     +               create table &outclusters as
36030     +                 select a.clus_desc, b.* from &outclusters b left join _desc_ a
36031     +                 on a._cluster_=b._cluster_;
36032     +             quit;
36033     +
36034     +       %end;
36035     +
36036     +    %end;
36037     +    %else %do;
36038     +
36039     +        data _clustermean;
36040     +            set &clusters(keep=_cluster_ _mean1-_mean&svdkeep. freq);
36041     +        run;
36042     +
36043     +        proc sql;
36044     +        create table _meandocs as
36045     +            select a.*, b.*
36046     +            from &export(keep=&prefix._SVD1 - &prefix._SVD&SVDKEEP _document_) a , _clustermean b;
36047     +        quit;
36048     +
36049     +
36050     +        proc sort data=_meandocs;
36051     +        by _document_;
36052     +        run;
36053     +
36054     +        %if (&syscc>4) %then %do;
36055     +            %let emexceptionstring=EMTOOL.INSUFFICIENTMEM;
36056     +            %goto end_tmc;
36057     +        %end;
36058     +
36059     +        %tmsort(data=_meandocs,out=,by=_document_);
36060     +
36061     +          data _docdata(drop=_mean1-_mean&svdkeep. j _CLUSTER_ _freq_ rename=(_cluster_=&prefix._cluster_ distance=&prefix._distance));
36062     +            set _meandocs;
36063     +            drop _minDist_ _dist_ j freq;
36064     +            label CLUSTER = 'Cluster ID';
36065     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
36066     +            array _cols(&svdkeep) &prefix._SVD1-&prefix._SVD&svdkeep.;
36067     +            by _document_;
36068     +            retain CLUSTER _mindist_;
36069     +            _dist_ = 0;
36070     +            /* innner product*/
36071     +            do j = 1 to &svdkeep;
36072     +                _dist_ = _dist_ + (_cols(j)-_means(j))*(_cols(j)-_means(j));
36073     +            end;
36074     +
36075     +            /* initialization*/
36076     +            if first._document_ then do;
36077     +                _minDist_ = _dist_;
36078     +                CLUSTER = _cluster_;
36079     +            end;
36080     +            /*optimization*/
36081     +            if (_dist_ < _minDist_) then do;
36082     +                _minDist_ = _dist_;
36083     +                CLUSTER = _cluster_;
36084     +            end;
36085     +            if last._document_ then do;
36086     +               output;
36087     +            end;
36088     +        run;
36089     +        proc sort data=_docdata;
36090     +           by _document_;
36091     +        proc sort data=&export;
36092     +           by _document_;
36093     +        run;
36094     +
36095     +        data &export;
36096     +           merge &export _docdata;
36097     +           by _document_;
36098     +           rename cluster=&prefix._cluster_;
36099     +        run;
36100     +    %end;
36101     +
36102     +    /* Reorder variables in exported data set */
36103     +    proc sql noprint;
36104     +        create table &export as
36105     +        select &textvar, &prefix._cluster_, *
36106     +        from &export;
36107     +    quit;
36108     +
36109     +
36110     +    %if &outclusters ne %then %do;
36111     +
36112     +        /* update freqencies in cluster table */
36113     +         proc freq data =_docdata ;
36114     +            tables cluster/out=_tempfreqtable;
36115     +         run;
36116     +
36117     +        proc sql noprint;
36118     +            create table &outclusters as
36119     +            select  a.*, b.count as freq, b.percent/100 as percent
36120     +            from &clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b
36121     +           where a._cluster_=b.cluster;
36122     +
36123     +        quit;
36124     +
36125     +        %if %left(&algorithm)=2.0 %then %do;
36126     +
36127     +          proc sql noprint;
36128     +
36129     +             create table &hierds as select a.freq, b.*
36130     +                from &outclusters a right join &hierds b on a._cluster_=b._cluster_;
36131     +          quit;
36132     +
36133     +          /* Find descriptive terms for clusters & parents */
36134     +          filename temp catalog 'sashelp.emtxtext.tmgethierterms.source';
36135     +          %include temp;
36136     +          filename temp;
36137     +
36138     +          %tm_getHierTerms(hierds=&hierds,
36139     +                         docs=_docdata,
36140     +                         tmout=&filtertmout,
36141     +                         terms= &filterterms,
36142     +                         ndescterms=&descterms);
36143     +
36144     +          proc sql noprint;
36145     +             create table &outclusters as
36146     +                select a.clus_desc, b.* from &hierds a, &outclusters b
36147     +                where a._cluster_=b._cluster_;
36148     +
36149     +             update &hierds set freq=0 where clus_desc="" and _cluster_ ne 1;
36150     +          quit;
36151     +
36152     +          /* Add frequencies to ancestors */
36153     +          data _hd;
36154     +             set &hierds;
36155     +             cluster=_cluster_;
36156     +             drop _cluster_ parent;
36157     +          run;
36158     +
36159     +          %let empty=1;
36160     +
36161     +          %do %while (&empty);
36162     +
36163     +            proc sql noprint;
36164     +                update _hd set freq=
36165     +                    (select sum(freq) from &HIERDS
36166     +                    where parent=cluster)
36167     +                    where freq=. and cluster not in
36168     +                    (select parent from &hierds where freq=.);
36169     +                select count(*) into :empty from _hd
36170     +                    where freq=.;
36171     +                update &hierds set freq=(select freq from _hd where _cluster_=cluster);
36172     +            quit;
36173     +
36174     +          %end;
36175     +
36176     +          /* Set graphdesc variable for graph display */
36177     +          data &hierds(drop=plus pos sub);
36178     +            set &hierds;
36179     +            plus='';
36180     +            if substr(CLUS_DESC, 1, 1) = "+" then plus="+ ";
36181     +            if ktrim(clus_desc) ne "" then do;
36182     +              if(substr(CLUS_DESC, 1, 1)) = "'" then do;
36183     +                 pos = findc(CLUS_DESC, "'",2);
36184     +                 sub = substr(CLUS_DESC,1,pos);
36185     +              end;
36186     +              else sub = scan(CLUS_DESC, 1);
36187     +              graphdesc=_CLUSTER_ || ': ' || plus || sub;
36188     +            end;
36189     +            else graphdesc=_CLUSTER_;
36190     +          run;
36191     +        %end;
36192     +
36193     +         /*calculate residual for each doc */
36194     +
36195     +         proc sort data=_docdata (rename=(cluster=_cluster_));
36196     +            by _cluster_;
36197     +         run;
36198     +
36199     +         data _rmscalc;
36200     +            merge _docdata(in=inhere) &outclusters;
36201     +            array _means(&svdkeep) _mean1-_mean&svdkeep.;
36202     +            array _svds(&svdkeep) &prefixstring._SVD1 - &prefixstring._SVD&svdkeep.;
36203     +            by _cluster_;
36204     +            error=0;
36205     +            do i = 1 to &svdkeep;
36206     +               error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
36207     +            end;
36208     +
36209     +            drop i ;
36210     +         run;
36211     +
36212     +          /*calc standardized residual for clusters*/
36213     +         proc summary data=_rmscalc nway;
36214     +            class _cluster_;
36215     +            var error;
36216     +            output out=_meanerr mean=meane sum=sume;
36217     +         run;
36218     +
36219     +         data _rmsse;
36220     +            set _meanerr;
36221     +            /* original code divides by number of svd dims*/
36222     +            if _freq_ gt 1 then do;
36223     +              _rmsstd_=sqrt(sume/((_freq_-1)*(&svdkeep.)));
36224     +            end;
36225     +            else do;
36226     +              _rmsstd_=0;
36227     +            end;
36228     +            keep _cluster_  _rmsstd_;
36229     +         run;
36230     +
36231     +
36232     +         proc sql noprint;
36233     +           create table _clusstat2 as
36234     +           select a.*,b.*
36235     +           from &outclusters a left join _rmsse b
36236     +           on a._cluster_=b._cluster_;
36237     +
36238     +           create table &outclusters as
36239     +           select * from _clusstat2;
36240     +         quit;
36241     +
36242     +
36243     +    %end;
36244     +
36245     +
36246     +%end_tmc:
36247     +    %if &tm_debug =0  %then %do;
36248     +    proc sql noprint;
36249     +        drop table _weights;
36250     +        drop table _colpro;
36251     +        drop table _scrout;
36252     +        drop table _svdm1;
36253     +        drop table _inweights;
36254     +        drop table _clustermean;
36255     +        drop table _clusstat2;
36256     +        drop table _outtmutil;
36257     +        drop table _rmscalc;
36258     +        drop table _rmsse;
36259     +        drop table _meanerr;
36260     +        drop table _meandocs;
36261     +        drop table _import_ds;
36262     +        drop table _hd;
36263     +        drop table _terms_;
36264     +        drop table _docs_;
36265     +        drop table _tmout_;
36266     +        drop table _desc_;
36267     +        drop table _docdata;
36268     +    quit;
36269     +    %end;
36270     +
36271     +%mend tmc_doc_score;
36272     +
36273     +
36274     +
36275     +
36276     +
36277     +
36278     +
36279     +
36280     +
36281     +
36282     +
36283     +
36284     +
36285     +
36286     +
36287     +
36288     +
36289     +
36290     +
36291     +
36292     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmsvd.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMSVD.SOURCE.
36294     + /*
36296     +  Macro:     tmsvd.sas
36297     +  Purpose:  Call proc spsvd with given defaults and parameters.
36298     +  Syntax:   %tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
36299     +            in_global=,in_u=,in_s=,in_v=,u=,s=,v=,wgt=,wordPro=,
36300     +           colPro=, p=, tol=, gwgt=, mink=, maxk=, res=, remote=, compact=,bigpro=0);
36302     +  Required Parameters:  in     The data= data set.
36303     +  Optional Parameters:  k= The number of dimensions to reduce to
36304     +                   global=  The global weight to use, defaults to IDF.
36305     +                   local=  The local weight to use, defaults to BINARY.
36306     +                   row=   Column in the input data set that represents
36307     +                          the matrix row,
36308     +                       defaults to _termnum_.
36309     +            col=   Column in the input data set that represents
36310     +                          the matrix column,
36311     +                         defaults to _document_.
36312     +            entry= Column in the input data set that represents the
36313     +                          value in the
36314     +                         given row,column cell.  Defaults to _count_.
36315     +             scaleOp= Scale options: scalerow scalecol scaleall
36316     +            normOp=  Normalization options: normrow normcol normall
36317     +            in_global= The gwgt= output data set from a prior spsvd run.
36318     +                   in_u=  The u= output from a prior spsvd run.
36319     +                   in_s=  The s= output from a prior spsvd run.
36320     +                   in_v=  The v= output from a prior spsvd run.
36321     +                   u=     matrix U data set
36322     +                   s=     matrix S data set
36323     +                   v=     matrix V data set
36324     +                  wgt=   weighted input matrix data set
36325     +                  wordPro= projections of rows of A onto columns of V
36326     +                  colPro=  projection of columns of A onto columns of U
36327     +                  p=   number of iterations
36328     +                  tol= convergence tolerance
36329     +                   gwgt= global weights data set
36330     +                  mink=
36331     +                  maxk=
36332     +                  res=
36333     +                  remote= name of file
36335     +  History:
36336     +  2001/01/16 - Kevin Daly - Initial coding.
36337     +  2001/01/19 - Kevin Daly - Fixed so that when global=NONE and local=NONE,
36338     +             no gwgt data set
36339     +               is requested.  This was causing an error and the proc
36340     +              would terminate.
36341     +  2001/02/21 - Bill Wheeler - Allowd all options to be specified
36342     +  2001/05/14 - Bill Wheeler - Added version 9 options min_k, max_k, resolution
36343     +  2001/08/14 - Bill Wheeler - Added remote option
36344     +  2001/11/29 - Bill Wheeler - Updated for version 8 or 9
36345     +*/
36347     +%macro tmsvd(in,k=,global=,local=,row=,col=,entry=,scaleOp=,normOp=,
36348     +             in_global=, in_u=, in_s=, in_v=, u=, s=, v=,
36349     +             wgt=, wordPro=, colPro=, p=, tol=, gwgt=, mink=, maxk=, res=,
36350     +             remote=, compact=,bigpro= );
36352     +  %put;
36353     +  /* Defaults */
36354     +  %if &k ^= %then %let k = k = &k;
36355     +  %if &global ^= %then %let global = global = &global;
36356     +  %if %lowcase(&local) = bin %then %let local=BINARY;
36357     +  %if &local ^= %then %let local=local=&local;
36358     +  %if &row= %then %let row=_termnum_;
36359     +  %if &col= %then %let col=_document_;
36360     +  %if &entry= %then %let entry=_count_;
36361     +  %if &scaleOp ^= %then %let scaleOp = scaledoc;
36362     +  %if &normOp ^= %then %let normOp = normdoc;
36363     +  %if &compact ^= %then %let compact = compact;
36364     +  %else %let compact = ;
36366     +  %if &in_global ^= %then %let in_global = in_global=&in_global;
36367     +  %if &in_u ^= %then %let in_u = in_u=&in_u;
36368     +  %if &in_s ^= %then %let in_s = in_s=&in_s;
36369     +  %if &in_v ^= %then %let in_v = in_v=&in_v;
36370     +  %if ((&p ^= ) and (&p ^= .)) %then %let p = p=&p;
36371     +  %else %let p = ;
36372     +  %if ((&tol ^= ) and (&tol ^= .)) %then %let tol = tol=&tol;
36373     +  %else %let tol = ;
36375     +  %IF &SYSVER < 9 %THEN %DO;
36376     +    %IF &k = %THEN %DO;
36377     +      %IF &maxk ^= %THEN %LET k = k = &maxk;
36378     +      %ELSE %LET k = k = 100;
36379     +    %END;
36380     +    %LET mink = ;
36381     +    %LET maxk = ;
36382     +    %LET res = ;
36383     +    %LET remote = ;
36384     +    %LET compact = ;
36385     +  %END;
36388     +  %if &colPro ^= %then %let colPro = COLPRO=&colPro;
36389     +  %if &gwgt ^= %then %let gwgt = GWGT=&gwgt;
36390     +  %if &s ^= %then %let s = S=&s;
36391     +  %if &u ^= %then %let u = U=&u;
36392     +  %if &v ^= %then %let v = V=&v;
36393     +  %if &wordPro ^= %then %let wordPro = WORDPRO=&wordPro;
36394     +  %if &wgt ^= %then %let wgt = WGT=&wgt;
36395     +  %if (&mink ^=  ) and (&mink ^= .) %then %let mink = min_k = &mink;
36396     +  %else %let mink = ;
36397     +  %if &maxk ^= %then %let maxk = max_k = &maxk;
36398     +  %if &res ^= %then %let res = res = &res;
36399     +  proc sort data=&in; by &col;
36400     +  /* Run the proc */
36401     +  proc spsvd data=&in
36402     +      &mink
36403     +      &maxk
36404     +      &res
36405     +      &k &compact
36406     +    &local &global &in_global
36407     +    &in_u &in_s &in_v &p &tol;
36408     +    row &row; col &col; entry &entry;
36409     +      output &colPro &gwgt &normOp &scaleOp &s &u &v
36410     +           &wordPro &wgt &bigpro;
36411     +    &remote;
36412     +  run;
36414     +%mend tmsvd;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtext.tmfast.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTEXT.TMFAST.SOURCE.
36415     + /*
36416     +
36417     +  Macro:   tmfast.sas
36418     +  Purpose: Call proc fastclus with given defaults and parameters.
36419     +  Syntax:  %tmfast(data=, clusters=, outstat=, vars=);
36420     +
36421     +  Required Parameters:  data=      The input data set.
36422     +                        clusters=  The maximum number of clusters
36423     +
36424     +  Optional Parameters:  vars=      Variables to be used
36425     +                        outstat=   The name of the OUTSTAT data set
36426     +                        outseed=   The name of the OUTSEED data set
36427     +
36428     +  Either outstat or outseed mut be given, but not both.
36429     +  History:
36430     +  2001/01/16 - Bill Wheeler - Initial Coding.
36431     +
36432     +*/
36433     +%MACRO tmfast(data=, clusters=, outstat=, outseed=,
36434     +                 id=, out=, vars=);
36435     + /* defaults */
36436     + %if (&id ne ) %then %let id = id &id;
36437     + %if (&out ne ) %then %let out = out = &out;
36438     + %if (&vars ne ) %then %let var = var &vars;
36439     + %else %let var = ;
36440     +
36441     + %if &outseed= %then
36442     + %do;
36443     +   proc fastclus data = &data
36444     +   maxclusters = &clusters noprint
36445     +   outstat = &outstat &out;
36446     +   &var;
36447     +   &id;
36448     + %end;
36449     + %else
36450     + %do;
36451     +   proc fastclus data = &data
36452     +   maxclusters = &clusters noprint
36453     +   outseed = &outseed &out;
36454     +   &var;
36455     +   &id;
36456     + %end;
36457     +%MEND tmfast;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   proc sql noprint;
MPRINT(SCORE):   select count(*) into :svdkeep from EMWS3.TextCluster_svd_s where keep=1;
MPRINT(SCORE):   create table _clusterms as select key, term, role, keep, freq, numdocs, parent, _ispar, weight from EMWS3.TextCluster_terms;
NOTE: Table WORK._CLUSTERMS created, with 204 rows and 9 columns.

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   data _filter_tmout;
MPRINT(SCORE):   set EMWS3.TextFilter_tmout;
MPRINT(SCORE):   run;

NOTE: There were 504 observations read from the data set EMWS3.TEXTFILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 504 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   select cellwgt into: cellwgt from EMWS3.TextCluster_tmconfig;
MPRINT(TMC_DOC_SCORE):   select clus_alg into: algorithm from EMWS3.TextCluster_tmconfig;
MPRINT(TMC_DOC_SCORE):   select parseVar into :textvar from EMWS3.TextCluster_tmconfig;
MPRINT(TMC_DOC_SCORE):   select count(*) into :nclus from EMWS3.TextCluster_clusters;
MPRINT(TMC_DOC_SCORE):   select count(*) into :svdkeep from EMWS3.TextCluster_svd_s where keep=1;
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):   data _import_ds;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextFilter_TRAIN;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 4400 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 100 observations read from the data set EMWS3.TEXTFILTER_DOC_IDS.
NOTE: There were 100 observations read from the data set EMWS3.TEXTFILTER_TRAIN.
NOTE: The data set WORK._IMPORT_DS has 100 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _clusterms(where=(keep='Y')) THREADS out = _terms(keep= KEY PARENT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 204 observations read from the data set WORK._CLUSTERMS.
      WHERE keep='Y';
NOTE: The data set WORK._TERMS has 204 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _filter_tmout THREADS out = _filter_tmout;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: There were 504 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._FILTER_TMOUT has 504 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _svdm1;
MPRINT(TMC_DOC_SCORE):   merge _terms (where=(PARENT ne _termnum_) in=_b_ keep=KEY PARENT rename=(KEY=_TERMNUM_)) _filter_tmout (in = _A_ rename=(_COUNT_=COUNT));
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _B_;
MPRINT(TMC_DOC_SCORE):   if (_A_ and _B_ and (PARENT ne .)) then _TERMNUM_ = PARENT;
MPRINT(TMC_DOC_SCORE):   keep _TERMNUM_ _DOCUMENT_ COUNT;
MPRINT(TMC_DOC_SCORE):   if (_DOCUMENT_=.) or (COUNT=.) then delete;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 170 observations read from the data set WORK._TERMS.
      WHERE PARENT not = _termnum_;
NOTE: There were 504 observations read from the data set WORK._FILTER_TMOUT.
NOTE: The data set WORK._SVDM1 has 504 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql ;
MPRINT(TMC_DOC_SCORE):   create table _scrout as select distinct _TERMNUM_, _DOCUMENT_, sum(COUNT) as _COUNT_ from _svdm1 group by _TERMNUM_, _DOCUMENT_;
NOTE: Table WORK._SCROUT created, with 498 rows and 3 columns.

MPRINT(TMC_DOC_SCORE):   drop table _svdm1;
NOTE: Table WORK._SVDM1 has been dropped.
MPRINT(TMC_DOC_SCORE):   drop table _terms;
NOTE: Table WORK._TERMS has been dropped.
MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _clusterms(where=(KEEP='Y' and PARENT=.)) out = _weights (rename=(KEY=INDEX WEIGHT=GWGT) keep=KEY WEIGHT);
MPRINT(TMSORT):   by KEY;
MPRINT(TMSORT):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 40 observations read from the data set WORK._CLUSTERMS.
      WHERE (KEEP='Y') and (PARENT=.);
NOTE: The data set WORK._WEIGHTS has 40 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _scrout out = _scrout;
MPRINT(TMSORT):   by _DOCUMENT_;
MPRINT(TMSORT):   run;

NOTE: There were 498 observations read from the data set WORK._SCROUT.
NOTE: The data set WORK._SCROUT has 498 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS3.TextCluster_svd_u;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextCluster_svd_u(keep= index col1-col12);
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 40 observations read from the data set EMWS3.TEXTCLUSTER_SVD_U.
NOTE: The data set EMWS3.TEXTCLUSTER_SVD_U has 40 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql;
MPRINT(TMC_DOC_SCORE):   create table _inweights as select a.* from _weights a right join EMWS3.TextCluster_svd_u b on a.index=b.index ;
NOTE: Table WORK._INWEIGHTS created, with 40 rows and 2 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):   proc spsvd data=_scrout IN_U=EMWS3.TextCluster_svd_u local = LOG global = none in_global = _inweights ;
MPRINT(TMC_DOC_SCORE):   row _TERMNUM_;
MPRINT(TMC_DOC_SCORE):   col _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   entry _COUNT_;
MPRINT(TMC_DOC_SCORE):   output colpro=_COLPRO bigpro normcol prefix="TextCluster_SVD";
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 498 observations read from the data set WORK._SCROUT.
NOTE: There were 40 observations read from the data set EMWS3.TEXTCLUSTER_SVD_U.
NOTE: There were 40 observations read from the data set WORK._INWEIGHTS.
NOTE: The data set WORK._COLPRO has 97 observations and 13 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_import_ds;
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._IMPORT_DS.
NOTE: The data set WORK._IMPORT_DS has 100 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_colpro;
MPRINT(TMC_DOC_SCORE):   by INDEX;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 97 observations read from the data set WORK._COLPRO.
NOTE: The data set WORK._COLPRO has 97 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data EMWS3.TextCluster_TRAIN;
MPRINT(TMC_DOC_SCORE):   merge _import_ds (in=_C_ ) _colpro (rename=(INDEX=_DOCUMENT_));
MPRINT(TMC_DOC_SCORE):   by _DOCUMENT_;
MPRINT(TMC_DOC_SCORE):   if _C_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._IMPORT_DS.
NOTE: There were 97 observations read from the data set WORK._COLPRO.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data EMWS3.TextCluster_TRAIN;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextCluster_TRAIN;
MPRINT(TMC_DOC_SCORE):   array svd_array TextCluster_SVD1 - TextCluster_SVD12;
MPRINT(TMC_DOC_SCORE):   do i = 1 to dim(svd_array);
MPRINT(TMC_DOC_SCORE):   if svd_array(i)=. then svd_array(i)=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 19 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = EMWS3.TextCluster_TRAIN ;
MPRINT(TMSORT):   by _document_;
MPRINT(TMSORT):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 19 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMEMCLUS):   proc emclus data = EMWS3.TextCluster_TRAIN role = score clusters = 12 seed=EMWS3.TextCluster_emoutstat out = EMWS3.TextCluster_TRAIN ;
MPRINT(TMEMCLUS):   var TextCluster_SVD1 - TextCluster_SVD12;
MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: There were 25 observations read from the data set EMWS3.TEXTCLUSTER_EMOUTSTAT.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 32 variables.
NOTE: PROCEDURE EMCLUS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMPRED):   * set the optional arguments;
MPRINT(TMPRED):   data EMWS3.TextCluster_TRAIN(compress=Y drop=_c1-_c12) ;
MPRINT(TMPRED):   set EMWS3.TextCluster_TRAIN end=eof;
MPRINT(TMPRED):   * array for holding all probabilities;
MPRINT(TMPRED):   array _p prob1--prob12;
MPRINT(TMPRED):   array _c(12);
MPRINT(TMPRED):   retain _c 0;
MPRINT(TMPRED):   * get rid of working columns;
MPRINT(TMPRED):   drop _max_ _i _WARN_;
MPRINT(TMPRED):   _max_ = 0;
MPRINT(TMPRED):   do _i = 1 to 12;
MPRINT(TMPRED):   if _p(_i) > _max_ then do;
MPRINT(TMPRED):   _max_ = _p(_i);
MPRINT(TMPRED):   _CLUSTER_ = _i;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   end;
MPRINT(TMPRED):   if (_CLUSTER_ >= 1) and (_CLUSTER_ <= 12) then _c(_CLUSTER_) = _c(_CLUSTER_) + 1;
MPRINT(TMPRED):   else _CLUSTER_ = .;
MPRINT(TMPRED):   ;
MPRINT(TMPRED):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 32 variables.
NOTE: Compressing data set EMWS3.TEXTCLUSTER_TRAIN decreased size by 33.33 percent. 
      Compressed is 2 pages; un-compressed would require 3 pages.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data EMWS3.TextCluster_TRAIN;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextCluster_TRAIN;
MPRINT(TMC_DOC_SCORE):   rename prob1-prob12 = TextCluster_prob1-TextCluster_prob12;
MPRINT(TMC_DOC_SCORE):   rename _cluster_=TextCluster_cluster_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: The data set EMWS3.TEXTCLUSTER_TRAIN has 100 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc tmutil data=_filter_tmout key=EMWS3.TextFilter_terms ;
MPRINT(TMC_DOC_SCORE):   control init memloc="_tmmem" release;
MPRINT(TMC_DOC_SCORE):   output keeponly out=_outtmutil;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 504 observations read from the data set WORK._FILTER_TMOUT.
NOTE: There were 204 observations read from the data set EMWS3.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 7276 observations read from the data set EMWS3.TEXTFILTER_TERM_STRINGS.
NOTE: The data set WORK._OUTTMUTIL has 498 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):   data _docdata;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextCluster_TRAIN (rename=(TextCluster_cluster_=cluster));
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set EMWS3.TEXTCLUSTER_TRAIN.
NOTE: The data set WORK._DOCDATA has 100 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data _terms_;
MPRINT(TMC_DOC_SCORE):   set EMWS3.TextFilter_terms;
MPRINT(TMC_DOC_SCORE):   by key _ispar;
MPRINT(TMC_DOC_SCORE):   if first.key then output;
MPRINT(TMC_DOC_SCORE):   else;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 204 observations read from the data set EMWS3.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 7276 observations read from the data set EMWS3.TEXTFILTER_TERM_STRINGS.
NOTE: There were 204 observations read from the data set EMWS3.TEXTFILTER_TERMS.
NOTE: The data set WORK._TERMS_ has 170 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data _terms_;
MPRINT(TMC_DOC_SCORE):   set _terms_;
MPRINT(TMC_DOC_SCORE):   if _ispar='+' then Term=_ispar || ' ' || term;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 170 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TERMS_ has 170 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _outtmutil threads out = _tmout_;
MPRINT(TMSORT):   by _termnum_;
MPRINT(TMSORT):   run;

NOTE: There were 498 observations read from the data set WORK._OUTTMUTIL.
NOTE: The data set WORK._TMOUT_ has 498 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   data _tmout_;
MPRINT(TMC_DOC_SCORE):   merge _tmout_ (in=_A_) _terms_ (rename=(key=_termnum_ term=_term_) keep=key term );
MPRINT(TMC_DOC_SCORE):   by _termnum_;
MPRINT(TMC_DOC_SCORE):   if _A_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 498 observations read from the data set WORK._TMOUT_.
NOTE: There were 170 observations read from the data set WORK._TERMS_.
NOTE: The data set WORK._TMOUT_ has 498 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data _docs_;
MPRINT(TMC_DOC_SCORE):   set _docdata (rename=(cluster=_cluster_) keep=_document_ cluster);
MPRINT(TMC_DOC_SCORE):   _SEGMNT_=_cluster_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCS_ has 100 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create view _CMB as select t1.*, t2._segmnt_ as cluster from _tmout_ t1, _docs_ t2 where t1._document_ = t2._document_ ;
NOTE: SQL view WORK._CMB has been defined.
MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc summary data=_CMB nway ;
MPRINT(TMTERM1):   class cluster _term_ ;
MPRINT(TMTERM1):   var _count_ ;
MPRINT(TMTERM1):   output out=_TFREQ sum=total ;
MPRINT(TMTERM1):   run ;

NOTE: There were 498 observations read from the data set WORK._TMOUT_.
NOTE: There were 100 observations read from the data set WORK._DOCS_.
NOTE: There were 498 observations read from the data set WORK._CMB.
NOTE: The data set WORK._TFREQ has 224 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc summary data=_CMB( keep= cluster _document_ ) ;
MPRINT(TMTERM1):   class cluster ;
MPRINT(TMTERM1):   var _document_ ;
MPRINT(TMTERM1):   output out=_SUM n=n ;
MPRINT(TMTERM1):   run ;

NOTE: There were 498 observations read from the data set WORK._TMOUT_.
NOTE: There were 100 observations read from the data set WORK._DOCS_.
NOTE: There were 498 observations read from the data set WORK._CMB.
NOTE: The data set WORK._SUM has 13 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   data _null_ ;
MPRINT(TMTERM1):   set _SUM ;
MPRINT(TMTERM1):   if _type_ = 1 then call symput( 'CLUSIZE' || left( put( cluster, best. )), put( _freq_, best. ));
MPRINT(TMTERM1):   else if _type_ = 0 then call symput( 'CLUSALL', put( _freq_, best. )) ;
MPRINT(TMTERM1):   run ;

NOTE: There were 13 observations read from the data set WORK._SUM.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _SUM;
NOTE: Table WORK._SUM has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _TFREQ THREADS out = _TFREQ;
MPRINT(TMSORT):   by cluster descending _freq_;
MPRINT(TMSORT):   run;

NOTE: There were 224 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._TFREQ has 224 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _UNQT( keep= _term_ _freq_ cluster ) ;
MPRINT(TMTERM1):   set _TFREQ ;
MPRINT(TMTERM1):   by cluster ;
MPRINT(TMTERM1):   if first.cluster then n_term = 0 ;
MPRINT(TMTERM1):   n_term + 1 ;
MPRINT(TMTERM1):   if n_term le 30 ;
MPRINT(TMTERM1):   run ;

NOTE: There were 224 observations read from the data set WORK._TFREQ.
NOTE: The data set WORK._UNQT has 224 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _UNQT THREADS nodupkey out = _UNQT( keep= _term_ );
MPRINT(TMSORT):   by _term_;
MPRINT(TMSORT):   run;

NOTE: There were 224 observations read from the data set WORK._UNQT.
NOTE: 185 observations with duplicate key values were deleted.
NOTE: The data set WORK._UNQT has 39 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   create table _CLCDF as select distinct cluster, _term_, _freq_ from _TFREQ where _term_ in ( select _term_ from _UNQT ) order by _term_, cluster ;
NOTE: Table WORK._CLCDF created, with 224 rows and 3 columns.

MPRINT(TMTERM1):   quit ;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _UNQT;
NOTE: Table WORK._UNQT has been dropped.
MPRINT(TMTERM1):   drop table _TFREQ;
NOTE: Table WORK._TFREQ has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc transpose data=_CLCDF out=_CLCDF prefix=clus ;
MPRINT(TMTERM1):   by _term_ ;
MPRINT(TMTERM1):   var _freq_ ;
MPRINT(TMTERM1):   id cluster;
MPRINT(TMTERM1):   run ;

NOTE: There were 224 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 39 observations and 14 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   data _CLCDF ;
MPRINT(TMTERM1):   length _term_ $100;
MPRINT(TMTERM1):   array a_clus ( 12 ) 4 clus1 - clus12 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   do _i_ = 1 to 12 ;
MPRINT(TMTERM1):   if a_clus( _i_ ) = . then a_clus( _i_ ) = 0 ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   sumfreq = sum( of clus1 - clus12 ) ;
MPRINT(TMTERM1):   if (clus1 = 0) or (clus1 < 0) then cdf1 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus1 ;
MPRINT(TMTERM1):   div = 498 - 29;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf1 = CDF( 'binomial', clus1 , propor , 29 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf1 = 1;
MPRINT(TMTERM1):   else cdf1 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus2 = 0) or (clus2 < 0) then cdf2 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus2 ;
MPRINT(TMTERM1):   div = 498 - 40;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf2 = CDF( 'binomial', clus2 , propor , 40 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf2 = 1;
MPRINT(TMTERM1):   else cdf2 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus3 = 0) or (clus3 < 0) then cdf3 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus3 ;
MPRINT(TMTERM1):   div = 498 - 36;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf3 = CDF( 'binomial', clus3 , propor , 36 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf3 = 1;
MPRINT(TMTERM1):   else cdf3 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus4 = 0) or (clus4 < 0) then cdf4 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus4 ;
MPRINT(TMTERM1):   div = 498 - 46;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf4 = CDF( 'binomial', clus4 , propor , 46 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf4 = 1;
MPRINT(TMTERM1):   else cdf4 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus5 = 0) or (clus5 < 0) then cdf5 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus5 ;
MPRINT(TMTERM1):   div = 498 - 62;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf5 = CDF( 'binomial', clus5 , propor , 62 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf5 = 1;
MPRINT(TMTERM1):   else cdf5 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus6 = 0) or (clus6 < 0) then cdf6 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus6 ;
MPRINT(TMTERM1):   div = 498 - 33;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf6 = CDF( 'binomial', clus6 , propor , 33 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf6 = 1;
MPRINT(TMTERM1):   else cdf6 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus7 = 0) or (clus7 < 0) then cdf7 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus7 ;
MPRINT(TMTERM1):   div = 498 - 19;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf7 = CDF( 'binomial', clus7 , propor , 19 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf7 = 1;
MPRINT(TMTERM1):   else cdf7 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus8 = 0) or (clus8 < 0) then cdf8 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus8 ;
MPRINT(TMTERM1):   div = 498 - 44;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf8 = CDF( 'binomial', clus8 , propor , 44 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf8 = 1;
MPRINT(TMTERM1):   else cdf8 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus9 = 0) or (clus9 < 0) then cdf9 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus9 ;
MPRINT(TMTERM1):   div = 498 - 30;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf9 = CDF( 'binomial', clus9 , propor , 30 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf9 = 1;
MPRINT(TMTERM1):   else cdf9 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus10 = 0) or (clus10 < 0) then cdf10 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus10 ;
MPRINT(TMTERM1):   div = 498 - 51;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf10 = CDF( 'binomial', clus10 , propor , 51 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf10 = 1;
MPRINT(TMTERM1):   else cdf10 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus11 = 0) or (clus11 < 0) then cdf11 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus11 ;
MPRINT(TMTERM1):   div = 498 - 52;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf11 = CDF( 'binomial', clus11 , propor , 52 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf11 = 1;
MPRINT(TMTERM1):   else cdf11 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (clus12 = 0) or (clus12 < 0) then cdf12 = 0;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   num = sumfreq - clus12 ;
MPRINT(TMTERM1):   div = 498 - 56;
MPRINT(TMTERM1):   if div > 0 then do;
MPRINT(TMTERM1):   propor = num/div;
MPRINT(TMTERM1):   cdf12 = CDF( 'binomial', clus12 , propor , 56 ) ;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if num = 0 then cdf12 = 1;
MPRINT(TMTERM1):   else cdf12 = 0;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   saveplus=0;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),'+')=1 then do;
MPRINT(TMTERM1):   saveplus=1;
MPRINT(TMTERM1):   _term_ = ksubstr(kleft(ktrim(_term_)),3);
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if kindex(kleft(ktrim(_term_)),' ')>0 then _term_ = "'"||kleft(ktrim(_term_)) || "'  ";
MPRINT(TMTERM1):   else _term_ = kleft(ktrim(_term_)) || ' ';
MPRINT(TMTERM1):   if saveplus=1 then do;
MPRINT(TMTERM1):   _term_='+'||kleft(ktrim(_term_));
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   drop _i_ propor sumfreq div num saveplus;
MPRINT(TMTERM1):   run ;

NOTE: There were 39 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDF has 39 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   data _CLCDFTR ;
MPRINT(TMTERM1):   array a_cdf ( 12 ) cdf1 - cdf12 ;
MPRINT(TMTERM1):   array a_count ( 12 ) clus1 - clus12 ;
MPRINT(TMTERM1):   length clus 4 ;
MPRINT(TMTERM1):   set _CLCDF ;
MPRINT(TMTERM1):   keep _term_ cdf clus doc_count;
MPRINT(TMTERM1):   do clus = 1 to 12 ;
MPRINT(TMTERM1):   cdf = a_cdf( clus ) ;
MPRINT(TMTERM1):   doc_count = a_count( clus ) ;
MPRINT(TMTERM1):   if cdf > 0 then output ;
MPRINT(TMTERM1):   end ;
MPRINT(TMTERM1):   run ;

NOTE: There were 39 observations read from the data set WORK._CLCDF.
NOTE: The data set WORK._CLCDFTR has 224 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDF;
NOTE: Table WORK._CLCDF has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMSORT):   proc sort data = _CLCDFTR THREADS out = _CLCDFTR;
MPRINT(TMSORT):   by clus descending cdf descending doc_count _term_;
MPRINT(TMSORT):   run;

NOTE: There were 224 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._CLCDFTR has 224 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMTERM1):  ;
MPRINT(TMTERM1):   data _desc_;
MPRINT(TMTERM1):   set _CLCDFTR (rename=(clus=cluster));
MPRINT(TMTERM1):   format clus_desc $450.;
MPRINT(TMTERM1):   retain oldclus 0 clus_desc '' count 0;
MPRINT(TMTERM1):   keep _CLUSTER_ clus_desc ;
MPRINT(TMTERM1):   if _N_ = 1 then do;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   count = 1;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   if (count <= 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 1) then clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   else clus_desc = kleft(trim(clus_desc)) || "  " || kleft(trim(_term_));
MPRINT(TMTERM1):   count = count + 1;
MPRINT(TMTERM1):   if (_N_ = 224) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else if (count > 15) and (cluster = oldclus) then do;
MPRINT(TMTERM1):   if (_N_ = 224) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else delete;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   else do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   oldclus = cluster;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   count = 2;
MPRINT(TMTERM1):   clus_desc = left(trim(_term_));
MPRINT(TMTERM1):   if (_N_ = 224) then do;
MPRINT(TMTERM1):   _CLUSTER_ = oldclus;
MPRINT(TMTERM1):   clus_desc = left(trim(clus_desc));
MPRINT(TMTERM1):   output;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   end;
MPRINT(TMTERM1):   run;

NOTE: There were 224 observations read from the data set WORK._CLCDFTR.
NOTE: The data set WORK._DESC_ has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMTERM1):   proc sql THREADS;
MPRINT(TMTERM1):   drop table _CLCDFTR;
NOTE: Table WORK._CLCDFTR has been dropped.
MPRINT(TMTERM1):   drop view _CMB;
NOTE: View WORK._CMB has been dropped.
MPRINT(TMTERM1):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMSORT):   proc sort data = _desc_ threads out = _desc_;
MPRINT(TMSORT):   by _cluster_;
MPRINT(TMSORT):   run;

NOTE: There were 12 observations read from the data set WORK._DESC_.
NOTE: The data set WORK._DESC_ has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):  ;
MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS3.TextCluster_clusters as select a.clus_desc, b.* from EMWS3.TextCluster_clusters b left join _desc_ a on a._cluster_=b._cluster_;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable clus_desc already exists on file EMWS3.TEXTCLUSTER_CLUSTERS.
NOTE: Table EMWS3.TEXTCLUSTER_CLUSTERS created, with 12 rows and 17 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS3.TextCluster_TRAIN as select review , TextCluster_cluster_, * from EMWS3.TextCluster_TRAIN;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: Variable review already exists on file EMWS3.TEXTCLUSTER_TRAIN.
WARNING: Variable TextCluster_cluster_ already exists on file EMWS3.TEXTCLUSTER_TRAIN.
NOTE: Table EMWS3.TEXTCLUSTER_TRAIN created, with 100 rows and 32 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc freq data =_docdata ;
MPRINT(TMC_DOC_SCORE):   tables cluster/out=_tempfreqtable;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._TEMPFREQTABLE has 12 observations and 3 variables.
NOTE: The PROCEDURE FREQ printed page 3.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table EMWS3.TextCluster_clusters as select a.*, b.count as freq, b.percent/100 as percent from EMWS3.TextCluster_clusters (drop= freq percent _rmsstd_) a, _tempfreqtable b where a._cluster_=b.cluster;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table EMWS3.TEXTCLUSTER_CLUSTERS created, with 12 rows and 16 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sort data=_docdata (rename=(cluster=_cluster_));
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._DOCDATA.
NOTE: The data set WORK._DOCDATA has 100 observations and 32 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data _rmscalc;
MPRINT(TMC_DOC_SCORE):   merge _docdata(in=inhere) EMWS3.TextCluster_clusters;
MPRINT(TMC_DOC_SCORE):   array _means(12) _mean1-_mean12;
MPRINT(TMC_DOC_SCORE):   array _svds(12) TextCluster_SVD1 - TextCluster_SVD12;
MPRINT(TMC_DOC_SCORE):   by _cluster_;
MPRINT(TMC_DOC_SCORE):   error=0;
MPRINT(TMC_DOC_SCORE):   do i = 1 to 12;
MPRINT(TMC_DOC_SCORE):   error +( (_svds{i}-_means{i}) * (_svds{i}-_means{i}));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   drop i ;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._DOCDATA.
NOTE: There were 12 observations read from the data set EMWS3.TEXTCLUSTER_CLUSTERS.
NOTE: The data set WORK._RMSCALC has 100 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(TMC_DOC_SCORE):   proc summary data=_rmscalc nway;
MPRINT(TMC_DOC_SCORE):   class _cluster_;
MPRINT(TMC_DOC_SCORE):   var error;
MPRINT(TMC_DOC_SCORE):   output out=_meanerr mean=meane sum=sume;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 100 observations read from the data set WORK._RMSCALC.
NOTE: The data set WORK._MEANERR has 12 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   data _rmsse;
MPRINT(TMC_DOC_SCORE):   set _meanerr;
MPRINT(TMC_DOC_SCORE):   if _freq_ gt 1 then do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=sqrt(sume/((_freq_-1)*(12)));
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   else do;
MPRINT(TMC_DOC_SCORE):   _rmsstd_=0;
MPRINT(TMC_DOC_SCORE):   end;
MPRINT(TMC_DOC_SCORE):   keep _cluster_ _rmsstd_;
MPRINT(TMC_DOC_SCORE):   run;

NOTE: There were 12 observations read from the data set WORK._MEANERR.
NOTE: The data set WORK._RMSSE has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_DOC_SCORE):   proc sql noprint;
MPRINT(TMC_DOC_SCORE):   create table _clusstat2 as select a.*,b.* from EMWS3.TextCluster_clusters a left join _rmsse b on a._cluster_=b._cluster_;
WARNING: Variable _cluster_ already exists on file WORK._CLUSSTAT2.
NOTE: Table WORK._CLUSSTAT2 created, with 12 rows and 17 columns.

MPRINT(TMC_DOC_SCORE):   create table EMWS3.TextCluster_clusters as select * from _clusstat2;
NOTE: Table EMWS3.TEXTCLUSTER_CLUSTERS created, with 12 rows and 17 columns.

MPRINT(TMC_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(TMC_SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   * path of the diagram ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   call symput("emwspath", strip(pathname("EMWS3")));
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename pre "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\PRESCORECODE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file pre;
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmemclus.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmpred.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.tmc_doc_score.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsort.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmsvd.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtext.tmfast.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp;';
MPRINT(SCORE):   run;

NOTE: The file PRE is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:18:08:05,
      Create Time=16Jan2022:18:08:05

NOTE: 13 records were written to the file PRE.
      The minimum record length was 14.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   filename tmpre "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextFilter\PRESCORECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pre MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("tmpre",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file PRE is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=452,
      Last Modified=16Jan2022:18:08:05,
      Create Time=16Jan2022:18:08:05

NOTE: 23 records were written to the file PRE.
      The minimum record length was 1.
      The maximum record length was 118.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename tmpre;
NOTE: Fileref TMPRE has been deassigned.
MPRINT(SCORE):   data _codeclusters;
MPRINT(SCORE):   set EMWS3.TextCluster_clusters (drop=clus_desc);
MPRINT(SCORE):   run;

NOTE: There were 12 observations read from the data set EMWS3.TEXTCLUSTER_CLUSTERS.
NOTE: The data set WORK._CODECLUSTERS has 12 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   libname termloc "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3";
NOTE: Libref TERMLOC refers to the same physical library as EMWS3.
NOTE: Libref TERMLOC was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3
MPRINT(SCORE):   * Now save code, if necessary, for search phrase;
MPRINT(SCORE):   filename _tmscore "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   data _NULL_;
MPRINT(SCORE):   file _tmscore;
MPRINT(SCORE):   length string $200;
MPRINT(SCORE):   string ='%tmc_doc_score(import='||'&em_score_output'||",export=work._newexport,";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string="      termds=termloc.TextFilter_filtterms, configds=termloc.TextCluster_tmconfig,";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string= "      clusters=termloc.TextCluster_clusters, emoutstat=termloc.TextCluster_emoutstat, ";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string = "      _scrout=work.TextFilter_out, svd_u=termloc.TextCluster_svd_u, svd_s=termloc.TextCluster_svd_s, prefix=TextCluster);";
MPRINT(SCORE):   put string;
MPRINT(SCORE):   string='data &em_score_output; set work._newexport;';
MPRINT(SCORE):   put string;
MPRINT(SCORE):   run;

NOTE: The file _TMSCORE is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:18:08:05,
      Create Time=16Jan2022:18:08:05

NOTE: 5 records were written to the file _TMSCORE.
      The minimum record length was 43.
      The maximum record length was 115.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _tmscore;
NOTE: Fileref _TMSCORE has been deassigned.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: TextCluster;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36458      *------------------------------------------------------------*;
36459      * End SCORE: TextCluster;
36460      *------------------------------------------------------------*;

36462      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
36463      * TextCluster: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * TextCluster: Computing metadata for TRAIN data;
36464      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextCluster\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.TextCluster_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.TextCluster_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS3.TextCluster_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.TextCluster_TRAIN out=WORK.M1V27H_Z noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V27H_Z;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V27H_Z(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1V27H_Z;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1V27H_Z;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2GU0GCP NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3G_EJS7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GU0GCP;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.TextFilter_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.TextFilter_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.TextCluster_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextCluster";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextCluster: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "TEXTCLUSTER_CLUSTER_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB10" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB11" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB12" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_PROB9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD10" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD11" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD12" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD2" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD3" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD4" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD5" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD6" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD7" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD8" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TEXTCLUSTER_SVD9" then do;
MPRINT(EM_DIAGRAM):   ROLE = "INPUT";
MPRINT(EM_DIAGRAM):   LEVEL = "INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36922      proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36923      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36924      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

36925      proc sort data = EMWS3.TextCluster_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS3.TextCluster_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36926      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36927      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS3.TEXTCLUSTER_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

36928      data EMWS3.TextCluster_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS3.TextCluster_EMINFO;
36929      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36930      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36931      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 4 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTCLUSTER_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

36932      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
36933      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
36934      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
36935      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
