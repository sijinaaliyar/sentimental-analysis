*------------------------------------------------------------*
User:                hp
Date:                January 16, 2022
Time:                17:54:56
Site:                70166022
Platform:            W32_10HOME
Maintenance Release: 9.04.01M5P091317
EM Version:          14.3
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:54:53" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                January 16, 2022
Time:                17:54:53
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2H05FL2 "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2H05FL2 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:54:53" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                hp";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70166022";
MPRINT(EM_DIAGRAM):   put "Platform:            W32_10HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M5P091317";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.3";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:54:53" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                hp";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
32681      proc freq data=EMWS3.TextTopic_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS3.TextTopic_VariableSet noprint;
32682      table ROLE*LEVEL/out=WORK.TextTopicMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TextTopicMETA;
32683      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTTOPIC_VARIABLESET.
NOTE: The data set WORK.TEXTTOPICMETA has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
32684      proc print data=WORK.TextTopicMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TextTopicMETA label noobs;
32685      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
32686      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
32687      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
32688      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
32689      run;
 
NOTE: There were 1 observations read from the data set WORK.TEXTTOPICMETA.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
32690      title10;
MPRINT(EM_DIAGRAM):   title10;
32691      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'Sentimental_Analysis_SAS';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Resaturant_Review';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.TextFilter_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33036      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33037      * TextTopic: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * TextTopic: Generation of macros and macro variables;
33038      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
33039      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
33040      %let EMEXCEPTIONSTRING=;
33041      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33042      * TRAIN: TextTopic;
MPRINT(EM_DIAGRAM):   * TRAIN: TextTopic;
33043      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33044      %let EM_ACTION = TRAIN;
33045      %let syscc = 0;
33046      %macro main;
33047          %if %upcase(&EM_ACTION) = CREATE %then %do;
33048              filename temp catalog 'sashelp.emtxtext.topic_create.source';
33049              %include temp;
33050              %create;
33051          %end;
33052          %if %upcase(&EM_ACTION) = TRAIN %then %do;
33053              filename temp catalog 'sashelp.emtxtext.topic_train.source';
33054              %include temp;
33055              %train;
33056          %end;
33057         %if %upcase(&EM_ACTION) = SCORE %then %do;
33058              filename temp catalog 'sashelp.emtxtext.topic_score.source';
33059              %include temp;
33060              %score;
33061          %end;
33062          %if %upcase(&EM_ACTION) = REPORT %then %do;
33063              filename temp catalog 'sashelp.emtxtext.topic_report.source';
33064              %include temp;
33065              %report;
33066          %end;
33067      %mend main;
33068
33069      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TOPIC_TRAIN.SOURCE.
33070     +/* ****************************************************************
33071     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33072     + *
33073     + * Name:             topic_train.sas
33074     + * Support:          cox  James A. Cox
33075     + * Product:          SAS Text Miner
33076     + * Language:         Sas
33077     + * Script:
33078     + *
33079     + * Usage:
33080     + *
33081     + * Purpose: Implements the Train action in the Text Topic Node.
33082     + *
33083     + * History:
33084     + * 26May09 Added header [cox]
33085     + *
33086     + * Notes:.
33087     + *
33088     + * Last Modified By:
33089     + * Last Modified On: Tue Oct 25 16:29:22 2016
33090     + *
33091     + * End
33092     + * ************************************************************** */
33093     +%macro train;
33094     +
33095     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
33096     +    %global last_parse_node last_filter_node last_prescore_node server_err
33097     +      parsevar EM_SASMSG /* EMEXCEPTIONSTRING */ systmutil;
33098     +   %let EM_SASMSG=TMINE;
33099     +   %let syscc=0;
33100     +   %let systmutil = ;
33101     +
33102     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
33103     +    %include temp;
33104     +    %tm_get_last_filter(eminfo=&EM_IMPORT_DATA_EMINFO,em_lib=&em_lib,
33105     +                        em_variableset=&em_data_variableset);
33106     +    %if &EMEXCEPTIONSTRING ne %then %goto end_topic_train;
33107     +    %let lastparsenode=&last_parse_node;
33108     +    %let lastfilternode=&last_filter_node;
33109     +    %let lastprescore=&last_prescore_node;
33110     +
33111     +
33112     +    /*populate last tm node dataset so tm_get_last_filter is not called in score*/
33113     +    %em_getname(key=last_tm_nodes, type=data);
33114     +    data &em_user_last_tm_nodes;
33115     +        set &EM_IMPORT_DATA_EMINFO;
33116     +    run;
33117     +
33118     +    * include helper macros ;
33119     +    filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
33120     +    %include temp;
33121     +
33122     +    filename temp catalog 'sashelp.emtxtext.tmt_topify.sas';
33123     +    %include temp;
33124     +
33125     +    filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
33126     +    %include temp;
33127     +
33128     +    filename temp catalog 'sashelp.emtxtext.tmt_remove_dups.source';
33129     +    %include temp;
33130     +
33131     +   /* Tell system that this is not data step score code */
33132     +
33133     +%let EM_PUBLISHCODE = PUBLISH;
33134     +%let EM_SCORECODEFORMAT = DATASTEP;
33135     +
33136     +    * get input data sets ;
33137     +
33138     +    %em_getname(key=terms,         type=data);
33139     +    %em_getname(key=tmout,         type=data);
33140     +    %em_getname(key=weightedterms, type=data);
33141     +    %em_getname(key=weightedtmout, type=data);
33142     +
33143     +    %em_getname(key=parseVarData, type=data);
33144     +
33145     +    /* Make sure that at least 15 documents are provided */
33146     +   /* Check to make sure that minimum number of documents occur to calculate
33147     +      topics */
33148     +/* This check is done in tmt_multi_terms and is not relevant for times when they are running with user topics */
33149     +/*
33150     +   proc sql noprint; select count(distinct _document_) into :nobs
33151     +      from &em_lib..&lastfilternode._tmout;
33152     +      quit;
33153     +   %if &nobs < 15 %then %do;
33154     +      %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_DATA_SMALL,&nobs;
33155     +      %goto end_topic_train;
33156     +      %end;
33157     +*/
33158     +
33159     +      %global ntopics;
33160     +
33161     +    %em_getname(key=initTopics, type=data);
33162     +
33163     +   /* Note: for the following macro variables, anything that begins with tmt_
33164     +   refers to properties on the TM node, anything that begins with em_ are
33165     +   tables that need to be em_registered, and anything that beings tmm_ are
33166     +   macro variables that the user may or may not set.  If they are not set, then
33167     +   they should default to the value given */
33168     +
33169     +   %em_checkmacro(name=tmm_doccutoff,       global=Y, value=.001);
33170     +      %if &tmm_doccutoff<0 or &tmm_doccutoff>1 %then %let tmm_doccutoff=0.001;
33171     +   %em_checkmacro(name=tmm_termcutoff,       global=Y, value=.001);
33172     +      %if &tmm_termcutoff<0 or &tmm_termcutoff>1
33173     +          %then %let tmm_termcutoff=0.001;
33174     +   %em_checkmacro(name=tmm_norm_pivot,      global=Y, value=.7);
33175     +      %if &tmm_norm_pivot<0 or &tmm_norm_pivot>1 %then %let tmm_norm_pivot=0.7;
33176     +   %em_checkmacro(name=tmm_term_cutoff,      global=Y, value=);
33177     +
33178     +   /* The default value of 35 degrees means that a topic is excluded if at least 2/3 of its variance
33179     +      (i.e. r-squared) is accounted for by the other topic (i.e. sqrt(2/3) ~ arccos(35) )
33180     +    */
33181     +   %em_checkmacro(name=tmm_max_topic_angle, global=Y, value=35);
33182     +   %em_checkmacro(name=tmm_min_docs,      global=Y, value=10);
33183     +  /* Any terms less than this pct. of maximum are excluded */
33184     +   %em_checkmacro(name=tmm_term_cutoff_pct, global=Y, value=.1);
33185     +
33186     +
33187     +
33188     +   %em_getname(key=topics,           type=data);
33189     +   %em_getname(key=termtopics,       type=data);
33190     +   %em_getname(key=docDs,            type=data);
33191     +   %em_getname(key=tmout_normalized, type=data);
33192     +   %em_getname(key=term_sums,        type=data);
33193     +   %em_getname(key=tmout_parent,     type=data);
33194     +
33195     +   %let tmt_num_single=&em_property_topTermCnt;
33196     +   %let tmt_num_multi=&em_property_autoTopicCnt;
33197     +
33198     +   %let em_topics     = &em_user_topics;
33199     +   %let em_termtopics = &em_user_termtopics;
33200     +   %let em_doc_ds     = &em_user_docDs;
33201     +   %let em_norm_out   = &em_user_tmout_normalized;
33202     +   %let em_term_sums  = &em_user_term_sums;
33203     +   %let em_term_ds=&em_user_weightedterms;
33204     +
33205     +   /* Check if initTopics data set exists */
33206     +   %em_getname(key=initTopics, type=data);
33207     +   %em_getname(key=topic_Cutoffs, type=data);
33208     +   %let tmt_init_topics=&em_user_initTopics;
33209     +
33210     +
33211     +   %if ^%sysfunc(exist(&em_user_initTopics)) %then %do;
33212     +   proc sql noprint;
33213     +   create table &em_user_topic_Cutoffs
33214     +      (_name char(100)
33215     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))",
33216     +       _termcutoff decimal
33217     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))",
33218     +       _doccutoff decimal
33219     +          label="%sysfunc(sasmsg(sashelp.tmine, rpt_text_docCutoff_vlabel, NOQUOTE))"
33220     +       );
33221     +   create table &em_user_initTopics
33222     +      (_topic_ char(100)
33223     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_vlabel, NOQUOTE))",
33224     +       _term_ char(80)
33225     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_term, NOQUOTE))",
33226     +       _role_ char(32)
33227     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_role, NOQUOTE))",
33228     +       _weight_ decimal
33229     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_intopic_weight, NOQUOTE))"
33230     +       );
33231     +   quit;
33232     +   %end;
33233     +
33234     +   %else %if ^%sysfunc(exist(&em_user_topic_Cutoffs)) %then %do;
33235     +   proc sql noprint;
33236     +   create table &em_user_topic_Cutoffs
33237     +      (_name char(100)
33238     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))",
33239     +       _termcutoff decimal
33240     +          label="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))",
33241     +       _doccutoff decimal
33242     +          label="%sysfunc(sasmsg(sashelp.tmine, rpt_text_docCutoff_vlabel, NOQUOTE))"
33243     +       );
33244     +   quit;
33245     +   %end;
33246     +
33247     +   /*--------------- Following is training code -------------------- */
33248     +   /* First thing to do is create a weighted out data set if one has not already
33249     +     been created in Text Filter node.  Then make sure you have the out data set
33250     +     as the version that has children rolled up to parents and dropped terms
33251     +     removed.
33252     +     Also, make sure you use a term ds that does not include children, the where clause below accomplishes that.
33253     +   */
33254     +   %let syscc=0;
33255     +
33256     +    %let isweight = 0;
33257     +    %let dsid=%sysfunc(open(%str(&em_lib..&lastfilternode._terms)));
33258     +    %if &dsid gt 0 %then %do;
33259     +        %let isweight =%sysfunc(varnum(&dsid, weight));
33260     +        %let rc=%sysfunc(close(&dsid));
33261     +    %end;
33262     +
33263     +      /* get target variable info */
33264     +      %let targetvar = ;
33265     +      data _null_;
33266     +      set &em_data_variableset(where=(ROLE='TARGET' and USE in('Y' 'D')
33267     +                                      and LEVEL ne 'INTERVAL'));
33268     +      if _N_=1 then call symput('targetvar', strip(NAME));
33269     +      run;
33270     +      data _null_;
33271     +         cellwgt="LOG";
33272     +         set &em_lib..&lastfilternode._tmconfig;
33273     +         call symput('cellwgt',cellwgt);
33274     +         run;
33275     +
33276     +    /* Output weighted, parent-only term and out data set. */
33277     +    proc tmutil data=&em_lib..&lastfilternode._tmout key=&em_lib..&lastfilternode._terms
33278     +        %if &targetvar ne %then doc=&EM_IMPORT_DATA target=&targetvar ;;
33279     +        control init memloc='tmutil_memloc';
33280     +    proc tmutil;
33281     +        control release memloc='tmutil_memloc';
33282     +
33283     +
33284     +    %if "&isweight" eq "0" %then %do;
33285     +       weight termwgt=%if &targetvar= %then entropy; %else MI; cellwgt=&cellwgt;
33286     +       %if &lastfilternode = &lastparsenode %then select reducef=4;;
33287     +       output keeponly keyformat=tmscore out=&EM_USER_weightedtmout key=&em_user_terms;
33288     +       run;
33289     +       %if "%ktrim(&systmutil)" ne "" %then %goto pre_end_topic_train;
33290     +       proc sql noprint;
33291     +           %if ^%sysfunc(exist(&em_user_weightedTerms,'view')) %then drop view &em_user_weightedterms;;
33292     +           create table &em_user_weightedterms as
33293     +              select a.weight, b.*
33294     +              from &em_user_terms as a, &em_lib..&lastfilternode._terms as b
33295     +              where a.key=b.key and a.parent = . and b._ispar ne '.'
33296     +              order by key;
33297     +           quit;
33298     +       %end;
33299     +    %else %do;
33300     +       /* Apply weights on current term table */
33301     +       /******* look up weight from tmconfig table! */
33302     +       weight cellwgt=&cellwgt
33303     +          in_weight=&em_lib..&lastfilternode._terms_data(keep=key weight);
33304     +        output keeponly keyformat=tmscore out=&EM_USER_weightedtmout;
33305     +       run;
33306     +       %if "%ktrim(&systmutil)" ne "" %then %goto pre_end_topic_train;
33307     +       proc sql noprint;
33308     +       %if ^%sysfunc(exist(&em_user_weightedTerms,'view')) %then drop view &em_user_weightedterms;;
33309     +       create table &em_user_weightedterms as
33310     +          select * from &em_lib..&lastfilternode._terms where _ispar ne '.'
33311     +          order by key;
33312     +       quit;
33313     +       %end;
33314     +
33315     +    %if %eval(&syscc)>4 %then %do;
33316     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33317     +       %goto end_topic_train;
33318     +    %end;
33319     +
33320     +   /* Normalize the weighted out data set (containing only kept non-child terms)
33321     +      so that documents have a length of approximately 1 */
33322     +       %if &tmm_norm_pivot ne 0 %then %do;
33323     +           %row_pivot_normalize(transds=&em_user_weightedtmout,
33324     +                     outtransds=&em_norm_out,
33325     +                     col_sumds=&em_term_sums,
33326     +                     row=_document_,col=_termnum_,entry=_count_,
33327     +                     pivot=&tmm_norm_pivot,
33328     +                     tmt_config=&em_lib..&lastfilternode._tmconfig,
33329     +                     tmt_train=1, prefix=&EM_NODEID.);
33330     +          %end;
33331     +       %else %do;
33332     +          data &em_norm_out; set &em_user_weightedtmout; run;
33333     +          %end;
33334     +
33335     +
33336     +    %if %eval(&syscc)>4 %then %do;
33337     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33338     +       %goto end_topic_train;
33339     +    %end;
33340     +
33341     +   %let tmprefix=&EM_NODEID._;
33342     +   %let syscc=0;
33343     +   %let curdocDs=;
33344     +
33345     +   /* If there is an em_init_topics table, call %tmt_topify and _tmt_doc_score,
33346     +                     if not create a completely blank em_term_ds and em_topics
33347     +    */
33348     +
33349     +   %tmt_topify(initds=&tmt_init_topics,termds=&em_term_ds,topicds=&em_topics,
33350     +               termtopicds=&em_termtopics,topic_cutoff_ds=&em_user_topic_Cutoffs,
33351     +               doccutoff=&tmm_doccutoff, termcutoff=&tmm_termcutoff);
33352     +%if &tm_debug =0 %then %do;
33353     +proc sql;
33354     +   drop table _tmptop;
33355     +quit;
33356     +%end;
33357     +   %if %eval(&syscc)>4 %then %do;
33358     +       %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33359     +      %goto end_topic_train;
33360     +   %end;
33361     +
33362     +   proc sql noprint; select count(*) into :ntopics from &em_topics; quit;
33363     +
33364     +   *check for eliminated init topics;
33365     +   proc sql noprint; select count(distinct _topic_) into :user_ntopics from &tmt_init_topics; quit;
33366     +   %if(%eval(&user_ntopics-&ntopics)>0) %then %do;
33367     +        %put &em_codebar;
33368     +         %let errormsg = %sysfunc(sasmsg(sashelp.tmine,EMTOOL.USERTOPIC_NOTE, NOQUOTE,%eval(&user_ntopics-&ntopics), %eval(&user_ntopics-0)));
33369     +        %put &errormsg;
33370     +         %put &em_codebar;
33371     +      %let user_ntopics=&ntopics;
33372     +   %end;
33373     +
33374     +   %tmt_doc_score(termtopds=&em_termtopics,outds=&em_norm_out,
33375     +                  topicds=&em_topics,docds=&em_import_data,newdocds=_userdocs,
33376     +                  termsumds=&em_term_sums, prefix=&tmprefix, pivot=&tmm_norm_pivot);
33377     +    %if %eval(&syscc)>4 %then %do;
33378     +        %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33379     +       %goto end_topic_train;
33380     +    %end;
33381     +
33382     +   %let curdocDs=_userdocs;
33383     +
33384     +   /* be sure docscore dataset is populated if only init docs */
33385     +   data &em_doc_ds; set &curdocDs; run;
33386     +
33387     +   /* If they indicate to create any single term topics, run next three macros,
33388     +      to create single word topics, then score the documents on just those topics,
33389     +      then remove duplicates (based on document scores).  Finally, append new topics and
33390     +      topicterms to respective data sets.  */
33391     +
33392     +    %if "&em_property_topTermCnt" ne "0" %then %do;
33393     +       filename temp catalog 'sashelp.emtxtext.tmt_single_terms.source';
33394     +       %include temp;
33395     +
33396     +       %let syscc=0;
33397     +
33398     +       %tmt_single_terms(termds=&em_term_ds,num_topics=%eval(&tmt_num_single+&user_ntopics),
33399     +                        termtopicds=singtermtop, topicds=singtopics,
33400     +                        startnum=%eval(&ntopics+1),
33401     +                        doccutoff=.001);
33402     +
33403     +        /*get actual number of topics produced*/
33404     +        proc sql noprint; select count(*) into :tmt_act_single from singtopics; quit;
33405     +        %let tmt_act_single=%ktrim(&tmt_act_single);
33406     +
33407     +       %tmt_doc_score(termtopds=singtermtop, docds=&curdocDs,
33408     +                      outds=&em_norm_out, topicds=singtopics, newdocds=_singuserdocs,
33409     +                      termsumds=&em_term_sums, prefix=&tmprefix,
33410     +                      pivot=&tmm_norm_pivot);
33411     +
33412     +       %let _ndel=%eval(&tmt_act_single-&tmt_num_single);
33413     +       %if &_ndel>0 %then %do;
33414     +
33415     +          %tmt_remove_dups(in=_singuserdocs,n=%eval(&user_ntopics+&tmt_act_single),
33416     +                           m=&ntopics,m1=%eval(&ntopics+1),out=&em_doc_ds,
33417     +                           topicds=singtopics, termtopicds=singtermtop,
33418     +                           prefix=&tmprefix.raw,ndel=&_ndel);
33419     +          %let ntopics=%eval(&ntopics+&tmt_act_single-&_ndel);
33420     +          %end;
33421     +           %else %do;
33422     +              %let ntopics=%eval(&ntopics+&tmt_act_single);
33423     +              data &em_doc_ds; set _singuserdocs;
33424     +              %end;
33425     +
33426     +       data &em_topics; set &em_topics singtopics; run;
33427     +       data &em_termtopics; set &em_termtopics singtermtop; run;
33428     +%if &tm_debug =0 %then %do;
33429     +proc sql;
33430     +   drop table singtopics;
33431     +   drop table singtermtop;
33432     +   drop view _tm_termtmpview;
33433     +   drop table _singuserdocs;
33434     +   drop table _tmpdocs;
33435     +   drop table _termview;
33436     +   drop table _termtopics;
33437     +   drop table top_tmp_out;
33438     +   drop table _weighted_tmout;
33439     +   drop table _termsumds;
33440     +quit;
33441     +%end;
33442     +       %if %eval(&syscc)>4 %then %do;
33443     +          %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33444     +          %goto end_topic_train;
33445     +          %end;
33446     +   %end; /*  %if "&em_property_topTermCnt" ne "0" */
33447     +
33448     +
33449     +
33450     +   /* If they indicate to create any multi-term topics, run next three macros */
33451     +   /* The value for rotation= depends on the autoTopic property.  If Yes, then
33452     +      rotation=promax should be used, otherwise rotation=varimax should be used. */
33453     +
33454     +   %if "&em_property_autoTopicCnt" ne "0" %then %do;
33455     +      filename temp catalog 'sashelp.emtxtext.tmt_multi_terms.source';
33456     +      %include temp;
33457     +      proc sql noprint;
33458     +         select count(*) into: _numrepterms
33459     +         from &em_term_ds;
33460     +      quit;
33461     +
33462     +      %if &_numrepterms < 15 %then %do;
33463     +         %let EMEXCEPTIONSTRING = EMTOOL.TOPICTOOFEWTERMS,&_numrepterms;
33464     +         %goto end_topic_train;
33465     +      %end;
33466     +
33467     +        %let syscc=0;
33468     +
33469     +%let startnum=%eval(&ntopics+1);
33470     +      %em_getname(key=out_u, type=data);
33471     +       %tmt_multi_terms(outds=&em_norm_out,termds=&em_term_ds,
33472     +                        num_topics=%eval(&tmt_num_multi+&user_ntopics),termtopicds=mult_termtop,
33473     +                        rotation=
33474     +                            %if &em_property_autoTopic=Y %then promax;
33475     +                        %else varimax;
33476     +                        ,
33477     +                        startnum=&startnum, topicds=mult_topics,
33478     +                        termcutoff=&tmm_term_cutoff,
33479     +                        doccutoff=&tmm_doccutoff*2,
33480     +                        tmptable=&em_user_out_u);
33481     +       %if &EMEXCEPTIONSTRING ne  %then %goto end_topic_train;
33482     +   /* %end; */
33483     +
33484     +        /*get actual number of topics produced*/
33485     +        proc sql noprint; select count(*) into :tmt_act_multi from mult_topics; quit;
33486     +        %let tmt_act_multi=%ktrim(&tmt_act_multi);
33487     +
33488     +
33489     +       %tmt_doc_score(termtopds=mult_termtop, docds=&curdocDs,
33490     +                      outds=&em_norm_out, topicds=mult_topics, newdocds=multdocs,
33491     +                      termsumds=&em_term_sums, prefix=&tmprefix,
33492     +                      pivot=&tmm_norm_pivot,norm=);
33493     +
33494     +       /*    proc corr data=multdocs; run; */
33495     +
33496     +
33497     +%let endnum=%eval(&startnum + &tmt_act_multi -1);
33498     +%let cnt=%eval(&endnum-&startnum+1);
33499     +
33500     +           /* Set document cutoffs based on average + standard deviation */
33501     +           data _doc_tmp_sums (keep=_doccutoff _mean_ _std_ _ssi_ _ndoc_ _topicid);
33502     +           array vals{&cnt} &tmprefix.raw&startnum -&tmprefix.raw&endnum;
33503     +           array sums{&cnt} _temporary_ (&cnt*0);
33504     +           array ss{&cnt} _temporary_ (&cnt*0);
33505     +           _ndoc_=0;
33506     +           do until(eof);
33507     +              set multdocs end=eof;
33508     +              _ndoc_=_ndoc_+1;
33509     +              do i=1 to &cnt;
33510     +                 sums{i}=sums{i}+abs(vals{i});
33511     +                 ss{i}=ss{i}+abs(vals{i})**2;
33512     +                 end;
33513     +              end;
33514     +           do i=1 to &cnt;
33515     +              _mean_=sums{i}/_ndoc_;
33516     +              _std_=sqrt((ss{i} - _ndoc_*_mean_*_mean_)/(_ndoc_-1));
33517     +              _doccutoff=round(_mean_+_std_,.001);
33518     +              _topicid=i+&startnum-1;
33519     +              _ssi_=ss{i};
33520     +              output;
33521     +              end;
33522     +
33523     +           proc sql noprint;
33524     +               create table mult_topics as
33525     +                  select a._topicid, _name, _cat, /*, _apply */ _numterms, _numdocs,
33526     +                    _termCutoff, b._doccutoff
33527     +                  from mult_topics as a, _doc_tmp_sums as b
33528     +                  where a._topicid=b._topicid;
33529     +           /* proc print data=mult_topics; run; */
33530     +
33531     +       /* Now rescore based on new cutoffs */
33532     +       %tmt_doc_score(termtopds=mult_termtop, docds=&curdocDs,
33533     +                      outds=&em_norm_out, topicds=mult_topics, newdocds=multdocs,
33534     +                      termsumds=&em_term_sums, prefix=&tmprefix,
33535     +                      pivot=&tmm_norm_pivot);
33536     +       %let _ndel=%eval(&tmt_act_multi-&tmt_num_multi);
33537     +
33538     +       %if &_ndel > 0 %then %do;
33539     +          %tmt_remove_dups(in=multdocs,n=%eval(&ntopics+&tmt_act_multi),
33540     +                           m=&user_ntopics, m1=%eval(&ntopics+1),
33541     +                           prefix=&tmprefix.raw,out=&em_doc_ds,
33542     +                           ndel=&_ndel,
33543     +                           topicds=mult_topics, termtopicds=mult_termtop);
33544     +          %let ntopics=%eval(&ntopics+&tmt_act_multi-&_ndel);
33545     +          %end;
33546     +           %else %let ntopics=%eval(&ntopics+&tmt_act_multi);;
33547     +
33548     +      %let curdocDs=&em_doc_ds; /* pass output of remove_dup_tops */
33549     +      data &em_topics; set &em_topics mult_topics; run;
33550     +      data &em_termtopics; set &em_termtopics mult_termtop; run;
33551     +%if &tm_debug =0 %then %do;
33552     +proc sql;
33553     +   drop table out_u;
33554     +   drop table _factors;
33555     +   drop table _factrot;
33556     +   drop table _termmrg;
33557     +   drop table mult_termtop;
33558     +   drop view _tmp_top_weights;
33559     +   drop table _termtmpsums;
33560     +   drop table mult_topics;
33561     +   drop table mult_termtop;
33562     +   drop table multdocs;
33563     +   drop table _doc_tmp_sums;
33564     +   drop view _doc_tmp_sums;
33565     +quit;
33566     +%end;
33567     +      %if %eval(&syscc)>4 %then %do;
33568     +         %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33569     +         %goto end_topic_train;
33570     +         %end;
33571     +   %end;
33572     +proc sort data=&em_topics; by _topicid; run;
33573     +data &em_topics;
33574     +   length _displayCat $16;
33575     +   set &em_topics;
33576     +   label _topicid    = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicid_vlabel, NOQUOTE))";
33577     +   label _name        = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topic_vlabel, NOQUOTE))";
33578     +/*   label _cat         = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";*/
33579     +   * label _apply       = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_apply_vlabel, NOQUOTE))";
33580     +   label _doccutoff   = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_docCutoff_vlabel, NOQUOTE))";
33581     +   label _termcutoff  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_termCutoff_vlabel, NOQUOTE))";
33582     +   label _numterms    = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_numterms_vlabel, NOQUOTE))";
33583     +   label _numdocs     = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_numdocs_vlabel, NOQUOTE))";
33584     +   label _displayCat  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";
33585     +
33586     +   select(ksubstr(_cat,1,1));
33587     +      when('S') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicsingle_value, NOQUOTE))";
33588     +      when('M') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmulti_value, NOQUOTE))";
33589     +      when('U') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
33590     +      otherwise;
33591     +      end;
33592     + run;
33593     +   quit;
33594     +
33595     +   * Set some of the data specific issues for TM_CLIENT_SETTINGS;
33596     +   %let docs_interactive = &curDocDs;
33597     +   %let terms_interactive = &em_term_ds;
33598     +
33599     +   %let docs_view_variables = ;
33600     +   * save out the metadata on the docs table ;
33601     +   proc contents data=&docs_interactive out=work._docs_contents noprint;
33602     +   run;
33603     +
33604     +
33605     +   * get a list of the variables ;
33606     +   %let docs_nobs = ;
33607     +   proc sql noprint;
33608     +      select name into :docs_view_variables separated by ' '
33609     +      from work._docs_contents
33610     +      where name not like 'TextTopic%' and klowcase(name) ne "_document_" and
33611     +         kupcase(name) ne "%kupcase(%trim(%left(&parseVar)))";
33612     +
33613     +      * get a count of the variables ;
33614     +      select count(*) into :docs_nobs
33615     +      from &docs_interactive;
33616     +
33617     +      * delete our temp table ;
33618     +      drop table work._docs_contents;
33619     +
33620     +      * get a count of the variables ;
33621     +      select count(*) into :terms_nobs
33622     +      from &em_term_ds;
33623     +   quit;
33624     +
33625     +   * add the parseVar back in as the first field ;
33626     +   %let docs_view_variables = topic_weight %trim(%left(&parseVar)) &docs_view_variables;
33627     +
33628     +   %em_getname(key=tm_client_settings);
33629     +   proc sort data=&em_user_tm_client_settings;
33630     +      by VIEWER KEY;
33631     +   run;
33632     +
33633     +  %let len = %length(&docs_view_variables);
33634     +   /* %put !!!!!!!!!!!! &len  &docs_view_variables; */
33635     +
33636     +   data work.tm_client_settings;
33637     +       length viewer $80 key $80 value $32000;
33638     +       * document table ;
33639     +       viewer = "DOCUMENTS"; key = "nobs";          value = "&docs_nobs";           output;
33640     +       viewer = "DOCUMENTS"; key = "viewvariables"; value = "&docs_view_variables"; output;
33641     +         viewer = "DOCUMENTS"; key = "parseVariable"; value="&parsevar"; output;
33642     +       * terms table ;
33643     +       viewer = "TERMS";     key = "nobs";          value = "&terms_nobs";          output;
33644     +
33645     +       * augTopics table ;
33646     +       viewer = "TOPICS";    key = "nobs";          value = "&ntopics";         output;
33647     +     run;
33648     +    proc sort data=work.tm_client_settings;
33649     +       by VIEWER KEY;
33650     +    run;
33651     +    data &em_user_tm_client_settings;
33652     +       merge &em_user_tm_client_settings work.tm_client_settings;
33653     +       by VIEWER KEY;
33654     +    run;
33655     +    proc datasets nolist nodetails lib=work;
33656     +       delete tm_client_settings;
33657     +    run;
33658     +    quit;
33659     +   * add the info to EMINFO to forward on to other nodes ;
33660     +   data &EM_DATA_EMINFO;
33661     +      length TARGET KEY $32 DATA $43;
33662     +         target = " ";
33663     +      key="LastTMNode";       data="&EM_NODEID";                    output;
33664     +      key="LastTMNodeType";       data="TextTopic";                    output;
33665     +      key="LastTopic";    data="&EM_NODEID";                    output;
33666     +      key="tm_topic_dataset"; data="&EM_PROPERTY_tm_topic_dataset"; output;
33667     +         key="PRESCORECODE"; data="&EM_NODEID"; output;
33668     +    run;
33669     +
33670     +
33671     +   /* At this point, training is complete.  The three tables have been created
33672     +      that are used in the Topic view property: &em_topics for the topic table,
33673     +      a join of &em_term_ds and &em_termtopics for the terms table, and &em_doc_ds
33674     +      for the documents table.  However, the training, etc. table to be exported
33675     +      from the node will be obtained from the scoring code, as documented below.
33676     +   */
33677     +
33678     +
33679     +  %pre_end_topic_train:
33680     +  %if "%ktrim(&systmutil)" ne "" %then %do;
33681     +        %let EMEXCEPTIONSTRING = EMTOOL.TMUTIL, &systmutil;
33682     +        %put emexceptionstring= "&EMEXCEPTIONSTRING";
33683     +        %let syscc=0;
33684     +         %end;
33685     +
33686     +  %end_topic_train:
33687     +  filename temp;
33688     +%if &tm_debug =0 %then %do;
33689     +proc sql;
33690     +   drop table _userdocs;
33691     +quit;
33692     +%end;
33693     +
33694     +
33695     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
33696     +/* ****************************************************************
33697     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33698     + *
33699     + * Name:             tm_get_last_filter.sas
33700     + * Product:          SAS Text Miner
33701     + * Language:         Sas
33702     + * Script:
33703     + *
33704     + * Usage:
33705     + *
33706     + * Purpose:  macro to get the last filter node and the last parse node in the
33707     + *   diagram that corresponds to the current parse variable.  If there is no filter
33708     + *   node, the filter node is set to the last parse node.
33709     + *
33710     + *
33711     + *
33712     + * History:
33713     + * 14Aug09 Initial Coding
33714     + *
33715     + * Notes:
33716     + *    Returns an error in the following cases:
33717     + *      1. There is no preceding parse node.
33718     + *      2. There is no parse node with the current parse variable.
33719     + *
33720     + * Last Modified By:
33721     + * Last Modified On: Wed Sep 23 15:35:04 2009
33722     + *
33723     + * End
33724     + * ************************************************************** */
33725     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
33726     +   %let last_parse_node=;
33727     +   %let last_filter_node=;
33728     +   %let last_prescore_node=;
33729     +   %let server_err=;
33730     +   %let EMEXCEPTIONSTRING=;
33731     +   %let syscc=0;
33732     +
33733     +    /* verify that setinit for SAS Text Miner is currently active */
33734     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
33735     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
33736     +        %goto end_macro;
33737     +        %end;
33738     +
33739     +
33740     +    * find last filter or text parse node if no filter node. ;
33741     +   %if %sysfunc(exist(&eminfo)) %then %do;
33742     +      proc sql noprint;
33743     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
33744     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
33745     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
33746     +      quit;
33747     +
33748     +   %end;
33749     +
33750     +   %if &last_parse_node= %then %do;
33751     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
33752     +      %goto end_macro;
33753     +      %end;
33754     +
33755     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
33756     +   %else %let last_filter_node = %ktrim(&last_filter_node);
33757     +   %let last_parse_node = %ktrim(&last_parse_node);
33758     +
33759     +   * Check to make sure parse variable is present and still exists;
33760     +   %let parsevar = ;
33761     +   proc sql noprint;
33762     +    select parsevar into :parsevar
33763     +    from &em_lib..&last_filter_node._tmconfig;
33764     +    quit;
33765     +
33766     +    *check for dropped parsevar on input dataset;
33767     +       %let parsevarOK= ;
33768     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
33769     +       data _null_;
33770     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
33771     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
33772     +         run;
33773     +       %if(&parsevarOK eq ) %then %do;
33774     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
33775     +          %goto end_macro;
33776     +          %end;
33777     +%end_macro:
33778     +
33779     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS3.TextFilter_EMINFO where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS3.TextFilter_EMINFO where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS3.TextFilter_EMINFO where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS3.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS3.TextTopic_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTTOPIC_VARIABLESET.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS3.TextTopic_last_tm_nodes;
MPRINT(TRAIN):   set EMWS3.TextFilter_EMINFO;
MPRINT(TRAIN):   run;
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER_EMINFO.
NOTE: The data set EMWS3.TEXTTOPIC_LAST_TM_NODES has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   * include helper macros ;
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.ROW_PIVOT_NORMALIZE.SOURCE.
33780     +/* ****************************************************************
33781     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
33782     + *
33783     + * Name:             row_pivot_normalize_docs.sas
33784     + * Product:          SAS/GRAPH
33785     + * Language:         Sas
33786     + * Script:
33787     + *
33788     + * Usage:
33789     + *
33790     + * Purpose:          To output a new out table that is normalized so that each
33791     + *  row is normalized so "on average" the sums of squares of the _count_ is 1.
33792     + *
33793     + * History:
33794     + * 05May09 Initial Coding
33795     + *
33796     + * Notes:
33797     + *
33798     + * Last Modified By:
33799     + * Last Modified On: Thu Jan 06 17:08:35 2011
33800     + *
33801     + * End
33802     + * ************************************************************** */
33803     +%macro row_pivot_normalize(transds=,outtransds=,row=,col=,entry=,
33804     +                           col_sumds=, pivot=.5, tmt_config= , tmt_train=1, prefix=);
33806     +   /* Calculate sum of the squared entries for each row */
33807     +proc summary nway data=&transds;
33808     +   class &row;
33809     +   var &entry;
33810     +   output out=_sqrowvals uss=;
33811     +   run;
33813     +   /* Put into &meandiv what the average euclidean length is across rows */
33816     +%if &tmt_train = 1  %then %do;
33817     +   proc sql noprint;
33818     +      select mean(sqrt(&entry)) into :meaneuclen
33819     +      from _sqrowvals;
33820     +   quit;
33821     +   %if &tmt_config ne %then %do;
33822     +      *populate the config file with the mean value;
33823     +      data &tmt_config;
33824     +         set &tmt_config;
33825     +         &prefix._meaneuclen= symget('meaneuclen');
33826     +      run;
33827     +   %end;
33828     +    data _sqrowvals;
33829     +      set _sqrowvals;
33830     +      meaneuclen=symget('meaneuclen');
33831     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
33832     +      drop meaneuclen;
33833     +   run;
33836     +%end;
33837     +%else %do;
33838     +      * grab the mean value from the config file  and put into meaneuclien;
33839     +   data _null_;
33840     +      set &tmt_config;
33841     +      call symput('meaneuclen',&prefix._meaneuclen);
33842     +   run;
33843     +    data _sqrowvals;
33844     +      set _sqrowvals;
33845     +      meaneuclen=symget('meaneuclen');
33846     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
33847     +   run;
33849     +%end;
33854     +proc sql noprint;
33855     +   create table &outtransds as
33856     +      select a.&row,a.&col,a.&entry / divisor as &entry
33857     +      from &transds as a,_sqrowvals as b
33858     +      where a.&row=b.&row;
33859     +   drop table _sqrowvals;
33860     +         quit;
33861     +%if &col_sumds ne %then %do;
33862     +   proc summary nway data=&outtransds;
33863     +   class &col;
33864     +   var &entry;
33865     +   output out=&col_sumds mean=;
33866     +   run;
33867     +%end;
33868     +%mend row_pivot_normalize;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_topify.sas';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMT_TOPIFY.SOURCE.
33869     +/* ****************************************************************
33870     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
33871     + *
33872     + * Name:             tmt_topify.sas
33873     + * Product:          SAS Text Miner
33874     + * Language:         Sas
33875     + * Script:
33876     + *
33877     + * Usage: %tmt_topify(initds=,termds=,topicds=,termtopicds=,<doccutoff=>);
33878     + *
33879     + * Purpose:  To convert a user-created table containing one row for
33880     + *      each term that contains a weight for each topic into a
33881     + *      normalized form with two tables :
33882     + *      a topic table with one row per topic, and a termtopics table
33883     + *      that has one row per term per topic.
33884     + *
33885     + * Parameters:
33886     + *   initds= The name of a table that contains one line per term per
33887     + * topic.  It must include the variables _topic_ (unique name of
33888     + * topic), _term_ (term text string), _role_ (part of speech or entity
33889     + * type).
33890     + *
33891     + *   termds= The name of a table that contains the terms matched up
33892     + * with their term ids, or key.  This table must include the variables
33893     + * key (the unique term id), term (term text string), role (part of
33894     + * speech or entity type), and parent (term id of parent if term
33895     + * represents a synonym of another term).
33896     + *
33897     + *   topicds= a table name that on output will contain one row per
33898     + * topic.  It contains the variables _topicid(unique identifier of
33899     + * topic, numbered sequentially beginning with 1), _name (unique name of
33900     + * topic), _cat (always set to "User" to indicate user topic), _apply
33901     + * (always set to Y so that topic will create a new variable on scored
33902     + * data representing topic), _doccutoff (set to input _docCutoff
33903     + * parameter), _termcutoff (set to zero), _numterms (set to missing to
33904     + * be calculated later), and _numdocs (set to missing to be calculated
33905     + * later)
33906     + *
33907     + *   topictermds= a table name that on output will contain one row for
33908     + * each term with a weight on each topic.  The variables on this table
33909     + * will be _topicid (unique id for each _topic as identified on
33910     + * topicds table), _termid (term ids as identified from the terms
33911     + * table for the term string and role string), and _weight (the weight
33912     + * to be applied to that term from the initds).
33913     + *
33914     + * History:
33915     + * 06May09 Initial Coding
33916     + *
33917     + * Notes:
33918     + *   The way that the term and role text strings are mapped into term
33919     + * ids via the terms data set obeys the following rules:
33920     + *
33921     + * 0. A normalized text string is created that is a downcased version
33922     + * of the term on the init_ds (since all terms are downcased on the
33923     + * terms table).  A normalized role is created in which roles
33924     + * representing parf of speech are set to have first letter
33925     + * uppercased, and the rest lowercased, again to match the term ds casing.
33926     +
33927     + * 1. If a given row on the initds contains both a non-blank term
33928     + * and role then a row is generated on termtopicds for each
33929     + * term on the term ds with that normalized text string and either
33930     + * that normalized role, or a blank role.
33931     + *
33932     + * 2. Any row on initds that has a blank role and a blank term is
33933     + * ignored.
33934     + *
33935     + * 3. Otherwise, any row that has a blank role matches terms in termds
33936     + * with any role.
33937     + *
33938     + * 4. Otherwise, any row with a blank term matches any terms in termds
33939     + * with the given role.
33940     + *
33941     + * Last Modified By:
33942     + * Last Modified On: Tue May 29 14:19:57 2012
33943     + *
33944     + * End
33945     + * ************************************************************** */
33946     +%macro tmt_topify(initds=,termds=,topicds=,termtopicds=,topic_cutoff_ds=,
33947     +                  doccutoff=.001,termcutoff=.001);
33948     +   data _tmptop (keep=_topic_ _term_ _role_ _weight_);
33949     +   set &initds;
33950     +   /* Normalize data (terms all downcased), roles set as appropriate
33951     +    before output */
33952     +   _term_=klowcase(_term_);
33953     +   if propcase(_role_) in
33954     +      ("Adj","Adv","Aux","Conj","Det","Noun","Num","Part",
33955     +       "Prep", "Pron","Prop", "Verb")
33956     +      then _role_=propcase(_role_);
33957     +   if (_term_ ne ' ' or _role_ ne ' ') and _weight_ ne 0 and _weight_ ne . then output _tmpTop;
33958     +   run;
33959     +
33960     +    /* Now summarize all duplicates as mean of all the rows that are duplicated,
33961     +       for topic_cutoffs.
33962     +     */
33963     +   proc summary nway data=&topic_cutoff_ds;
33964     +   class _name;
33965     +   var _docCutoff _termCutoff;
33966     +   output out=&topic_cutoff_ds mean=;
33967     +
33968     +
33969     +   /* Make sure to eliminate duplicates, and to roll children into parents.  Also join
33970     +       with the topic_cutoff_ds to get term and document cutoffs */
33971     +   proc sql noprint;
33972     +      create table _tmptop as
33973     +         select a.*, b._doccutoff, b._termcutoff
33974     +         from _tmptop as a left join &topic_cutoff_ds as b
33975     +         on upcase(a._topic_)=upcase(b._name);
33976     +            quit;
33977     +
33978     +   proc sql noprint;
33979     +      create table _termtop1  as
33980     +         select a._topic_,
33981     +            case
33982     +              when b.parent=. then b.key else b.parent end
33983     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
33984     +         from &termds as b,_tmpTop as a
33985     +         where (b.key ne b.parent) and (a._term_= ' ' and a._role_=b.role);
33986     +            quit;
33987     +   proc sql noprint;
33988     +      create table _termtop2  as
33989     +         select a._topic_,
33990     +            case
33991     +              when b.parent=. then b.key else b.parent end
33992     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
33993     +         from &termds as b,_tmpTop as a
33994     +         where (b.key ne b.parent) and
33995     +         (a._term_ ne ' ' and a._role_ = ' ' and a._term_=b.term);
33996     +            quit;
33997     +   proc sql noprint;
33998     +      create table _termtop3  as
33999     +         select a._topic_,
34000     +            case
34001     +              when b.parent=. then b.key else b.parent end
34002     +              as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff
34003     +         from &termds as b,_tmpTop as a
34004     +         where (b.key ne b.parent) and
34005     +               (a._term_ ne ' ' and a._role_ ne ' ' and a._term_=b.term
34006     +                 and (a._role_=b.role or b.role=' '));
34007     +            quit;
34008     +
34009     +
34010     +   data &termtopicds;
34011     +            set _termtop1 _termtop2 _termtop3; run;
34012     +
34013     +   proc sort data=&termtopicds; by _topic_;
34014     +
34015     +   /* Now create the topic data set, which has one row per topic, and
34016     +    the convert the termtopic data set to have one row per actual term
34017     +    per topic */
34018     +   data &topicds (keep=_topicid _name _displayCat _cat _docCutoff _termCutoff
34019     +                  _numterms _numdocs)
34020     +      &termtopicds (keep=_topicid _termid _weight);
34021     +   retain _topicid;
34022     +   format _docCutoff _termCutoff _weight 5.3;
34023     +   set &termtopicds; by _topic_;
34024     +   if _n_=1 then _topicid=1;
34025     +
34026     +   output &termtopicds;
34027     +   if last._topic_ then do;
34028     +      _name=_topic_;
34029     +      _cat="User";
34030     +      _displayCat="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
34031     +      if _doccutoff=. then _docCutoff=&doccutoff;
34032     +      if _termcutoff=. then  _termcutoff=&termcutoff;
34033     +      _numterms=.;
34034     +      _numdocs=.;
34035     +      output &topicds;
34036     +      _topicid=_topicid+1;
34037     +      end;
34038     +   run;
34039     +
34040     +   /* Replace duplicates with their mean weight */
34041     +   proc summary nway data=&termtopicds;
34042     +   class _topicid _termid;
34043     +   var _weight;
34044     +   output out=&termtopicds mean=;
34045     +   run;
34046     +   data &termtopicds; set &termtopicds(drop=_type_ _freq_); run;
34047     +
34048     +%if &tm_debug =0 %then %do;
34049     +proc sql;
34050     +   drop table _termtop1;
34051     +   drop table _termtop2;
34052     +   drop table _termtop3;
34053     +   quit;
34054     +%end;
34055     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMT_DOC_SCORE.SOURCE.
34056     +/* ****************************************************************
34057     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
34058     + *
34059     + * Name:             tmt_doc_score.sas
34060     + * Support:          cox  James A. Cox
34061     + * Product:          SAS Text Miner
34062     + * Language:         Sas
34063     + * Script:
34064     + *
34065     + * Usage:
34066     + *
34067     + * Purpose:  To score documents based on contents of a topic table (&topicds), a term-topic table
34068     + *      (&termtopds), and a weighted "out" table (&outds).  A topic weight is a weighted sum of the
34069     + *      term weights from the term-topic table  (_weight_) where such weight is above a minimum
34070     + *      _termcutoff,  multiplied by the weighted _count_ (_count_) from the weighted "out" table,
34071     + *      where such counts are the tfidf weighted counts.
34072     + *
34073     + *
34074     + * History:
34075     + * 01May09 Initial Coding [cox]
34076     + * 08Nov10 Changed to use hash tables [cox]
34077     + *
34078     + * Notes:
34079     + *   scoring=yes is passed in in topic_score.source for both flow and saved score code.
34080     + *       Otherwise, a blank value is passed in.
34081     + *   docds is blank only when called from the Topic Viewer, since the new document table does
34082     + *       not need to be recalculated until scoring time ( a view is actually displayed that joins
34083     + *        them in the Document table part).  So when scoring is nonblank, docds is
34084     + *       never non-blank.
34085     + *
34086     + *   This routine will score topics inclusive from the minimum topic number (computed internally as
34087     + *        &_mintopic) to the maximum topic number (computed as &_maxtopic) from the input topic data
34088     + *        set.
34089     + *
34090     + *
34091     + *   If &scoring is blank, then topic variables are created for each such topic as <nodename>_#.
34092     + *    For example, if the smallest topic number in topic table is 4 and the largest is 10, and the
34093     + *    nodename is "texttopic", then Texttopic_4-TextTopic10 will be created on the output &newdocds.
34094     + *    In this case, the topic table is updated for the variables _numterms and _numdocs to have the
34095     + *    number of terms and documents that exceed their "minimum" value as indicated on the topic ds.
34096     + *   If &scoring is nonblank, the same variables will contain either 1 (if the weighted sum >=
34097     + *    _docCutoff) or 0 (if it is not).  In this case, variables including a raw suffix will indicate
34098     + *   the raw values as calculated above (e.g. texttopic_raw4-texttopic_raw10).  Also, the topic ds
34099     + *    is NOT updated when scoring.
34100     + *
34101     + *   If docds is passed in, then all variables are added to existing variables on the docds.  In this
34102     + *     case, any documents that have no terms for any of the topics will have 0 for all topic variables.
34103     + *     If docds is not passed in, of course, no concatenation is done, and topics that have no terms
34104     + *     for any of the topics will not appear.
34105     + *
34106     + * Unit Tests:  These unit tests were performed satisfactorily from 11/05-11/23 on this code:
34107     + *   Used existing topic node results to work from... this involves using an existing Text Topic Node and
34108     + *   then rescoring the topics.  Unfortunately, it is not quite this easy since the current tmt_doc_score
34109     + *   also normalizes the topic weights each time it is called for all current topics.  This is incorrect, which
34110     + *   was part of the motivation for this rewrite.  I was able to verify same results using some transformations,
34111     + *   however.
34112     + *
34113     + *   1. Verify that when docds= valid value, that the newdocds contains the new variables, and set to the new
34114     + *       values when they differ from the old ones.  Also that it only has the
34115     + *      new variables when docds is not passed in.
34116     + *   2. Verify that when scoring=yes, the _numdocs and _numterms is not updated, but that the _# variables and
34117     + *      the raw_# variables ARE created, and that the number of 1s in each _# variable is correct based on the
34118     + *      document cutoffs specified.
34119     + *   3. Verify that when scoring=, _numdocs and _numterms IS updated, but that _numterms is the same as was
34120     + *      generated by tmt_doc_score before, and _numdocs is equal to the count of the # of 1s in each topic
34121     + *      variable as generated in the result from 2. above.
34122     + *   4. Verify that the results obtained using tmt_doc_score can be made equivalent to this by performing the
34123     + *      normalization before this code is called.  This was tried for scoring=,docds=, and for scoring=y,
34124     + *      docds=train ds, and scoring=,docds
34125     + *   5. Verify that subsetting topics from 4-10 generate same results for those topics as for topics 1-10.  This
34126     + *      was verified for both scoring=yes and scoring=no.
34127     + *   6. Show that documents that contain no terms for all topics appear and generate 0s for all topic scores when
34128     + *      docds is passed in, but don't appear when docds is not passed in.
34129     + *
34130     + *
34131     + * Last Modified By:
34132     + * Last Modified On: Tue Oct 22 15:19:28 2013
34133     + *
34134     + * End
34135     + * ************************************************************** */
34136     +%macro tmt_doc_score(termtopds=tmp_term_topics,outds=,docds=,newdocds=work.topdocs,
34137     +                     topicds=tmp_topics, termsumds=,scoring=,prefix=_topic,
34138     +                     pivot=.5,norm=,outpos=,topicpos=);
34139     +%let _mintopic=1;
34140     +
34141     +/* Remove any duplicate topic ids before scoring */
34142     +proc sort data=&topicds nodupkey; by _topicid;
34143     +proc sort data=&termtopds nodupkey; by _termid _topicid; run;
34144     +proc sql noprint;
34145     +    select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from &topicds;
34146     +       quit;
34147     +%if &_mintopic eq . %then %let _mintopic=1;
34148     +/*
34149     +%if &scoring ne %then %do;
34150     +    %let _mintopic=1;
34151     +%end;
34152     +*/
34153     +
34154     +%let _mintopic=%left(&_mintopic);
34155     +%let _maxtopic=%left(&_maxtopic);
34156     +
34157     +/* Do the following if there are any topics to be scored */
34158     +%if &_maxtopic >0 %then %do;
34159     +
34160     +%let _minlab=%ktrim(_tmlab)&_mintopic;
34161     +%let _maxlab=%ktrim(_tmlab)&_maxtopic;
34162     +proc sql noprint;
34163     +    select _name into :&_minlab - :&_maxlab from &topicds;
34164     +       quit;
34165     +
34166     +data &newdocds (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat  _numterms _numdocs
34167     +                _weight _termid rc _termnum_ i _count_)
34168     +   %if &scoring= %then %do;
34169     +      &topicds (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff)
34170     +         %end;
34171     +   %if &outpos ne and &topicpos ne %then %do;
34172     +      &topicpos (keep=_topicid _document_ _offset_ _length_ _termnum_)
34173     +         %end;
34174     +   ;
34175     +   if 0 then set &topicds &termtopds;
34176     +
34177     +   /* Create topic hash table */
34178     +   dcl hash _topic_hash(dataset: "&topicds", ordered: "a");
34179     +   _topic_hash.defineKey("_topicid");
34180     +   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms",
34181     +                     "_numdocs");
34182     +   _topic_hash.defineDone();
34183     +
34184     +   dcl hiter _it_topic("_topic_hash");
34185     +
34186     +   /* Unless we are scoring, zero out _numterms and _numdocs since we will recalculate based on
34187     +    currently specified cutoffs
34188     +    */
34189     +   %if &scoring= %then %do;
34190     +      rc=_it_topic.first();
34191     +      do while(rc=0);
34192     +         _numterms=0; _numdocs=0;
34193     +         _topic_hash.replace();
34194     +         rc=_it_topic.next();
34195     +         end;
34196     +      %end;
34197     +
34198     +   /* Create term-topic hash table */
34199     +   dcl hash _termtopics(multidata: "Y");
34200     +   _termtopics.defineKey("_termid");
34201     +   _termtopics.defineData("_termid","_topicid", "_weight");
34202     +   _termtopics.defineDone();
34203     +
34204     +   /* Now read in observations, and, for every one whose abs(weight) >= _termCutoff, add
34205     +    it to _termtopics hash table and increment the _numdocs count in the topics hash table
34206     +    */
34207     +   do until(eof);
34208     +      set &termtopds end=eof;
34209     +      if _topic_hash.find() ne 0 then do;
34210     +         put "topic " _topicid " not found in topic data set";
34211     +         end;
34212     +      else if abs(_weight)>= _termCutoff then do;
34213     +
34214     +         /* If we are not scoring, adjust the term counts */
34215     +         %if &scoring= %then %do;
34216     +            _numterms+1;
34217     +            _topic_hash.replace();
34218     +            %end;
34219     +
34220     +         /* Add to _termtopics */
34221     +         _termtopics.add();
34222     +         end;
34223     +      end;
34224     +
34225     +   /* Now create document hash table. This will have one row for each document, and contain the
34226     +      weighted topic values for each of the topics on that one row.
34227     +    */
34228     +   array _topic{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
34229     +   format &prefix.raw&_mintopic-&prefix.raw&_maxtopic 5.3;
34230     +      %if &scoring ne %then %do;
34231     +         array trunc{&_mintopic:&_maxtopic} &prefix.&_mintopic-&prefix.&_maxtopic;
34232     +         array notrunc{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
34233     +         /* %put "using superq"; */
34234     +         %do i=&_mintopic %to &_maxtopic;
34235     +            /* %put &_tm_tmp; */
34236     +            %let _tm_tmp=_1_0_%bquote(&&_tmlab&i);
34237     +            label &prefix.&i="&_tm_tmp";
34238     +            %let _tm_tmp=%bquote(&&_tmlab&i);
34239     +            label &prefix.raw&i="&_tm_tmp";
34240     +            %end;
34241     +
34242     +         %end;
34243     +
34244     +   dcl hash _doc_hash(hashexp:16,ordered: 'a');
34245     +   _doc_hash.defineKey("_document_");
34246     +   _doc_hash.defineData("_document_"
34247     +                    %do i=&_mintopic %to &_maxtopic; ,"&prefix.raw&i" %end;
34248     +                    );
34249     +   _doc_hash.defineDone();
34250     +
34251     +   /* Now read in out data set */
34252     +   eof=0;
34253     +   do until(eof);
34254     +      set &outds end=eof;
34255     +
34256     +      /* If we haven't seen this document yet, set all topic weights to zero */
34257     +      if _doc_hash.find() ne 0 then do;
34258     +         do i=&_mintopic to &_maxtopic;
34259     +            _topic{i}=0;
34260     +            end;
34261     +         _doc_hash.add();
34262     +         end;
34263     +
34264     +      /* Check to see if this term has significant weights on any topics */
34265     +      _termid=_termnum_;
34266     +      rc=_termtopics.find();
34267     +      if rc = 0 then do;
34268     +         do while(rc=0);
34269     +            _topic{_topicid}= _topic{_topicid}+_weight*_count_;
34270     +            rc=_termtopics.find_next();
34271     +            end;
34272     +         _doc_hash.replace();
34273     +         end;
34274     +      end;
34275     +   _doc_hash.output(dataset: "docds");
34276     +
34277     +   /****************************************************************************
34278     +    * Following is new code for tmt_doc_score_new.  Should be moved into %tmt_doc_score
34279     +    * for 9.4
34280     +    ****************************************************************************/
34281     +
34282     +   %if &outpos ne and &topicpos ne %then %do;
34283     +   /* Now read in outpos data set */
34284     +   eof=0;
34285     +   do until(eof);
34286     +      set &outpos end=eof;
34287     +      if _doc_hash.find() = 0 then do;
34288     +         /* Check to see if this term and document are both in the topic.  If so, output */
34289     +         _termid=_termnum_;
34290     +         rc=_termtopics.find();
34291     +         do while(rc=0);
34292     +            if _topic_hash.find()=0 then
34293     +               if round( _topic{_topicid},.001) >= _doccutoff then output &topicpos;
34294     +            rc=_termtopics.find_next();
34295     +            end;
34296     +         end;
34297     +               else put 'document ' _document_ ' not found.';
34298     +      end;
34299     +
34300     +
34301     +    %end;
34302     +
34303     +   /****************************************************************************
34304     +    * end of new code
34305     +    ****************************************************************************/
34306     +
34307     +   /* Now we have info in the docds hash table for cumulative weights.  Prepare for output and
34308     +      create numdocs for the topics hash table */
34309     +
34310     +   /* Note: If a docds was passed in, we load it here... this accounts for documents that have no
34311     +      positive topic weights.  Otherwise, we process docds hash table iteratively
34312     +    */
34313     +   %if &docds= %then %do;
34314     +      dcl hiter _doc_it("_doc_hash");
34315     +      rc=_doc_itfirst();
34316     +      do while(rc=0);
34317     +         %end;
34318     +      %else %do;
34319     +         eof=0;
34320     +         do until(eof);
34321     +            set &docds end=eof;
34322     +            rc=_doc_hash.find();
34323     +            %end;
34324     +         if rc ne 0 then
34325     +            do i=&_mintopic to &_maxtopic;
34326     +               _topic{i}=0; %if &scoring ne %then trunc{i} = 0;;
34327     +               end;
34328     +         else do _topicid=&_mintopic to &_maxtopic;
34329     +            /* Round value to nearest thousandth */
34330     +            _topic{_topicid}=round( _topic{_topicid},.001);
34331     +            _topic_hash.find();
34332     +            if _topic{_topicid} >= _doccutoff then do;
34333     +               %if &scoring= %then %do;
34334     +                  _numdocs=_numdocs+1;
34335     +                  _topic_hash.replace();
34336     +                  end;
34337     +                  %end;
34338     +               %else %do;
34339     +                  trunc{_topicid} = 1;
34340     +                  end;
34341     +            else trunc{_topicid} = 0;
34342     +            %end;
34343     +         end;
34344     +         output &newdocds;
34345     +       %if &docds= %then rc=_doc_itnext();;
34346     +       end;
34347     +
34348     +   %if &scoring= %then %do;
34349     +      eof=0;
34350     +      do until(eof);
34351     +         set &topicds end=eof;
34352     +         rc=_topic_hash.find();
34353     +         output &topicds;
34354     +         end;
34355     +      %end;
34356     +   * _termtopics.output(dataset: "&termtopds");
34357     +   run;
34358     +
34359     +/* proc sort data=&termtopds; by _topicid _termid; run; */
34360     +%end;
34361     +%else %if &docds ne %then %do;
34362     +    /* If there were no documents,set the new document table to contain the old documents */
34363     +    data &newdocds;
34364     +        set &docds;
34365     +    run;
34366     +
34367     +%end;
34368     +
34369     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_remove_dups.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMT_REMOVE_DUPS.SOURCE.
34370     +/* ****************************************************************
34371     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
34372     + *
34373     + * Name:             tmt_remove_dups.sas
34374     + * Product:          SAS Text Miner
34375     + * Language:         Sas
34376     + * Script:
34377     + *
34378     + * Usage:
34379     + * %tmt_remove_dups(in=tmp , N= , M= , maxc= , t= , prefix=, out=, outN=, outI=);
34380     + *  (see additional parameters in Notes below).
34381     + *
34382     + * Purpose: To remove N-M-maxc topics out of the inputs provided.  The topics that are removed
34383     + *          are the last N-M topics that have the highest correlations with the first M topics .
34384     + *          The first M factors indicate topics that will always persist to output.
34385     +
34386     +*inputs
34387     +    in: input data set with only required variables being &prefix1-&prefixN with rows being
34388     +    the document weight associated with each factor (topic)
34389     +
34390     +    N: total number of factors
34391     +
34392     +    M: number of user factors that will definitely persist to output.  factor1-factorM are
34393     +    taken as user factors unless M=0 (in which case there are no user factors...)
34394     +
34395     +    ndel: number of topics to delete
34396     +
34397     +    prefix: topic variable name prefix, these add a suffix that are 1..N.
34398     +    kpTmp: variable that will cause temporary (work) datasets used internally to be retained
34399     +
34400     + * outputs
34401     +    out: output dataset--will contain factorI variables representing distinct topic;
34402     +    any user topics will persist in factor1-factorM; also, any non-prefix variables will
34403     +    be copied directly to out
34404     +
34405     +    topicds/termtopicds: data sets which will have the _topicid variable updated according to the
34406     +       new index
34407     + *
34408     + * Purpose:
34409     + *
34410     + * History:
34411     + * 18Oct10 Initial Coding
34412     + *
34413     + * Notes:
34414     + *
34415     + * Last Modified By:
34416     + * Last Modified On: Tue Aug 23 15:37:30 2011
34417     + *
34418     + * End
34419     + * ************************************************************** */
34420     +%macro tmt_remove_dups(in=, N=, M=, m1=, ndel=1, prefix=factor,
34421     +                       out=outTops, outN=outN, topicds=,
34422     +                       termtopicds=, kpTmp=);
34423     +  /* %let M1=%eval(&M+1); */
34424     +
34425     +  proc corr noprint outp=tm_tmpcorr data=&in;
34426     +   var &prefix.1-&prefix.&M;
34427     +   with &prefix.&M1-&prefix.&N;
34428     +   run;
34429     +
34430     +  /* proc print data=tm_tmpcorr (where=(_type_="CORR")); run; */
34431     +
34432     +  data _null_;
34433     +   length oldvar_str newvar_str $1000;
34434     +   array corrs{*} &prefix.1-&prefix.&M;
34435     +   dcl hash topcorrs(ordered: "d");
34436     +   topcorrs.defineKey("maxcorr","topicnum");
34437     +   topcorrs.defineData("maxcorr","topicnum");
34438     +   topcorrs.defineDone();
34439     +   topicnum=&M1;
34440     +   do until(eof);
34441     +      set tm_tmpcorr(where=(_type_="CORR")) end=eof;
34442     +      maxcorr=-1;
34443     +      do i=1 to &M;
34444     +         if corrs{i}>maxcorr then maxcorr=corrs{i};
34445     +         end;
34446     +      topcorrs.add();
34447     +      topicnum+1;
34448     +      end;
34449     +   topcorrs.output(dataset: 'corrs');
34450     +   dcl hash remove_vars(ordered: "d");
34451     +   remove_vars.defineKey("topicnum");
34452     +   remove_vars.defineData("maxcorr","topicnum");
34453     +   remove_vars.defineDone();
34454     +
34455     +   dcl hiter corr_it('topcorrs');
34456     +   rc=corr_it.first();
34457     +   do i=1 to &ndel;
34458     +      remove_vars.add();
34459     +      rc=corr_it.next();
34460     +      end;
34461     +   remove_vars.output(dataset: 'rem_corrs');
34462     +
34463     +   oldvar_str="";
34464     +   newvar_str="";
34465     +   dcl hiter var_it('remove_vars');
34466     +   i=&N;
34467     +   rc=var_it.first();
34468     +   do while(rc=0);
34469     +      do while( remove_vars.check(key: i) = 0); i=i-1; /* put i= topicnum=;*/ end;
34470     +      if topicnum<&N-&ndel+1 then do;
34471     +         oldvar_str=ktrim(kleft(put(topicnum,5.))) || " " || oldvar_str;
34472     +         newvar_str=ktrim(kleft(put(i,5.))) || " " || newvar_str;
34473     +         i=i-1;
34474     +         end;
34475     +      else do;
34476     +         oldvar_str=ktrim(kleft(put(topicnum,5.))) || " " || oldvar_str;
34477     +         newvar_str=ktrim(kleft(put(topicnum,5.))) || " " || newvar_str;
34478     +         end;
34479     +
34480     +      rc=var_it.next();
34481     +      end;
34482     +
34483     +   /* oldvar_str contains the topics to be replaced by the topics in the newvar_str */
34484     +   /* put oldvar_str= newvar_str=; */
34485     +
34486     +   call symput('tmt_oldvar_str', oldvar_str);
34487     +   call symput('tmt_newvar_str', newvar_str);
34488     +
34489     +   run;
34490     +
34491     +/* proc print data=corrs; run;  */
34492     +
34493     +
34494     +data &out (drop=&prefix.%eval(&N-&ndel+1)-&prefix.&N);
34495     +   set &in;
34496     +
34497     +   %let index=1;
34498     +   %let source=%scan(&tmt_oldvar_str,&index);
34499     +   %do %while(&source ne);
34500     +      %let dest=%scan(&tmt_newvar_str,&index);
34501     +      &prefix.&source=&prefix.&dest;
34502     +      %let index=%eval(&index+1);
34503     +      %let source=%scan(&tmt_oldvar_str,&index);
34504     +      %end;
34505     +
34506     +data &topicds;
34507     +   set &topicds;
34508     +   %let index=1;
34509     +   %let source=%scan(&tmt_oldvar_str,&index);
34510     +   %if &source ne %then %do;
34511     +      if
34512     +         %do %while(&source ne);
34513     +            %let dest=%scan(&tmt_newvar_str,&index);
34514     +            _topicid=&source then delete;
34515     +            else if _topicid=&dest then _topicid=&source;
34516     +            %let index=%eval(&index+1);
34517     +            %let source=%scan(&tmt_oldvar_str,&index);
34518     +            %if &source ne %then else if;
34519     +               %else %do;
34520     +                  else if _topicid > %eval(&N-&ndel) then delete;
34521     +                  %end;
34522     +            %end;
34523     +      %end;
34524     +   run;
34525     +
34526     +data &termtopicds;
34527     +   set &termtopicds;
34528     +   %let index=1;
34529     +   %let source=%scan(&tmt_oldvar_str,&index);
34530     +   %if &source ne %then %do;
34531     +      if
34532     +         %do %while(&source ne);
34533     +            %let dest=%scan(&tmt_newvar_str,&index);
34534     +            _topicid=&source then delete;
34535     +            else if _topicid=&dest then _topicid=&source;
34536     +            %let index=%eval(&index+1);
34537     +            %let source=%scan(&tmt_oldvar_str,&index);
34538     +            %if &source ne %then else if;
34539     +               %else %do;
34540     +                  else if _topicid > %eval(&N-&ndel) then delete;
34541     +                  %end;
34542     +            %end;
34543     +      %end;
34544     +   run;
34545     +
34546     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   * get input data sets ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   set EMWS3.TextTopic_VariableSet(where=(ROLE='TARGET' and USE in('Y' 'D') and LEVEL ne 'INTERVAL'));
MPRINT(TRAIN):   if _N_=1 then call symput('targetvar', strip(NAME));
MPRINT(TRAIN):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_VARIABLESET.
      WHERE (ROLE='TARGET') and USE in ('D', 'Y') and (LEVEL not = 'INTERVAL');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   cellwgt="LOG";
MPRINT(TRAIN):   set EMWS3.TextFilter_tmconfig;
MPRINT(TRAIN):   call symput('cellwgt',cellwgt);
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTFILTER_TMCONFIG.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc tmutil data=EMWS3.TextFilter_tmout key=EMWS3.TextFilter_terms;
MPRINT(TRAIN):   control init memloc='tmutil_memloc';
 
NOTE: There were 37418 observations read from the data set EMWS3.TEXTFILTER_TMOUT.
NOTE: There were 3255 observations read from the data set EMWS3.TEXTFILTER_TERMS_DATA.
      WHERE KEEP='Y';
NOTE: There were 7303 observations read from the data set EMWS3.TEXTFILTER_TERM_STRINGS.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc tmutil;
MPRINT(TRAIN):   control release memloc='tmutil_memloc';
MPRINT(TRAIN):   weight cellwgt=LOG in_weight=EMWS3.TextFilter_terms_data(keep=key weight);
MPRINT(TRAIN):   output keeponly keyformat=tmscore out=EMWS3.TextTopic_weightedtmout;
MPRINT(TRAIN):   run;
 
NOTE: There were 9270 observations read from the data set EMWS3.TEXTFILTER_TERMS_DATA.
NOTE: The data set EMWS3.TEXTTOPIC_WEIGHTEDTMOUT has 37047 observations and 3 variables.
NOTE: PROCEDURE TMUTIL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   drop view EMWS3.TextTopic_weightedterms;
WARNING: File EMWS3.TEXTTOPIC_WEIGHTEDTERMS.VIEW does not exist.
WARNING: View EMWS3.TEXTTOPIC_WEIGHTEDTERMS has not been dropped.
MPRINT(TRAIN):   create table EMWS3.TextTopic_weightedterms as select * from EMWS3.TextFilter_terms where _ispar ne '.' order by key;
NOTE: Table EMWS3.TEXTTOPIC_WEIGHTEDTERMS created, with 1076 rows and 13 columns.
 
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc summary nway data=EMWS3.TextTopic_weightedtmout;
MPRINT(ROW_PIVOT_NORMALIZE):   class _document_;
MPRINT(ROW_PIVOT_NORMALIZE):   var _count_;
MPRINT(ROW_PIVOT_NORMALIZE):   output out=_sqrowvals uss=;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_WEIGHTEDTMOUT.
NOTE: The data set WORK._SQROWVALS has 3047 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc sql noprint;
MPRINT(ROW_PIVOT_NORMALIZE):   select mean(sqrt(_count_)) into :meaneuclen from _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   *populate the config file with the mean value;
MPRINT(ROW_PIVOT_NORMALIZE):   data EMWS3.TextFilter_tmconfig;
MPRINT(ROW_PIVOT_NORMALIZE):   set EMWS3.TextFilter_tmconfig;
MPRINT(ROW_PIVOT_NORMALIZE):   TextTopic_meaneuclen= symget('meaneuclen');
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTFILTER_TMCONFIG.
NOTE: The data set EMWS3.TEXTFILTER_TMCONFIG has 1 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   data _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   set _sqrowvals;
MPRINT(ROW_PIVOT_NORMALIZE):   meaneuclen=symget('meaneuclen');
MPRINT(ROW_PIVOT_NORMALIZE):   divisor = meaneuclen + (sqrt(_count_) - meaneuclen)*0.7;
MPRINT(ROW_PIVOT_NORMALIZE):   drop meaneuclen;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      53:109   53:138
NOTE: There were 3047 observations read from the data set WORK._SQROWVALS.
NOTE: The data set WORK._SQROWVALS has 3047 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc sql noprint;
MPRINT(ROW_PIVOT_NORMALIZE):   create table EMWS3.TextTopic_tmout_normalized as select a._document_,a._termnum_,a._count_ / divisor as _count_ from EMWS3.TextTopic_weightedtmout as a,_sqrowvals as b where a._document_=b._document_;
NOTE: Table EMWS3.TEXTTOPIC_TMOUT_NORMALIZED created, with 37047 rows and 3 columns.
 
MPRINT(ROW_PIVOT_NORMALIZE):   drop table _sqrowvals;
NOTE: Table WORK._SQROWVALS has been dropped.
MPRINT(ROW_PIVOT_NORMALIZE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(ROW_PIVOT_NORMALIZE):   proc summary nway data=EMWS3.TextTopic_tmout_normalized;
MPRINT(ROW_PIVOT_NORMALIZE):   class _termnum_;
MPRINT(ROW_PIVOT_NORMALIZE):   var _count_;
MPRINT(ROW_PIVOT_NORMALIZE):   output out=EMWS3.TextTopic_term_sums mean=;
MPRINT(ROW_PIVOT_NORMALIZE):   run;
 
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: The data set EMWS3.TEXTTOPIC_TERM_SUMS has 1076 observations and 4 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TMT_TOPIFY):   data _tmptop (keep=_topic_ _term_ _role_ _weight_);
MPRINT(TMT_TOPIFY):   set EMWS3.TextTopic_initTopics;
MPRINT(TMT_TOPIFY):   _term_=klowcase(_term_);
MPRINT(TMT_TOPIFY):   if propcase(_role_) in ("Adj","Adv","Aux","Conj","Det","Noun","Num","Part", "Prep", "Pron","Prop", "Verb") then _role_=propcase(_role_);
MPRINT(TMT_TOPIFY):   if (_term_ ne ' ' or _role_ ne ' ') and _weight_ ne 0 and _weight_ ne . then output _tmpTop;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_INITTOPICS.
NOTE: The data set WORK._TMPTOP has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   proc summary nway data=EMWS3.TextTopic_topic_Cutoffs;
MPRINT(TMT_TOPIFY):   class _name;
MPRINT(TMT_TOPIFY):   var _docCutoff _termCutoff;
MPRINT(TMT_TOPIFY):   output out=EMWS3.TextTopic_topic_Cutoffs mean=;
 
NOTE: No observations in data set EMWS3.TEXTTOPIC_TOPIC_CUTOFFS.
NOTE: The data set EMWS3.TEXTTOPIC_TOPIC_CUTOFFS has 0 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _tmptop as select a.*, b._doccutoff, b._termcutoff from _tmptop as a left join EMWS3.TextTopic_topic_Cutoffs as b on upcase(a._topic_)=upcase(b._name);
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK._TMPTOP created, with 0 rows and 6 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop1 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS3.TextTopic_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_= ' ' and a._role_=b.role);
NOTE: Table WORK._TERMTOP1 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop2 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS3.TextTopic_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_ ne ' ' and a._role_ = ' ' and a._term_=b.term);
NOTE: Table WORK._TERMTOP2 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   proc sql noprint;
MPRINT(TMT_TOPIFY):   create table _termtop3 as select a._topic_, case when b.parent=. then b.key else b.parent end as _termid, a._weight_ as _weight, a._doccutoff, a._termcutoff from EMWS3.TextTopic_weightedterms as b,_tmpTop as a where (b.key ne
b.parent) and (a._term_ ne ' ' and a._role_ ne ' ' and a._term_=b.term and (a._role_=b.role or b.role=' '));
NOTE: Table WORK._TERMTOP3 created, with 0 rows and 5 columns.
 
MPRINT(TMT_TOPIFY):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   data EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   set _termtop1 _termtop2 _termtop3;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: There were 0 observations read from the data set WORK._TERMTOP1.
NOTE: There were 0 observations read from the data set WORK._TERMTOP2.
NOTE: There were 0 observations read from the data set WORK._TERMTOP3.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_TOPIFY):   proc sort data=EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   by _topic_;
 
NOTE: Input data set is empty.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   data EMWS3.TextTopic_topics (keep=_topicid _name _displayCat _cat _docCutoff _termCutoff _numterms _numdocs) EMWS3.TextTopic_termtopics (keep=_topicid _termid _weight);
MPRINT(TMT_TOPIFY):   retain _topicid;
MPRINT(TMT_TOPIFY):   format _docCutoff _termCutoff _weight 5.3;
MPRINT(TMT_TOPIFY):   set EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   by _topic_;
MPRINT(TMT_TOPIFY):   if _n_=1 then _topicid=1;
MPRINT(TMT_TOPIFY):   output EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   if last._topic_ then do;
MPRINT(TMT_TOPIFY):   _name=_topic_;
MPRINT(TMT_TOPIFY):   _cat="User";
MPRINT(TMT_TOPIFY):   _displayCat="User";
MPRINT(TMT_TOPIFY):   if _doccutoff=. then _docCutoff=0.001;
MPRINT(TMT_TOPIFY):   if _termcutoff=. then _termcutoff=0.001;
MPRINT(TMT_TOPIFY):   _numterms=.;
MPRINT(TMT_TOPIFY):   _numdocs=.;
MPRINT(TMT_TOPIFY):   output EMWS3.TextTopic_topics;
MPRINT(TMT_TOPIFY):   _topicid=_topicid+1;
MPRINT(TMT_TOPIFY):   end;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 0 observations and 8 variables.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   proc summary nway data=EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   class _topicid _termid;
MPRINT(TMT_TOPIFY):   var _weight;
MPRINT(TMT_TOPIFY):   output out=EMWS3.TextTopic_termtopics mean=;
MPRINT(TMT_TOPIFY):   run;
 
NOTE: No observations in data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 5 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_TOPIFY):   data EMWS3.TextTopic_termtopics;
MPRINT(TMT_TOPIFY):   set EMWS3.TextTopic_termtopics(drop=_type_ _freq_);
MPRINT(TMT_TOPIFY):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :ntopics from EMWS3.TextTopic_topics;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   *check for eliminated init topics;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(distinct _topic_) into :user_ntopics from EMWS3.TextTopic_initTopics;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS3.TextTopic_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 0 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS3.TextTopic_termtopics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 0 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from EMWS3.TextTopic_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   data _userdocs;
MPRINT(TMT_DOC_SCORE):   set EMWS3.TextFilter_TRAIN;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: There were 4400 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 4400 observations read from the data set EMWS3.TEXTFILTER_DOC_IDS.
NOTE: There were 4400 observations read from the data set EMWS3.TEXTFILTER_TRAIN.
NOTE: The data set WORK._USERDOCS has 4400 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS3.TextTopic_docDs;
MPRINT(TRAIN):   set _userdocs;
MPRINT(TRAIN):   run;
 
NOTE: There were 4400 observations read from the data set WORK._USERDOCS.
NOTE: The data set EMWS3.TEXTTOPIC_DOCDS has 4400 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename temp catalog 'sashelp.emtxtext.tmt_multi_terms.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMT_MULTI_TERMS.SOURCE.
34547     +/* ****************************************************************
34548     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
34549     + *
34550     + * Name:             tmt_multi_terms.sas
34551     + * Support:          cox  James A. Cox
34552     + * Product:          SAS Text Miner
34553     + * Language:         Sas
34554     + * Script:
34555     + *
34556     + * Usage:
34557     + *
34558     + * Purpose:          Computes an svd of a term by document matrix and
34559     + *                   then rotates the U matrix corresponding to term wgts.
34560     +
34561     + *
34562     + * History:
34563     + * 30Apr09 Initial Coding [cox]
34564     + *
34565     + * Notes:
34566     + *
34567     + * Last Modified By:
34568     + * Last Modified On: Thu Jun 05 16:00:11 2014
34569     + *
34570     + * End
34571     + * ************************************************************** */
34572     +
34573     +%macro tmt_multi_terms(outds=, termds=, num_terms=, num_topics=20,
34574     +                       rotation=varimax,scaleword=,normword=,termtopicds=,
34575     +                       startnum=1,termcutoff=,topicds=multtopics,
34576     +                       prefix=_topic, tmptable=out_u, doccutoff=.1,
34577     +                       termcutoff_multiple=1,rotate_matrix=_termmrg,
34578     +                       svdu=,svd_index=index);
34579     +%if &svdu eq %then %do;
34580     +/*make sure requested topics do not exceed matrix dimensions or spsvd will return an error*/
34581     +%let k_margin=15;
34582     +%let minpertopic=5;
34583     +
34584     +proc sql noprint;
34585     +select count(distinct _termnum_), count(distinct _document_)
34586     +        into :n_termnum_, :n_document_ from &outds;
34587     +quit;
34588     +%if &n_document_ <= &n_termnum_ %then %let k_cutoff=%ktrim(&n_document_);
34589     +%else %let k_cutoff=%ktrim(&n_termnum_);
34590     +
34591     +/* Check for too few documents and two few terms for topic discovery */
34592     +
34593     +%if %eval(&n_termnum_) < &k_margin %then %do;
34594     +   %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_TERMS_SMALL,&n_termnum_;
34595     +   %goto end_multi_terms;
34596     +%end;
34597     +
34598     +%if %eval(&n_document_) < &k_margin %then %do;
34599     +   %let EMEXCEPTIONSTRING = EMTOOL.TOPIC_DATA_SMALL,&n_document_;
34600     +   %goto end_multi_terms;
34601     +%end;
34602     +
34603     +/* Now check to see if data requires fewer topics to be specified than requested.
34604     +     Must be 5 documents and terms per topic */
34605     +%let max_topics= %eval(&k_cutoff/&minpertopic);
34606     +
34607     +
34608     +%if &num_topics>&max_topics %then %do;
34609     +   %put %sysfunc(SASMSG(sashelp.tmine,EMTOOL.TOPIC_DATA_SMALL_WARN,NOQUOTE,&n_document_,&n_termnum_,&max_topics));
34610     +   %let num_topics=&max_topics;
34611     +   %end;
34612     +
34613     +
34614     +proc sort data=&outds; by _termnum_ _document_;
34615     +proc spsvd data=&outds k=&num_topics;
34616     +   row _termnum_;
34617     +   col _document_;
34618     +   entry _count_;
34619     +   output u=&tmptable
34620     +   %if &scaleword ne %then scaleword;
34621     +   %if &normword ne %then normword;
34622     +      ;
34623     +   run;
34624     +
34625     +/*try sampling if out of memory occurred*/
34626     +%if(&syscc eq 1111) %then %do;
34627     +    %let syscc=0; /*reset syscc*/
34628     +    proc spsvd data=&outds k=&num_topics;
34629     +        row _termnum_;
34630     +        col _document_;
34631     +        entry _count_;
34632     +        output v = _sampV u=&tmptable;
34633     +        sample allow;
34634     +    run;
34635     +%end;
34636     +
34637     +%if &syscc > 4 %then %do;
34638     +%let EMEXCEPTIONSTRING = EMTOOL.SPSVDERROR;
34639     +%goto end_multi_terms;
34640     +%end;
34641     +
34642     +%end;
34643     + %else %do;
34644     +   %let tmptable=&svdu;
34645     +    %put tmptable= &tmptable;
34646     +    %end;
34647     +
34648     +proc transpose data=&tmptable (drop=&svd_index) out=_factors(drop=_NAME_);
34649     +   run;
34650     +
34651     +/*get actual number of topics produced*/
34652     +proc sql noprint; select count(*) into :num_topics from _factors; quit;
34653     +%let num_topics=%ktrim(&num_topics);
34654     +
34655     +data _factors(type=factor);
34656     +   set _factors;
34657     +   _TYPE_='PATTERN';
34658     +   _NAME_='factor'|| kleft(put(_N_,4.));
34659     +   run;
34660     +
34661     +proc factor noprint data=_factors method=pattern n=&num_topics
34662     +      rotate=&rotation
34663     +      nocorr outstat=_factrot;
34664     +   run;
34665     +
34666     +/*
34667     +data _factrot (drop=num);
34668     +   length _name_ $15;
34669     +   set _factrot;
34670     +   if _type_='PATTERN' then do;
34671     +      _name_=ktrim(_name_)|| "    ";
34672     +      num=input(substr(_name_,7),4.);
34673     +      _name_="&prefix"|| ktrim(kleft(put(num+&startnum-1,4.)));
34674     +      output;
34675     +      end;
34676     +   run;
34677     + */
34678     +proc transpose data=_factrot(where=(_type_='PATTERN')) out=&rotate_matrix; run;
34679     +      /* proc corr data=&rotate_matrix; run; */
34680     +/*
34681     +proc summary data=&rotate_matrix;
34682     +    var factor1-factor&num_topics;
34683     +   output out=_tmpsums mean=;
34684     +proc print data=_tmpsums; run;
34685     +*/
34686     +proc sort data=&termds(where=(_ispar ne '.')) out=_sortterm; by key;
34687     +data &rotate_matrix;
34688     +   merge _sortterm &rotate_matrix;
34689     +   run;
34690     +/* proc print data=&rotate_matrix(obs=50); id key; var factor1-factor10; run; */
34691     +
34692     +data &termtopicds (keep=_topicid _termid _weight term);
34693     +   array topics{*} factor1-factor&num_topics;
34694     +   set &rotate_matrix;
34695     +   _termid=key;
34696     +   if _ispar='+' then term='+'||term;
34697     +   do i=1 to &num_topics;
34698     +      _topicid=i+&startnum-1;
34699     +      /* Round off weight to be exact in third decimal place */
34700     +      _weight=round(topics{i},0.001);
34701     +      output;
34702     +      end;
34703     +   run;
34704     +
34705     +/* Create temporary view that includes abs_weight */
34706     +proc sql noprint;
34707     +   create view _tmp_top_weights as select *, abs(_weight) as abs_weight
34708     +      from &termtopicds;
34709     +      quit;
34710     +
34711     +proc summary nway data=_tmp_top_weights;
34712     +   class _topicid;
34713     +   var _weight abs_weight;
34714     +   output out=_termtmpsums
34715     +      mean(abs_weight)=abs_weight_mean
34716     +      std(abs_weight)=abs_weight_std
34717     +      idgroup( max(_weight) out[5] (term)=)
34718     +      /autolabel autoname;
34719     +   run;
34720     +data &topicds(keep=_topicid _name _cat _displayCat /* _apply */ _numterms _numdocs
34721     +               _docCutoff _termCutoff);
34722     +   set _termtmpsums;
34723     +   length _name $100;
34724     +   _name=ktrim(term_1)||','||ktrim(term_2)||','||ktrim(term_3)||','||
34725     +      ktrim(term_4)||','||ktrim(term_5);
34726     +   _cat="Mult";
34727     +   _displayCat="%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmult_value, NOQUOTE))";
34728     +    /*  _apply="Y"; */
34729     +   /* Change to use mean plus one standard deviation */
34730     +   /* _termCutoff=max(0.001, min(_weight_p99,max(_weight_Max*&termcutoff,_weight_P95))); */
34731     +   _termcutoff= %if &termCutoff ne %then &termcutoff;
34732     +             %else round(abs_weight_mean+abs_weight_std*&termcutoff_multiple,0.001);
34733     +   ;
34734     +   _docCutoff=.;
34735     +   _numterms=.;
34736     +   _numdocs=.;
34737     +
34738     +   run;
34739     +data &termtopicds;
34740     +   set &termtopicds(drop=term);
34741     +   run;
34742     +
34743     +/*post processing: eliminate topics with no terms above the cutoff*/
34744     +proc sql;
34745     +create table kpTops as
34746     +    select distinct a._topicid as _topicid0 from &topicds a, &termtopicds b
34747     +    where a._topicid=b._topicid and abs(b._weight) >= a._termcutoff and b._termid ne .;
34748     +
34749     +alter table kpTops add _topicid num;
34750     +update kpTops set _topicid=monotonic()+&startnum-1;
34751     +
34752     +create table &topicds(drop=_topicid0) as
34753     +    select b._topicid, a.* from &topicds(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
34754     +
34755     +create table &termtopicds(drop=_topicid0) as
34756     +    select a._termid, b._topicid, a._weight from &termtopicds(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
34757     +
34758     +drop table kpTops;
34759     +quit;
34760     +
34761     +
34762     + /*    filename temp catalog 'sashelp.emtxtext.svd_rotate.source';
34763     +    %include temp;
34764     +
34765     +    %svd_rotate(termds=&termds,
34766     +                outds=&outds, weight=,
34767     +                out_u=work.out_u, out_term=work.rotsvdmrg,
34768     +                nfactors=&num_terms, rotation=&topic_method,
34769     +                scaleword=,normword=);
34770     +
34771     +*/
34772     +
34773     +%end_multi_terms:
34774     +
34775     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into: _numrepterms from EMWS3.TextTopic_weightedterms;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   select count(distinct _termnum_), count(distinct _document_) into :n_termnum_, :n_document_ from EMWS3.TextTopic_tmout_normalized;
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc sort data=EMWS3.TextTopic_tmout_normalized;
MPRINT(TMT_MULTI_TERMS):   by _termnum_ _document_;
 
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: The data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED has 37047 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc spsvd data=EMWS3.TextTopic_tmout_normalized k=20;
MPRINT(TMT_MULTI_TERMS):   row _termnum_;
MPRINT(TMT_MULTI_TERMS):   col _document_;
MPRINT(TMT_MULTI_TERMS):   entry _count_;
MPRINT(TMT_MULTI_TERMS):   output u=EMWS3.TextTopic_out_u ;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: P has been set to 75.
NOTE: Restart 1, Converged 18
NOTE: Singular values have converged.  Creating data sets.
NOTE: Restarted 1 times.
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: The data set EMWS3.TEXTTOPIC_OUT_U has 1076 observations and 21 variables.
NOTE: PROCEDURE SPSVD used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc transpose data=EMWS3.TextTopic_out_u (drop=index) out=_factors(drop=_NAME_);
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 1076 observations read from the data set EMWS3.TEXTTOPIC_OUT_U.
NOTE: The data set WORK._FACTORS has 20 observations and 1076 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   select count(*) into :num_topics from _factors;
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   data _factors(type=factor);
MPRINT(TMT_MULTI_TERMS):   set _factors;
MPRINT(TMT_MULTI_TERMS):   _TYPE_='PATTERN';
MPRINT(TMT_MULTI_TERMS):   _NAME_='factor'|| kleft(put(_N_,4.));
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 20 observations read from the data set WORK._FACTORS.
NOTE: The data set WORK._FACTORS has 20 observations and 1078 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc factor noprint data=_factors method=pattern n=20 rotate=varimax nocorr outstat=_factrot;
MPRINT(TMT_MULTI_TERMS):   run;
 
WARNING: The data set WORK._FACTORS does not indicate how many observations were used to compute the  matrix. The number of observations has been set to 10000. Statistics that depend on the number of observations (such as p-values) are not interpretable.
NOTE: Rotation converged.  Criterion changed from 97396.4302 to 227774.458 in 25 cycles.
NOTE: The data set WORK._FACTROT has 44 observations and 1078 variables.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be shifted by the "BEST" format.
NOTE: PROCEDURE FACTOR used (Total process time):
      real time           0.13 seconds
      cpu time            0.21 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc transpose data=_factrot(where=(_type_='PATTERN')) out=_termmrg;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 20 observations read from the data set WORK._FACTROT.
      WHERE _type_='PATTERN';
NOTE: The data set WORK._TERMMRG has 1076 observations and 21 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc sort data=EMWS3.TextTopic_weightedterms(where=(_ispar ne '.')) out=_sortterm;
MPRINT(TMT_MULTI_TERMS):   by key;
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 1076 observations read from the data set EMWS3.TEXTTOPIC_WEIGHTEDTERMS.
      WHERE _ispar not = '.';
NOTE: The data set WORK._SORTTERM has 1076 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   data _termmrg;
MPRINT(TMT_MULTI_TERMS):   merge _sortterm _termmrg;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 1076 observations read from the data set WORK._SORTTERM.
NOTE: There were 1076 observations read from the data set WORK._TERMMRG.
NOTE: The data set WORK._TERMMRG has 1076 observations and 34 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_termtop (keep=_topicid _termid _weight term);
MPRINT(TMT_MULTI_TERMS):   array topics{*} factor1-factor20;
MPRINT(TMT_MULTI_TERMS):   set _termmrg;
MPRINT(TMT_MULTI_TERMS):   _termid=key;
MPRINT(TMT_MULTI_TERMS):   if _ispar='+' then term='+'||term;
MPRINT(TMT_MULTI_TERMS):   do i=1 to 20;
MPRINT(TMT_MULTI_TERMS):   _topicid=i+1-1;
MPRINT(TMT_MULTI_TERMS):   _weight=round(topics{i},0.001);
MPRINT(TMT_MULTI_TERMS):   output;
MPRINT(TMT_MULTI_TERMS):   end;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 1076 observations read from the data set WORK._TERMMRG.
NOTE: The data set WORK.MULT_TERMTOP has 21520 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql noprint;
MPRINT(TMT_MULTI_TERMS):   create view _tmp_top_weights as select *, abs(_weight) as abs_weight from mult_termtop;
NOTE: SQL view WORK._TMP_TOP_WEIGHTS has been defined.
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc summary nway data=_tmp_top_weights;
MPRINT(TMT_MULTI_TERMS):   class _topicid;
MPRINT(TMT_MULTI_TERMS):   var _weight abs_weight;
MPRINT(TMT_MULTI_TERMS):   output out=_termtmpsums mean(abs_weight)=abs_weight_mean std(abs_weight)=abs_weight_std idgroup( max(_weight) out[5] (term)=) /autolabel autoname;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: There were 21520 observations read from the data set WORK._TMP_TOP_WEIGHTS.
NOTE: The data set WORK._TERMTMPSUMS has 20 observations and 10 variables.
NOTE: PROCEDURE SUMMARY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_topics(keep=_topicid _name _cat _displayCat _numterms _numdocs _docCutoff _termCutoff);
MPRINT(TMT_MULTI_TERMS):   set _termtmpsums;
MPRINT(TMT_MULTI_TERMS):   length _name $100;
MPRINT(TMT_MULTI_TERMS):   _name=ktrim(term_1)||','||ktrim(term_2)||','||ktrim(term_3)||','|| ktrim(term_4)||','||ktrim(term_5);
MPRINT(TMT_MULTI_TERMS):   _cat="Mult";
MPRINT(TMT_MULTI_TERMS):   _displayCat="rpt_text_topicmult_value";
MPRINT(TMT_MULTI_TERMS):   _termcutoff= round(abs_weight_mean+abs_weight_std*1,0.001) ;
MPRINT(TMT_MULTI_TERMS):   _docCutoff=.;
MPRINT(TMT_MULTI_TERMS):   _numterms=.;
MPRINT(TMT_MULTI_TERMS):   _numdocs=.;
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 20 observations read from the data set WORK._TERMTMPSUMS.
NOTE: The data set WORK.MULT_TOPICS has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   data mult_termtop;
MPRINT(TMT_MULTI_TERMS):   set mult_termtop(drop=term);
MPRINT(TMT_MULTI_TERMS):   run;
 
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: The data set WORK.MULT_TERMTOP has 21520 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_MULTI_TERMS):   proc sql;
MPRINT(TMT_MULTI_TERMS):   create table kpTops as select distinct a._topicid as _topicid0 from mult_topics a, mult_termtop b where a._topicid=b._topicid and abs(b._weight) >= a._termcutoff and b._termid ne .;
NOTE: Table WORK.KPTOPS created, with 20 rows and 1 columns.
 
MPRINT(TMT_MULTI_TERMS):   alter table kpTops add _topicid num;
NOTE: Table WORK.KPTOPS has been modified, with 2 columns.
MPRINT(TMT_MULTI_TERMS):   update kpTops set _topicid=monotonic()+1-1;
NOTE: 20 rows were updated in WORK.KPTOPS.
 
MPRINT(TMT_MULTI_TERMS):   create table mult_topics(drop=_topicid0) as select b._topicid, a.* from mult_topics(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK.MULT_TOPICS created, with 20 rows and 8 columns.
 
MPRINT(TMT_MULTI_TERMS):   create table mult_termtop(drop=_topicid0) as select a._termid, b._topicid, a._weight from mult_termtop(rename=(_topicid=_topicid0)) a, kpTops b where a._topicid0=b._topicid0;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: The variable _topicid0 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: Table WORK.MULT_TERMTOP created, with 21520 rows and 3 columns.
 
MPRINT(TMT_MULTI_TERMS):   drop table kpTops;
NOTE: Table WORK.KPTOPS has been dropped.
MPRINT(TMT_MULTI_TERMS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select count(*) into :tmt_act_multi from mult_topics;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.MULT_TOPICS has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_termtop nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.MULT_TERMTOP has 21520 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab20 from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_DOC_SCORE):   data multdocs (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) mult_topics (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set mult_topics mult_termtop;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "mult_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.first();
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _numterms=0;
MPRINT(TMT_DOC_SCORE):   _numdocs=0;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_termtop end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _numterms+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:20} TextTopic_raw1-TextTopic_raw20;
MPRINT(TMT_DOC_SCORE):   format TextTopic_raw1-TextTopic_raw20 5.3;
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic_raw1" ,"TextTopic_raw2" ,"TextTopic_raw3" ,"TextTopic_raw4" ,"TextTopic_raw5" ,"TextTopic_raw6" ,"TextTopic_raw7" ,"TextTopic_raw8" ,"TextTopic_raw9" ,"TextTopic_raw10"
,"TextTopic_raw11" ,"TextTopic_raw12" ,"TextTopic_raw13" ,"TextTopic_raw14" ,"TextTopic_raw15" ,"TextTopic_raw16" ,"TextTopic_raw17" ,"TextTopic_raw18" ,"TextTopic_raw19" ,"TextTopic_raw20" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS3.TextTopic_tmout_normalized end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set _userdocs end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   _numdocs=_numdocs+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output multdocs;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_topics end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_topic_hash.find();
MPRINT(TMT_DOC_SCORE):   output mult_topics;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: The data set WORK.DOCDS has 3047 observations and 21 variables.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: There were 4400 observations read from the data set WORK._USERDOCS.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: The data set WORK.MULTDOCS has 4400 observations and 27 variables.
NOTE: The data set WORK.MULT_TOPICS has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data _doc_tmp_sums (keep=_doccutoff _mean_ _std_ _ssi_ _ndoc_ _topicid);
MPRINT(TRAIN):   array vals{20} TextTopic_raw1 -TextTopic_raw20;
MPRINT(TRAIN):   array sums{20} _temporary_ (20*0);
MPRINT(TRAIN):   array ss{20} _temporary_ (20*0);
MPRINT(TRAIN):   _ndoc_=0;
MPRINT(TRAIN):   do until(eof);
MPRINT(TRAIN):   set multdocs end=eof;
MPRINT(TRAIN):   _ndoc_=_ndoc_+1;
MPRINT(TRAIN):   do i=1 to 20;
MPRINT(TRAIN):   sums{i}=sums{i}+abs(vals{i});
MPRINT(TRAIN):   ss{i}=ss{i}+abs(vals{i})**2;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   do i=1 to 20;
MPRINT(TRAIN):   _mean_=sums{i}/_ndoc_;
MPRINT(TRAIN):   _std_=sqrt((ss{i} - _ndoc_*_mean_*_mean_)/(_ndoc_-1));
MPRINT(TRAIN):   _doccutoff=round(_mean_+_std_,.001);
MPRINT(TRAIN):   _topicid=i+1-1;
MPRINT(TRAIN):   _ssi_=ss{i};
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   end;
 
NOTE: There were 4400 observations read from the data set WORK.MULTDOCS.
NOTE: The data set WORK._DOC_TMP_SUMS has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   create table mult_topics as select a._topicid, _name, _cat, _numterms, _numdocs, _termCutoff, b._doccutoff from mult_topics as a, _doc_tmp_sums as b where a._topicid=b._topicid;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
NOTE: Table WORK.MULT_TOPICS created, with 20 rows and 7 columns.
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
 
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.MULT_TOPICS has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=mult_termtop nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab20 from mult_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   data multdocs (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) mult_topics (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set mult_topics mult_termtop;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "mult_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.first();
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _numterms=0;
MPRINT(TMT_DOC_SCORE):   _numdocs=0;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   rc=_it_topic.next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_termtop end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _numterms+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:20} TextTopic_raw1-TextTopic_raw20;
MPRINT(TMT_DOC_SCORE):   format TextTopic_raw1-TextTopic_raw20 5.3;
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic_raw1" ,"TextTopic_raw2" ,"TextTopic_raw3" ,"TextTopic_raw4" ,"TextTopic_raw5" ,"TextTopic_raw6" ,"TextTopic_raw7" ,"TextTopic_raw8" ,"TextTopic_raw9" ,"TextTopic_raw10"
,"TextTopic_raw11" ,"TextTopic_raw12" ,"TextTopic_raw13" ,"TextTopic_raw14" ,"TextTopic_raw15" ,"TextTopic_raw16" ,"TextTopic_raw17" ,"TextTopic_raw18" ,"TextTopic_raw19" ,"TextTopic_raw20" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS3.TextTopic_tmout_normalized end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set _userdocs end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   _numdocs=_numdocs+1;
MPRINT(TMT_DOC_SCORE):   _topic_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output multdocs;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set mult_topics end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_topic_hash.find();
MPRINT(TMT_DOC_SCORE):   output mult_topics;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
WARNING: The variable _displaycat in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable _displaycat in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: The data set WORK.DOCDS has 3047 observations and 21 variables.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: There were 4400 observations read from the data set WORK._USERDOCS.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: The data set WORK.MULTDOCS has 4400 observations and 27 variables.
NOTE: The data set WORK.MULT_TOPICS has 20 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS3.TextTopic_topics;
MPRINT(TRAIN):   set EMWS3.TextTopic_topics mult_topics;
MPRINT(TRAIN):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: There were 20 observations read from the data set WORK.MULT_TOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS3.TextTopic_termtopics;
MPRINT(TRAIN):   set EMWS3.TextTopic_termtopics mult_termtop;
MPRINT(TRAIN):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: There were 21520 observations read from the data set WORK.MULT_TERMTOP.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 21520 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS3.TextTopic_topics;
MPRINT(TRAIN):   by _topicid;
MPRINT(TRAIN):   run;
 
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS3.TextTopic_topics;
MPRINT(TRAIN):   length _displayCat $16;
MPRINT(TRAIN):   set EMWS3.TextTopic_topics;
MPRINT(TRAIN):   label _topicid = "Topic ID";
MPRINT(TRAIN):   label _name = "Topic";
MPRINT(TRAIN):   * label _apply = "%sysfunc(sasmsg(sashelp.tmine, rpt_text_apply_vlabel, NOQUOTE))";
MPRINT(TRAIN):   label _doccutoff = "Document Cutoff";
MPRINT(TRAIN):   label _termcutoff = "Term Cutoff";
MPRINT(TRAIN):   label _numterms = "Number of Terms";
MPRINT(TRAIN):   label _numdocs = "# Docs";
MPRINT(TRAIN):   label _displayCat = "Category";
MPRINT(TRAIN):   select(ksubstr(_cat,1,1));
MPRINT(TRAIN):   when('S') _displayCat = "Single";
MPRINT(TRAIN):   when('M') _displayCat = "Multiple";
MPRINT(TRAIN):   when('U') _displayCat = "User";
MPRINT(TRAIN):   otherwise;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 20 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   quit;
MPRINT(TRAIN):   * Set some of the data specific issues for TM_CLIENT_SETTINGS;
MPRINT(TRAIN):   * save out the metadata on the docs table ;
MPRINT(TRAIN):   proc contents data=EMWS3.TextTopic_docDs out=work._docs_contents noprint;
MPRINT(TRAIN):   run;
 
NOTE: The data set WORK._DOCS_CONTENTS has 7 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   * get a list of the variables ;
MPRINT(TRAIN):   proc sql noprint;
MPRINT(TRAIN):   select name into :docs_view_variables separated by ' ' from work._docs_contents where name not like 'TextTopic%' and klowcase(name) ne "_document_" and kupcase(name) ne
MPRINT(TRAIN):   "REVIEW";
MPRINT(TRAIN):   * get a count of the variables ;
MPRINT(TRAIN):   select count(*) into :docs_nobs from EMWS3.TextTopic_docDs;
MPRINT(TRAIN):   * delete our temp table ;
MPRINT(TRAIN):   drop table work._docs_contents;
NOTE: Table WORK._DOCS_CONTENTS has been dropped.
MPRINT(TRAIN):   * get a count of the variables ;
MPRINT(TRAIN):   select count(*) into :terms_nobs from EMWS3.TextTopic_weightedterms;
MPRINT(TRAIN):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   * add the parseVar back in as the first field ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc sort data=EMWS3.TextTopic_tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: There were 13 observations read from the data set EMWS3.TEXTTOPIC_TM_CLIENT_SETTINGS.
NOTE: The data set EMWS3.TEXTTOPIC_TM_CLIENT_SETTINGS has 13 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data work.tm_client_settings;
MPRINT(TRAIN):   length viewer $80 key $80 value $32000;
MPRINT(TRAIN):   * document table ;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "    4400";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "viewvariables";
MPRINT(TRAIN):   value = "topic_weight review VAR1 id location restaurant_name review_date";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   viewer = "DOCUMENTS";
MPRINT(TRAIN):   key = "parseVariable";
MPRINT(TRAIN):   value="review                          ";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   * terms table ;
MPRINT(TRAIN):   viewer = "TERMS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "    1076";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   * augTopics table ;
MPRINT(TRAIN):   viewer = "TOPICS";
MPRINT(TRAIN):   key = "nobs";
MPRINT(TRAIN):   value = "20";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set WORK.TM_CLIENT_SETTINGS has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=work.tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: There were 5 observations read from the data set WORK.TM_CLIENT_SETTINGS.
NOTE: The data set WORK.TM_CLIENT_SETTINGS has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS3.TextTopic_tm_client_settings;
MPRINT(TRAIN):   merge EMWS3.TextTopic_tm_client_settings work.tm_client_settings;
MPRINT(TRAIN):   by VIEWER KEY;
MPRINT(TRAIN):   run;
 
NOTE: There were 13 observations read from the data set EMWS3.TEXTTOPIC_TM_CLIENT_SETTINGS.
NOTE: There were 5 observations read from the data set WORK.TM_CLIENT_SETTINGS.
NOTE: The data set EMWS3.TEXTTOPIC_TM_CLIENT_SETTINGS has 13 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc datasets nolist nodetails lib=work;
MPRINT(TRAIN):   delete tm_client_settings;
MPRINT(TRAIN):   run;
 
NOTE: Deleting WORK.TM_CLIENT_SETTINGS (memtype=DATA).
MPRINT(TRAIN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   * add the info to EMINFO to forward on to other nodes ;
MPRINT(TRAIN):   data EMWS3.TextTopic_EMINFO;
MPRINT(TRAIN):   length TARGET KEY $32 DATA $43;
MPRINT(TRAIN):   target = " ";
MPRINT(TRAIN):   key="LastTMNode";
MPRINT(TRAIN):   data="TextTopic";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTMNodeType";
MPRINT(TRAIN):   data="TextTopic";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="LastTopic";
MPRINT(TRAIN):   data="TextTopic";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="tm_topic_dataset";
MPRINT(TRAIN):   data="";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   key="PRESCORECODE";
MPRINT(TRAIN):   data="TextTopic";
MPRINT(TRAIN):   output;
MPRINT(TRAIN):   run;
 
NOTE: The data set EMWS3.TEXTTOPIC_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: TextTopic;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34776      *------------------------------------------------------------*;
34777      * End TRAIN: TextTopic;
34778      *------------------------------------------------------------*;
34779
 
34780      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34781      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
34782      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34783      ;
MPRINT(EM_DIAGRAM):   ;
34784      ;
MPRINT(EM_DIAGRAM):   ;
34785      ;
MPRINT(EM_DIAGRAM):   ;
34786      ;
MPRINT(EM_DIAGRAM):   ;
34787      quit;
MPRINT(EM_DIAGRAM):   quit;
34788      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34789      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
34790      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34791      /*; *"; *'; */
34792      ;
MPRINT(EM_DIAGRAM):   ;
34793      run;
MPRINT(EM_DIAGRAM):   run;
34794      quit;
MPRINT(EM_DIAGRAM):   quit;
34795      /* Reset EM Options */
34796      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
34797      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
34798      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:54:55" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                January 16, 2022
Time:                17:54:55
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3T0GRQD "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3T0GRQD new;
MPRINT(EM_DIAGRAM):   run;
34900      %let EMEXCEPTIONSTRING=;
34901      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34902      * SCORE: TextTopic;
MPRINT(EM_DIAGRAM):   * SCORE: TextTopic;
34903      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34904      %let EM_ACTION = SCORE;
34905      %let syscc = 0;
34906      %macro main;
34907          %if %upcase(&EM_ACTION) = CREATE %then %do;
34908              filename temp catalog 'sashelp.emtxtext.topic_create.source';
34909              %include temp;
34910              %create;
34911          %end;
34912          %if %upcase(&EM_ACTION) = TRAIN %then %do;
34913              filename temp catalog 'sashelp.emtxtext.topic_train.source';
34914              %include temp;
34915              %train;
34916          %end;
34917         %if %upcase(&EM_ACTION) = SCORE %then %do;
34918              filename temp catalog 'sashelp.emtxtext.topic_score.source';
34919              %include temp;
34920              %score;
34921          %end;
34922          %if %upcase(&EM_ACTION) = REPORT %then %do;
34923              filename temp catalog 'sashelp.emtxtext.topic_report.source';
34924              %include temp;
34925              %report;
34926          %end;
34927      %mend main;
34928
34929      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TOPIC_SCORE.SOURCE.
34930     +/* ****************************************************************
34931     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
34932     + *
34933     + * Name:             topic_score.sas
34934     + * Support:          cox  James A. Cox
34935     + * Product:          SAS Text Miner
34936     + * Language:         Sas
34937     + * Script:
34938     + *
34939     + * Usage:
34940     + *
34941     + * Purpose:  Implements Score action for Text Topic Node.
34942     + *
34943     + * History:
34944     + * 26May09 Initial Coding [cox]
34945     + *
34946     + * Notes:
34947     + *
34948     + * Last Modified By:
34949     + * Last Modified On: Thu Sep 11 15:28:20 2014
34950     + *
34951     + * End
34952     + * ************************************************************** */
34953     +%macro tmt_score(import=,export=,import_out=,termds=,weighttermds=,topics=,termtopics=,
34954     +                 export_out=, export_trans=,
34955     +                 config_ds=, parsevar=, em_norm_out=,col_sum_ds=&em_user_term_sums,
34956     +                 cellwgt=LOG);
34957     +   %if &import ne %then %do;
34958     +      %if &em_norm_out ne %then %do; data &export_out; set &em_norm_out; run; %end;
34959     +      %else %do;
34961     +         /* If no filter node input */
34962     +         %if &import_out =  %then %do;
34963     +            data _tmpdocs;
34964     +            set &import;
34965     +            _document_=_n_;
34966     +            rc=tgscore(&parsevar,"&config_ds","&termds","work.top_tmp_out",0,0);
34967     +            drop rc;
34968     +            run;
34969     +            %let import=_tmpdocs;
34970     +            %let import_out=work.top_tmp_out;
34971     +            %end;
34973     +         %let syscc=0;
34974     +         /* First, weight output data set */
34975     +         proc tmutil data=&import_out key=&termds;
34976     +         control init release;
34977     +         weight cellwgt=&cellwgt in_weight=&weighttermds(keep=key weight);
34978     +         output out=work._weighted_tmout;
34979     +         run;
34981     +       %if &tmm_norm_pivot ne 0 %then %do;
34982     +         %row_pivot_normalize(transds=work._weighted_tmout, outtransds=&export_out,
34983     +                              col_sumds=work._termsumds,
34984     +                              row=_document_,col=_termnum_,entry=_count_, pivot=&tmm_norm_pivot,
34985     +                              tmt_config=&config_ds,
34986     +                              tmt_train=0, prefix=&EM_NODEID.);
34987     +         %let col_sum_ds=work._termsumds;
34988     +          %end;
34989     +       %else %do;
34990     +          data &export_out; set work._weightedtmout; run;
34991     +          %end;
34992     +         %end;
34993     +      %tmt_doc_score(termtopds=&termtopics, docds=&import, outds=&export_out, topicds=&topics,
34994     +                    newdocds=&export, scoring=yes, termsumds=&col_sum_ds, prefix=&EM_NODEID._,
34995     +                    pivot=&tmm_norm_pivot);
34996     +      proc sql noprint;
34997     +      create view &export_trans as
34998     +       select ktrim(term) || '|' || role as _item_, b.*
34999     +       from &weighttermds as a, &em_user_weightedtmout as b /*S1120236:  use &em_user_weightedtmout including unormalized _count_ instead of &export_out including normalized _count_*/
35000     +       where b._termnum_=a.key and a._ispar ne '.'
35001     +       order by b._termnum_, b._document_ ;
35002     +            quit;
35004     +         %end;
35006     +%mend;
35008     +%macro score;
35009     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
35010     +    %global last_parse_node last_filter_node last_prescore_node server_err
35011     +      parsevar EM_SASMSG;
35012     +   %let EM_SASMSG=TMINE;
35013     +   %let syscc=0;
35017     +   /*use saved version of em_info in case macro is not populated*/
35018     +   %em_getname(key=last_tm_nodes, type=data);
35020     +    filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
35021     +    %include temp;
35022     +    %tm_get_last_filter(eminfo=&em_user_last_tm_nodes,em_lib=&em_lib,
35023     +                        em_variableset=&em_data_variableset);
35024     +    %if &EMEXCEPTIONSTRING ne %then %goto end_topic_score;
35025     +    %let lastparsenode=&last_parse_node;
35026     +    %let lastfilternode=&last_filter_node;
35027     +    %let lastprescore=&last_prescore_node;
35028     +    %let filt_node=;
35029     +    %if &lastfilternode ne &lastparsenode %then %do;
35030     +        %let filt_node=Y;
35031     +    %end;
35033     +   * options mstored sasmstore=sashelp;
35035     +    filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
35036     +    %include temp;
35038     +    filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
35039     +    %include temp;
35040     +    filename temp catalog 'sashelp.emtxtext.tm_parse_score.source';
35041     +    %include temp;
35042     +    filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
35043     +    %include temp;
35045     +    %em_getname(key=terms,            type=data);
35046     +    %em_getname(key=topics,           type=data);
35047     +    %em_getname(key=termtopics,       type=data);
35048     +    %em_getname(key=weightedterms,    type=data);
35049     +    %em_getname(key=weightedtmout,    type=data);
35050     +   %em_getname(key=tmout_normalized, type=data);
35051     +   %em_getname(key=term_sums,        type=data);
35052     +    %em_checkmacro(name=tmm_norm_pivot,      global=Y, value=.7);
35053     +  %if &tmm_norm_pivot<0 or &tmm_norm_pivot>1 %then %let tmm_norm_pivot=0.7;
35054     +   %em_getname(key=repTopics, type=data);
35056     +   /* Update topics to include translated cats */
35057     +   /* If old topic node that has reptopics as a view, delete it
35058     +      (em_report doesn't link views between tables and graphs)
35059     +    */
35060     +   %if %sysfunc(exist(&em_user_reptopics,VIEW)) %then %do;
35061     +      proc sql noprint; drop view &em_user_reptopics; quit;
35062     +      %end;
35064     +   /* Translate cat values to _displayCats for reptopics */
35065     +   data &em_user_reptopics(drop=_cat);
35066     +       set &em_user_topics;
35067     +       label _displayCat  = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_category_vlabel, NOQUOTE))";
35068     +       select(ksubstr(_cat,1,1));
35069     +          when('S') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicsingle_value, NOQUOTE))";
35070     +          when('M') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicmulti_value, NOQUOTE))";
35071     +          when('U') _displayCat = "%sysfunc(sasmsg(sashelp.tmine,  rpt_text_topicuser_value, NOQUOTE))";
35072     +          otherwise;
35073     +          end;
35074     +       run;
35076     +      /* Check to see if previous filter node had a weight for terms, or whether
35077     +          it had to be created in this node */
35078     +      %let isweight = 0;
35079     +      %let dsid=%sysfunc(open(%str(&em_lib..&lastfilternode._terms)));
35080     +      %if &dsid gt 0 %then %do;
35081     +         %let isweight =%sysfunc(varnum(&dsid, weight));
35082     +         %let rc=%sysfunc(close(&dsid));
35083     +         %end;
35085     +    data _null_;
35086     +         cellwgt="LOG";
35087     +         set &em_lib..&lastfilternode._tmconfig;
35088     +         call symput('cellwgt',cellwgt);
35089     +         run;
35091     +      /* If no weights passed in, create work._termview to contain weights, (commented
35092     +         out) */
35093     +      %if "&isweight" eq "0" %then %do;
35094     +         proc sql noprint;
35095     +         create table work._termview as
35096     +            select a.weight, b.*
35097     +            from &em_user_terms as a, &em_lib..&lastfilternode._terms as b
35098     +            where a.key=b.key and a.parent = b.parent;
35099     +               quit;
35100     +         proc datasets nolist nodetails;
35101     +               modify _termview;
35102     +               index create both=(term role);
35103     +               run;
35104     +               quit;
35105     +         %let score_terms=work._termview;
35106     +      %end;
35107     +      %else %let score_terms=&em_lib..&lastfilternode._terms;;
35108     +    %em_getname(key=weightedterms, type=data);
35110     +      /* Use only the termtopics rows that exceed the current _termcutoff */
35111     +         proc sql noprint;
35112     +         create table work._termtopics as
35113     +            select a.* from &em_user_termtopics as a, &em_user_topics as b
35114     +            where a._topicid=b._topicid and abs(_weight)>=_termCutoff
35115     +              /* and _apply='Y' */;
35116     +        select parsevar into :_tm_parseVar from &EM_LIB..&lastfilternode._tmconfig;
35117     +               quit;
35119     +           %em_getname(key=tmout, type=data);
35120     +           %em_getname(key=validout, type=data);
35121     +           %em_getname(key=testout, type=data);
35123     +           %em_getname(key=valid_trans, type=data);
35124     +           %em_getname(key=test_trans, type=data);
35126     +      /* Now do flow scoring for train, test, and validate tables, including exporting
35127     +       a transaction table for the training data */
35128     +      %tmt_score(import=&em_import_data,export=&em_export_train,
35129     +                 /* %if &filt_node ne %then */ import_out=&EM_LIB..&lastfilternode._tmout,
35130     +                 termds=&score_terms,topics=&em_user_topics,
35131     +                 weighttermds=&em_user_weightedterms,
35132     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
35133     +                 termtopics=work._termtopics,
35134     +                 parsevar=&_tm_parsevar,
35135     +                 export_out=&em_user_tmout,export_trans=&em_export_transaction,
35136     +                 cellwgt=&cellwgt
35137     +                 , em_norm_out   = &em_user_tmout_normalized,
35138     +                 col_sum_ds=&em_user_term_sums);
35139     +      %tmt_score(import=&em_import_validate,export=&em_export_validate,
35140     +                 %if &filt_node ne %then import_out=&EM_LIB..&lastfilternode._validout,;
35141     +                 termds=&score_terms,topics=&em_user_topics,
35142     +                 weighttermds=&em_user_weightedterms,
35143     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
35144     +                 termtopics=work._termtopics,
35145     +                 parsevar=&_tm_parsevar,
35146     +                 cellwgt=&cellwgt,
35147     +                 export_out=&EM_LIB..&EM_NODEID._validout,
35148     +                 export_trans=&em_user_valid_trans);
35149     +      %tmt_score(import=&em_import_test,export=&em_export_test,
35150     +                 %if &filt_node ne %then import_out=&EM_LIB..&lastfilternode._testout,;
35151     +                 termds=&score_terms,topics=&em_user_topics,
35152     +                 weighttermds=&em_user_weightedterms,
35153     +                 config_ds=&EM_LIB..&lastfilternode._tmconfig,
35154     +                 termtopics=work._termtopics,
35155     +                 parsevar=&_tm_parsevar,
35156     +                 cellwgt=&cellwgt,
35157     +                 export_out=&EM_LIB..&EM_NODEID._testout,
35158     +                 export_trans=&em_user_test_trans);
35160     +      /* Set up appropriate metadata of training table */
35161     +      filename _meta "&EM_FILE_CDELTA_TRAIN";
35162     +      data _null_;
35163     +         file _meta;
35164     +         put 'if CREATOR = "&EM_NODEID" and upcase(NAME) =: upcase("&EM_NODEID") then do;';
35165     +         put '   if upcase(NAME) =: upcase("&EM_NODEID._RAW") then do;';
35166     +         put '      ROLE="INPUT";';
35167     +         put '      LEVEL="INTERVAL";';
35168     +         put '      end;';
35169     +         put '   else do;';
35170     +         put '      ROLE="SEGMENT";';
35171     +         put '      LEVEL="BINARY";';
35172     +         put '      end;';
35173     +         put '   end;';
35174     +         put '   if upcase(NAME) = "_DOCUMENT_" then do;';
35175     +         put '      ROLE="ID";';
35176     +         put '      LEVEL="NOMINAL";';
35177     +         put '      end;';
35178     +      run;
35179     +      filename _meta;
35181     +      /* Set up appropriate metadata on output transaction table */
35182     +      filename _meta "&EM_FILE_CDELTA_TRANSACTION";
35183     +      data _null_;
35184     +         file _meta;
35185     +         put 'if upcase(NAME)="_DOCUMENT_" then do;';
35186     +         put '   ROLE="ID";';
35187     +         put '   LEVEL="NOMINAL";';
35188     +         put 'end;';
35189     +         put 'if upcase(NAME)="_ITEM_" then do;';
35190     +         put '   ROLE="TARGET";';
35191     +         put '   LEVEL="NOMINAL";';
35192     +         put 'end;';
35193     +         put 'if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;';
35194     +         put '   ROLE="REJECTED";';
35195     +         put 'end;';
35196     +      run;
35197     +      filename _meta;
35200     +      /* Retrieve path of Diagram */
35201     +      data _null_;
35202     +         call symput("emwspath", strip(pathname("&em_lib")));
35203     +      run;
35205     +     /* Following calculates all prescore code for Text Topic Node */
35206     +     /* Prescorecode of previous Text Mining Node */
35207     +     %em_getname(key=PRESCORECODE, type=file, extension=sas);
35209     +    filename topicpre "&EM_USER_prescorecode";
35210     +    data _null_;
35211     +           file topicpre;
35212     +           put 'filename temp catalog "sashelp.emtxtext.tmt_doc_score.source";';
35213     +           put '%include temp;';
35214     +           put 'filename temp catalog "sashelp.emtxtext.row_pivot_normalize.source";';
35215     +           put '%include temp;';
35216     +           put 'filename temp;';
35217     +           run;
35218     +     %if &lastprescore ne %then %do;
35219     +        %let tmprescoreFile = %bquote(&emwspath)&em_dsep&lastprescore&em_dsep.PRESCORECODE.sas;
35221     +        filename tmpre    "&tmprescoreFile";
35222     +        %em_copyfile(infref=tmpre, outfref=topicpre, append=Y);
35223     +        filename tmpre;
35224     +        %end;
35226     +    /* interactive view close
35227     +     %if %eval(&syscc)>4 %then %do;
35228     +         %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
35229     +         %goto end_topic_score;
35231     +     %end;*/
35234     +     %if not %symexist(em_term_loc) %then %do;
35235     +        /* If em_term_loc is not specified, we use existing datasets in EMWS project folder for scoring*/
35236     +       %let emtermloc_exists = 0;
35237     +       %let em_term_loc = %bquote(%sysfunc(pathname(&EM_LIB)));
35238     +       libname termloc "&em_term_loc";
35240     +       /* If no weights passed in, we copy work._termview to termloc.&EM_NODEID._termview that contain weights*/
35241     +       /* score_termds refer to terms data set used for the tm_parse_score macro in some cases (e.g., text filter was not previously used). scored_terms refer to a terms data set to score for this Text Topic node*/
35242     +       %if "&isweight" eq "0" %then %do;
35243     +           data termloc.&EM_NODEID._termview;
35244     +              set work._termview;
35245     +           run;
35246     +           %let score_termds =termloc.&EM_NODEID._termview;
35247     +       %end;
35248     +        %else %do;
35249     +              %if &lastfilternode = &lastparsenode %then %do;
35250     +               /* When _filtterms do not exist*/
35251     +              data termloc.&lastfilternode._filtterms;
35252     +              set &EM_LIB..&lastfilternode._terms;
35253     +             run;
35254     +            %end;
35255     +            %let score_termds =termloc.&lastfilternode._filtterms;
35256     +       %end;
35258     +       %let scored_config =  termloc.&lastfilternode._tmconfig;
35259     +       %let scored_multids = termloc.&lastparsenode._multiall;
35260     +       %let scored_topics = termloc.&EM_NODEID._topics;
35261     +       %let scored_termtopics = termloc.&EM_NODEID._termtopics  ;
35263     +   %end;
35265     +    %else %do;
35266     +     /* If em_term_loc is not specified, we write existing datasets in EMWS project folder to an external directory specified by em_term_loc location for scoring*/
35267     +       %let emtermloc_exists = 1;
35268     +       libname termloc "&em_term_loc";
35270     +        %if %sysfunc(libref(termloc)) ne 0 %then %do;
35271     +        %let  EMEXCEPTIONSTRING = EMTOOL.EMTERMLOC,&em_term_loc;
35272     +        %goto end_topic_score;
35273     +        %end;
35275     +       /* If no weights passed in, we copy work._termview to termloc.&EM_LIB._&EM_NODEID._termview that contain weights*/
35276     +      /* score_termds refer to terms data set used for the tm_parse_score macro in some cases (e.g., text filter was not previously used). scored_terms refer to a terms data set to score for this Text Topic node*/
35277     +        %if "&isweight" eq "0" %then %do;
35278     +           data termloc.&EM_LIB._&EM_NODEID._termview;
35279     +              set work._termview;
35280     +           run;
35281     +           %let score_termds =termloc.&EM_LIB._&EM_NODEID._termview;
35282     +        %end;
35283     +        %else %do;
35284     +             %if &lastfilternode = &lastparsenode %then %do;
35285     +               /* When _filtterms do not exist*/
35286     +              data termloc.&EM_LIB._&lastfilternode._filtterms;
35287     +              set &EM_LIB..&lastfilternode._terms;
35288     +             run;
35289     +            %end;
35290     +            %let score_termds =termloc.&EM_LIB._&lastfilternode._filtterms;
35291     +        %end;
35293     +       data termloc.&EM_LIB._&EM_NODEID._topics;
35294     +           set &em_user_topics;
35295     +       run;
35297     +       data termloc.&EM_LIB._&EM_NODEID._termtopics;
35298     +           set &em_user_termtopics;
35299     +       run;
35301     +       /* tmconfig needs to be updated with a new weight setting*/
35302     +       data termloc.&EM_LIB._&lastfilternode._tmconfig;
35303     +           set  &EM_LIB..&lastfilternode._tmconfig;
35304     +        run;
35306     +        %if &lastfilternode = &lastparsenode %then %do;
35307     +              %if %sysfunc(exist(&EM_LIB..&lastparsenode._multiall))  %then %do;
35308     +                 data termloc.&EM_LIB._&lastparsenode._multiall;
35309     +                   set &EM_LIB..&lastparsenode._multiall;
35310     +                 run;
35311     +            %end;
35312     +        %end;
35314     +       %let scored_config = termloc.&EM_LIB._&lastfilternode._tmconfig;
35315     +       %let scored_multids = termloc.&EM_LIB._&lastparsenode._multiall;
35316     +       %let scored_topics = termloc.&EM_LIB._&EM_NODEID._topics;
35317     +       %let scored_termtopics = termloc.&EM_LIB._&EM_NODEID._termtopics;
35319     +   %end;
35321     +      %if &lastfilternode = &lastparsenode %then %do;
35322     +        %tm_parse_score(nodeid=&EM_NODEID,termds=&score_termds,
35323     +                        configds=&scored_config,
35324     +                        multids=&scored_multids,
35325     +                        outds=&EM_NODEID._out,
35326     +                        prefile=&em_user_PRESCORECODE,
35327     +                        scorefile=&EM_FILE_EMPUBLISHSCORECODE);
35328     +              %let scored_terms = &score_termds;
35329     +              %let scored_out=&EM_NODEID._out;
35330     +              %let _score_append=mod;
35331     +        %end;
35332     +     %else %do;
35333     +              %if (&emtermloc_exists=0) %then %do;
35334     +                  %let scored_terms = termloc.&lastfilternode._filtterms;
35335     +              %end;
35336     +              %else %if (&emtermloc_exists=1) %then %do;
35337     +                  %let scored_terms = termloc.&EM_LIB._&lastfilternode._filtterms;
35338     +              %end;
35339     +              %let scored_out=work.&lastfilternode._out;
35340     +              %let _score_append=;
35341     +     %end;
35343     +     %let syscc=0;
35344     +     filename topicpre;
35346     +     filename _tpcscr "&EM_FILE_EMPUBLISHSCORECODE";
35347     +     data _null_;
35348     +        file _tpcscr &_score_append;
35350     +        %let tmoutweighted = TMOUT_WEIGHTED;
35351     +        put '/* First we create a Weighted TMOUT Data Set based on weighted terms*/';
35352     +        put "proc tmutil data=&scored_out key=&scored_terms;";
35353     +        put "control init release;";
35354     +        put  "weight cellwgt=&cellwgt in_weight=&scored_terms (keep=key weight);";
35355     +        put "output out=work._weighted_tmout;"/;
35357     +        put '%row_pivot_normalize(transds=work._weighted_tmout, outtransds=WORK.TMOUTNORM,';
35358     +        put '      col_sumds=work._termsumds,row=_document_,col=_termnum_,entry=_count_,';
35359     +        put "      pivot=&tmm_norm_pivot,tmt_config=&scored_config,tmt_train=0,prefix=&em_nodeid.);"/;
35361     +        put '/*initialize topics and termtopics datasets in case they do not exist (0 topics case)*/';
35362     +        put '%macro tmt_check_topics_exist;';
35363     +        put '%if(^%sysfunc(exist('"&scored_topics"'))) %then %do;';
35364     +        put '   proc sql noprint; create table '"&scored_topics";
35365     +        put '   (_topicid decimal, _docCutoff decimal, _termCutoff decimal, _name char(1024), _cat char(4), /* _apply char(1), */ _numterms decimal, _numdocs decimal, _displayCat char(200) );';
35366     +        put '   quit;';
35367     +        put '%end;';
35368     +        put '%if(^%sysfunc(exist('"&scored_termtopics"'))) %then %do;';
35369     +        put '   proc sql noprint; create table '"&scored_termtopics";
35370     +        put '   (_topicid decimal, _weight decimal, _termid decimal);';
35371     +        put '   quit;';
35372     +        put '%end;';
35373     +        put '%mend tmt_check_topics_exist;';
35374     +        put '%tmt_check_topics_exist;';
35376     +        put "data work.&EM_NODEID._termtopics; set &scored_termtopics; run;";
35377     +        put "data work.&EM_NODEID._topics; set &scored_topics; run;";
35379     +        put '%'"tmt_doc_score(termtopds=work.&EM_NODEID._termtopics"', docds=&em_score_output,';
35380     +        put "outds=WORK.TMOUTNORM, topicds=work.&EM_NODEID._topics, newdocds=work._newdocds, scoring=yes,";
35382     +        put "termsumds=work._termsumds, prefix=&em_nodeid._,pivot=&tmm_norm_pivot);";
35383     +        put 'data &em_score_output; set work._newdocds;'; ;
35384     +     run;
35385     +     filename _tpcscr;
35388     +     %if %eval(&syscc)>4 %then %do;
35389     +       %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
35390     +     %end;
35392     +  %end_topic_score:
35394     +%if &tm_debug =0 %then %do;
35395     +proc sql;
35396     +   drop table _tmpdocs;
35397     +   drop table _termview ;
35398     +   drop table _termtopics;
35399     +   drop table top_tmp_out;
35400     +   drop table _weighted_tmout;
35401     +   drop table _termsumds;
35402     +   * drop table &EM_NODEID._filterset;
35403     +   * drop table &EM_NODEID._terms;
35404     +   * drop table &EM_NODEID._termtopics;
35405     +   * drop table &EM_NODEID._topics;
35406     +   drop table _i;
35407     +   drop table tmutil_memloc_i;
35408     +quit;
35409     +%end;
35412     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_get_last_filter.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GET_LAST_FILTER.SOURCE.
35413     +/* ****************************************************************
35414     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35415     + *
35416     + * Name:             tm_get_last_filter.sas
35417     + * Product:          SAS Text Miner
35418     + * Language:         Sas
35419     + * Script:
35420     + *
35421     + * Usage:
35422     + *
35423     + * Purpose:  macro to get the last filter node and the last parse node in the
35424     + *   diagram that corresponds to the current parse variable.  If there is no filter
35425     + *   node, the filter node is set to the last parse node.
35426     + *
35427     + *
35428     + *
35429     + * History:
35430     + * 14Aug09 Initial Coding
35431     + *
35432     + * Notes:
35433     + *    Returns an error in the following cases:
35434     + *      1. There is no preceding parse node.
35435     + *      2. There is no parse node with the current parse variable.
35436     + *
35437     + * Last Modified By:
35438     + * Last Modified On: Wed Sep 23 15:35:04 2009
35439     + *
35440     + * End
35441     + * ************************************************************** */
35442     +%macro tm_get_last_filter(eminfo=,em_lib=, em_variableset=);
35443     +   %let last_parse_node=;
35444     +   %let last_filter_node=;
35445     +   %let last_prescore_node=;
35446     +   %let server_err=;
35447     +   %let EMEXCEPTIONSTRING=;
35448     +   %let syscc=0;
35449     +
35450     +    /* verify that setinit for SAS Text Miner is currently active */
35451     +    %if %sysfunc(sysprod(PRODNUM107)) ne 1 %then %do;
35452     +       %let EMEXCEPTIONSTRING = EMTOOL.NOTMLICENSE;
35453     +        %goto end_macro;
35454     +        %end;
35455     +
35456     +
35457     +    * find last filter or text parse node if no filter node. ;
35458     +   %if %sysfunc(exist(&eminfo)) %then %do;
35459     +      proc sql noprint;
35460     +      select data into :last_parse_node from &eminfo where key="LastTextParsing";
35461     +         select data into :last_filter_node from &eminfo where key="LastTextFilter";
35462     +         select data into :last_prescore_node from &eminfo where kupcase(key)="PRESCORECODE";
35463     +      quit;
35464     +
35465     +   %end;
35466     +
35467     +   %if &last_parse_node= %then %do;
35468     +      %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGNODE;
35469     +      %goto end_macro;
35470     +      %end;
35471     +
35472     +   %else %if &last_filter_node= %then %let last_filter_node = %ktrim(&last_parse_node);
35473     +   %else %let last_filter_node = %ktrim(&last_filter_node);
35474     +   %let last_parse_node = %ktrim(&last_parse_node);
35475     +
35476     +   * Check to make sure parse variable is present and still exists;
35477     +   %let parsevar = ;
35478     +   proc sql noprint;
35479     +    select parsevar into :parsevar
35480     +    from &em_lib..&last_filter_node._tmconfig;
35481     +    quit;
35482     +
35483     +    *check for dropped parsevar on input dataset;
35484     +       %let parsevarOK= ;
35485     +       %let parsevarN=%kupcase(%ktrim(&parsevar));
35486     +       data _null_;
35487     +         set &em_variableset(where=(kupcase(NAME)="&parsevarN" and USE in('Y' 'D')));
35488     +         if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
35489     +         run;
35490     +       %if(&parsevarOK eq ) %then %do;
35491     +          %let EMEXCEPTIONSTRING = EMTOOL.NOPARSINGVAR;
35492     +          %goto end_macro;
35493     +          %end;
35494     +%end_macro:
35495     +
35496     +%mend tm_get_last_filter;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TM_GET_LAST_FILTER):   * find last filter or text parse node if no filter node. ;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select data into :last_parse_node from EMWS3.TextTopic_last_tm_nodes where key="LastTextParsing";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_filter_node from EMWS3.TextTopic_last_tm_nodes where key="LastTextFilter";
MPRINT(TM_GET_LAST_FILTER):   select data into :last_prescore_node from EMWS3.TextTopic_last_tm_nodes where kupcase(key)="PRESCORECODE";
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   * Check to make sure parse variable is present and still exists;
MPRINT(TM_GET_LAST_FILTER):   proc sql noprint;
MPRINT(TM_GET_LAST_FILTER):   select parsevar into :parsevar from EMWS3.TextFilter_tmconfig;
MPRINT(TM_GET_LAST_FILTER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TM_GET_LAST_FILTER):   *check for dropped parsevar on input dataset;
MPRINT(TM_GET_LAST_FILTER):   data _null_;
MPRINT(TM_GET_LAST_FILTER):   set EMWS3.TextTopic_VariableSet(where=(kupcase(NAME)="REVIEW" and USE in('Y' 'D')));
MPRINT(TM_GET_LAST_FILTER):   if (ROLE='TEXT' or ROLE='TEXTLOC') then call symput('parsevarOK', strip(ROLE));
MPRINT(TM_GET_LAST_FILTER):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTTOPIC_VARIABLESET.
      WHERE (KUPCASE(NAME)='REVIEW') and USE in ('D', 'Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   * options mstored sasmstore=sashelp;
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.row_pivot_normalize.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.ROW_PIVOT_NORMALIZE.SOURCE.
35497     +/* ****************************************************************
35498     + * Copyright (C) 1996 by SAS Institute Inc., Cary, NC 27513
35499     + *
35500     + * Name:             row_pivot_normalize_docs.sas
35501     + * Product:          SAS/GRAPH
35502     + * Language:         Sas
35503     + * Script:
35504     + *
35505     + * Usage:
35506     + *
35507     + * Purpose:          To output a new out table that is normalized so that each
35508     + *  row is normalized so "on average" the sums of squares of the _count_ is 1.
35509     + *
35510     + * History:
35511     + * 05May09 Initial Coding
35512     + *
35513     + * Notes:
35514     + *
35515     + * Last Modified By:
35516     + * Last Modified On: Thu Jan 06 17:08:35 2011
35517     + *
35518     + * End
35519     + * ************************************************************** */
35520     +%macro row_pivot_normalize(transds=,outtransds=,row=,col=,entry=,
35521     +                           col_sumds=, pivot=.5, tmt_config= , tmt_train=1, prefix=);
35523     +   /* Calculate sum of the squared entries for each row */
35524     +proc summary nway data=&transds;
35525     +   class &row;
35526     +   var &entry;
35527     +   output out=_sqrowvals uss=;
35528     +   run;
35530     +   /* Put into &meandiv what the average euclidean length is across rows */
35533     +%if &tmt_train = 1  %then %do;
35534     +   proc sql noprint;
35535     +      select mean(sqrt(&entry)) into :meaneuclen
35536     +      from _sqrowvals;
35537     +   quit;
35538     +   %if &tmt_config ne %then %do;
35539     +      *populate the config file with the mean value;
35540     +      data &tmt_config;
35541     +         set &tmt_config;
35542     +         &prefix._meaneuclen= symget('meaneuclen');
35543     +      run;
35544     +   %end;
35545     +    data _sqrowvals;
35546     +      set _sqrowvals;
35547     +      meaneuclen=symget('meaneuclen');
35548     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
35549     +      drop meaneuclen;
35550     +   run;
35553     +%end;
35554     +%else %do;
35555     +      * grab the mean value from the config file  and put into meaneuclien;
35556     +   data _null_;
35557     +      set &tmt_config;
35558     +      call symput('meaneuclen',&prefix._meaneuclen);
35559     +   run;
35560     +    data _sqrowvals;
35561     +      set _sqrowvals;
35562     +      meaneuclen=symget('meaneuclen');
35563     +      divisor = meaneuclen + (sqrt(&entry) - meaneuclen)*&pivot;
35564     +   run;
35566     +%end;
35571     +proc sql noprint;
35572     +   create table &outtransds as
35573     +      select a.&row,a.&col,a.&entry / divisor as &entry
35574     +      from &transds as a,_sqrowvals as b
35575     +      where a.&row=b.&row;
35576     +   drop table _sqrowvals;
35577     +         quit;
35578     +%if &col_sumds ne %then %do;
35579     +   proc summary nway data=&outtransds;
35580     +   class &col;
35581     +   var &entry;
35582     +   output out=&col_sumds mean=;
35583     +   run;
35584     +%end;
35585     +%mend row_pivot_normalize;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tmt_doc_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TMT_DOC_SCORE.SOURCE.
35586     +/* ****************************************************************
35587     + * Copyright (C) 2010 by SAS Institute Inc., Cary, NC 27513
35588     + *
35589     + * Name:             tmt_doc_score.sas
35590     + * Support:          cox  James A. Cox
35591     + * Product:          SAS Text Miner
35592     + * Language:         Sas
35593     + * Script:
35594     + *
35595     + * Usage:
35596     + *
35597     + * Purpose:  To score documents based on contents of a topic table (&topicds), a term-topic table
35598     + *      (&termtopds), and a weighted "out" table (&outds).  A topic weight is a weighted sum of the
35599     + *      term weights from the term-topic table  (_weight_) where such weight is above a minimum
35600     + *      _termcutoff,  multiplied by the weighted _count_ (_count_) from the weighted "out" table,
35601     + *      where such counts are the tfidf weighted counts.
35602     + *
35603     + *
35604     + * History:
35605     + * 01May09 Initial Coding [cox]
35606     + * 08Nov10 Changed to use hash tables [cox]
35607     + *
35608     + * Notes:
35609     + *   scoring=yes is passed in in topic_score.source for both flow and saved score code.
35610     + *       Otherwise, a blank value is passed in.
35611     + *   docds is blank only when called from the Topic Viewer, since the new document table does
35612     + *       not need to be recalculated until scoring time ( a view is actually displayed that joins
35613     + *        them in the Document table part).  So when scoring is nonblank, docds is
35614     + *       never non-blank.
35615     + *
35616     + *   This routine will score topics inclusive from the minimum topic number (computed internally as
35617     + *        &_mintopic) to the maximum topic number (computed as &_maxtopic) from the input topic data
35618     + *        set.
35619     + *
35620     + *
35621     + *   If &scoring is blank, then topic variables are created for each such topic as <nodename>_#.
35622     + *    For example, if the smallest topic number in topic table is 4 and the largest is 10, and the
35623     + *    nodename is "texttopic", then Texttopic_4-TextTopic10 will be created on the output &newdocds.
35624     + *    In this case, the topic table is updated for the variables _numterms and _numdocs to have the
35625     + *    number of terms and documents that exceed their "minimum" value as indicated on the topic ds.
35626     + *   If &scoring is nonblank, the same variables will contain either 1 (if the weighted sum >=
35627     + *    _docCutoff) or 0 (if it is not).  In this case, variables including a raw suffix will indicate
35628     + *   the raw values as calculated above (e.g. texttopic_raw4-texttopic_raw10).  Also, the topic ds
35629     + *    is NOT updated when scoring.
35630     + *
35631     + *   If docds is passed in, then all variables are added to existing variables on the docds.  In this
35632     + *     case, any documents that have no terms for any of the topics will have 0 for all topic variables.
35633     + *     If docds is not passed in, of course, no concatenation is done, and topics that have no terms
35634     + *     for any of the topics will not appear.
35635     + *
35636     + * Unit Tests:  These unit tests were performed satisfactorily from 11/05-11/23 on this code:
35637     + *   Used existing topic node results to work from... this involves using an existing Text Topic Node and
35638     + *   then rescoring the topics.  Unfortunately, it is not quite this easy since the current tmt_doc_score
35639     + *   also normalizes the topic weights each time it is called for all current topics.  This is incorrect, which
35640     + *   was part of the motivation for this rewrite.  I was able to verify same results using some transformations,
35641     + *   however.
35642     + *
35643     + *   1. Verify that when docds= valid value, that the newdocds contains the new variables, and set to the new
35644     + *       values when they differ from the old ones.  Also that it only has the
35645     + *      new variables when docds is not passed in.
35646     + *   2. Verify that when scoring=yes, the _numdocs and _numterms is not updated, but that the _# variables and
35647     + *      the raw_# variables ARE created, and that the number of 1s in each _# variable is correct based on the
35648     + *      document cutoffs specified.
35649     + *   3. Verify that when scoring=, _numdocs and _numterms IS updated, but that _numterms is the same as was
35650     + *      generated by tmt_doc_score before, and _numdocs is equal to the count of the # of 1s in each topic
35651     + *      variable as generated in the result from 2. above.
35652     + *   4. Verify that the results obtained using tmt_doc_score can be made equivalent to this by performing the
35653     + *      normalization before this code is called.  This was tried for scoring=,docds=, and for scoring=y,
35654     + *      docds=train ds, and scoring=,docds
35655     + *   5. Verify that subsetting topics from 4-10 generate same results for those topics as for topics 1-10.  This
35656     + *      was verified for both scoring=yes and scoring=no.
35657     + *   6. Show that documents that contain no terms for all topics appear and generate 0s for all topic scores when
35658     + *      docds is passed in, but don't appear when docds is not passed in.
35659     + *
35660     + *
35661     + * Last Modified By:
35662     + * Last Modified On: Tue Oct 22 15:19:28 2013
35663     + *
35664     + * End
35665     + * ************************************************************** */
35666     +%macro tmt_doc_score(termtopds=tmp_term_topics,outds=,docds=,newdocds=work.topdocs,
35667     +                     topicds=tmp_topics, termsumds=,scoring=,prefix=_topic,
35668     +                     pivot=.5,norm=,outpos=,topicpos=);
35669     +%let _mintopic=1;
35670     +
35671     +/* Remove any duplicate topic ids before scoring */
35672     +proc sort data=&topicds nodupkey; by _topicid;
35673     +proc sort data=&termtopds nodupkey; by _termid _topicid; run;
35674     +proc sql noprint;
35675     +    select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from &topicds;
35676     +       quit;
35677     +%if &_mintopic eq . %then %let _mintopic=1;
35678     +/*
35679     +%if &scoring ne %then %do;
35680     +    %let _mintopic=1;
35681     +%end;
35682     +*/
35683     +
35684     +%let _mintopic=%left(&_mintopic);
35685     +%let _maxtopic=%left(&_maxtopic);
35686     +
35687     +/* Do the following if there are any topics to be scored */
35688     +%if &_maxtopic >0 %then %do;
35689     +
35690     +%let _minlab=%ktrim(_tmlab)&_mintopic;
35691     +%let _maxlab=%ktrim(_tmlab)&_maxtopic;
35692     +proc sql noprint;
35693     +    select _name into :&_minlab - :&_maxlab from &topicds;
35694     +       quit;
35695     +
35696     +data &newdocds (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat  _numterms _numdocs
35697     +                _weight _termid rc _termnum_ i _count_)
35698     +   %if &scoring= %then %do;
35699     +      &topicds (keep=_topicid _name _cat _displaycat _numterms _numdocs _docCutoff _termCutoff)
35700     +         %end;
35701     +   %if &outpos ne and &topicpos ne %then %do;
35702     +      &topicpos (keep=_topicid _document_ _offset_ _length_ _termnum_)
35703     +         %end;
35704     +   ;
35705     +   if 0 then set &topicds &termtopds;
35706     +
35707     +   /* Create topic hash table */
35708     +   dcl hash _topic_hash(dataset: "&topicds", ordered: "a");
35709     +   _topic_hash.defineKey("_topicid");
35710     +   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms",
35711     +                     "_numdocs");
35712     +   _topic_hash.defineDone();
35713     +
35714     +   dcl hiter _it_topic("_topic_hash");
35715     +
35716     +   /* Unless we are scoring, zero out _numterms and _numdocs since we will recalculate based on
35717     +    currently specified cutoffs
35718     +    */
35719     +   %if &scoring= %then %do;
35720     +      rc=_it_topic.first();
35721     +      do while(rc=0);
35722     +         _numterms=0; _numdocs=0;
35723     +         _topic_hash.replace();
35724     +         rc=_it_topic.next();
35725     +         end;
35726     +      %end;
35727     +
35728     +   /* Create term-topic hash table */
35729     +   dcl hash _termtopics(multidata: "Y");
35730     +   _termtopics.defineKey("_termid");
35731     +   _termtopics.defineData("_termid","_topicid", "_weight");
35732     +   _termtopics.defineDone();
35733     +
35734     +   /* Now read in observations, and, for every one whose abs(weight) >= _termCutoff, add
35735     +    it to _termtopics hash table and increment the _numdocs count in the topics hash table
35736     +    */
35737     +   do until(eof);
35738     +      set &termtopds end=eof;
35739     +      if _topic_hash.find() ne 0 then do;
35740     +         put "topic " _topicid " not found in topic data set";
35741     +         end;
35742     +      else if abs(_weight)>= _termCutoff then do;
35743     +
35744     +         /* If we are not scoring, adjust the term counts */
35745     +         %if &scoring= %then %do;
35746     +            _numterms+1;
35747     +            _topic_hash.replace();
35748     +            %end;
35749     +
35750     +         /* Add to _termtopics */
35751     +         _termtopics.add();
35752     +         end;
35753     +      end;
35754     +
35755     +   /* Now create document hash table. This will have one row for each document, and contain the
35756     +      weighted topic values for each of the topics on that one row.
35757     +    */
35758     +   array _topic{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
35759     +   format &prefix.raw&_mintopic-&prefix.raw&_maxtopic 5.3;
35760     +      %if &scoring ne %then %do;
35761     +         array trunc{&_mintopic:&_maxtopic} &prefix.&_mintopic-&prefix.&_maxtopic;
35762     +         array notrunc{&_mintopic:&_maxtopic} &prefix.raw&_mintopic-&prefix.raw&_maxtopic;
35763     +         /* %put "using superq"; */
35764     +         %do i=&_mintopic %to &_maxtopic;
35765     +            /* %put &_tm_tmp; */
35766     +            %let _tm_tmp=_1_0_%bquote(&&_tmlab&i);
35767     +            label &prefix.&i="&_tm_tmp";
35768     +            %let _tm_tmp=%bquote(&&_tmlab&i);
35769     +            label &prefix.raw&i="&_tm_tmp";
35770     +            %end;
35771     +
35772     +         %end;
35773     +
35774     +   dcl hash _doc_hash(hashexp:16,ordered: 'a');
35775     +   _doc_hash.defineKey("_document_");
35776     +   _doc_hash.defineData("_document_"
35777     +                    %do i=&_mintopic %to &_maxtopic; ,"&prefix.raw&i" %end;
35778     +                    );
35779     +   _doc_hash.defineDone();
35780     +
35781     +   /* Now read in out data set */
35782     +   eof=0;
35783     +   do until(eof);
35784     +      set &outds end=eof;
35785     +
35786     +      /* If we haven't seen this document yet, set all topic weights to zero */
35787     +      if _doc_hash.find() ne 0 then do;
35788     +         do i=&_mintopic to &_maxtopic;
35789     +            _topic{i}=0;
35790     +            end;
35791     +         _doc_hash.add();
35792     +         end;
35793     +
35794     +      /* Check to see if this term has significant weights on any topics */
35795     +      _termid=_termnum_;
35796     +      rc=_termtopics.find();
35797     +      if rc = 0 then do;
35798     +         do while(rc=0);
35799     +            _topic{_topicid}= _topic{_topicid}+_weight*_count_;
35800     +            rc=_termtopics.find_next();
35801     +            end;
35802     +         _doc_hash.replace();
35803     +         end;
35804     +      end;
35805     +   _doc_hash.output(dataset: "docds");
35806     +
35807     +   /****************************************************************************
35808     +    * Following is new code for tmt_doc_score_new.  Should be moved into %tmt_doc_score
35809     +    * for 9.4
35810     +    ****************************************************************************/
35811     +
35812     +   %if &outpos ne and &topicpos ne %then %do;
35813     +   /* Now read in outpos data set */
35814     +   eof=0;
35815     +   do until(eof);
35816     +      set &outpos end=eof;
35817     +      if _doc_hash.find() = 0 then do;
35818     +         /* Check to see if this term and document are both in the topic.  If so, output */
35819     +         _termid=_termnum_;
35820     +         rc=_termtopics.find();
35821     +         do while(rc=0);
35822     +            if _topic_hash.find()=0 then
35823     +               if round( _topic{_topicid},.001) >= _doccutoff then output &topicpos;
35824     +            rc=_termtopics.find_next();
35825     +            end;
35826     +         end;
35827     +               else put 'document ' _document_ ' not found.';
35828     +      end;
35829     +
35830     +
35831     +    %end;
35832     +
35833     +   /****************************************************************************
35834     +    * end of new code
35835     +    ****************************************************************************/
35836     +
35837     +   /* Now we have info in the docds hash table for cumulative weights.  Prepare for output and
35838     +      create numdocs for the topics hash table */
35839     +
35840     +   /* Note: If a docds was passed in, we load it here... this accounts for documents that have no
35841     +      positive topic weights.  Otherwise, we process docds hash table iteratively
35842     +    */
35843     +   %if &docds= %then %do;
35844     +      dcl hiter _doc_it("_doc_hash");
35845     +      rc=_doc_itfirst();
35846     +      do while(rc=0);
35847     +         %end;
35848     +      %else %do;
35849     +         eof=0;
35850     +         do until(eof);
35851     +            set &docds end=eof;
35852     +            rc=_doc_hash.find();
35853     +            %end;
35854     +         if rc ne 0 then
35855     +            do i=&_mintopic to &_maxtopic;
35856     +               _topic{i}=0; %if &scoring ne %then trunc{i} = 0;;
35857     +               end;
35858     +         else do _topicid=&_mintopic to &_maxtopic;
35859     +            /* Round value to nearest thousandth */
35860     +            _topic{_topicid}=round( _topic{_topicid},.001);
35861     +            _topic_hash.find();
35862     +            if _topic{_topicid} >= _doccutoff then do;
35863     +               %if &scoring= %then %do;
35864     +                  _numdocs=_numdocs+1;
35865     +                  _topic_hash.replace();
35866     +                  end;
35867     +                  %end;
35868     +               %else %do;
35869     +                  trunc{_topicid} = 1;
35870     +                  end;
35871     +            else trunc{_topicid} = 0;
35872     +            %end;
35873     +         end;
35874     +         output &newdocds;
35875     +       %if &docds= %then rc=_doc_itnext();;
35876     +       end;
35877     +
35878     +   %if &scoring= %then %do;
35879     +      eof=0;
35880     +      do until(eof);
35881     +         set &topicds end=eof;
35882     +         rc=_topic_hash.find();
35883     +         output &topicds;
35884     +         end;
35885     +      %end;
35886     +   * _termtopics.output(dataset: "&termtopds");
35887     +   run;
35888     +
35889     +/* proc sort data=&termtopds; by _topicid _termid; run; */
35890     +%end;
35891     +%else %if &docds ne %then %do;
35892     +    /* If there were no documents,set the new document table to contain the old documents */
35893     +    data &newdocds;
35894     +        set &docds;
35895     +    run;
35896     +
35897     +%end;
35898     +
35899     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_parse_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_PARSE_SCORE.SOURCE.
35900     +/* ****************************************************************
35901     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
35902     + *
35903     + * Name:             tm_parse_score.sas
35904     + * Product:          SAS Text Miner
35905     + * Language:         Sas
35906     + * Script:
35907     + *
35908     + * Usage:
35909     + *
35910     + * Purpose:  Used to score new documents.
35911     + *
35912     + * History:
35913     + * 11Jun09 Initial Coding
35914     + *
35915     + * Notes:
35916     + *
35917     + * Last Modified By:
35918     + * Last Modified On: Tue May 12 15:06:35 2015
35919     + *
35920     + * End
35921     + * ************************************************************** */
35922     +* options mstored sasmstore=sashelp;
MPRINT(SCORE):   * options mstored sasmstore=sashelp;
35923     +
35924     +%macro tm_parse_score(nodeid=,termds=,multids=,configds=,outds=,prefile=,scorefile=,
35925     +                      where_phrase=,need_search=0);
35926     +proc sql noprint;
35927     +   select parsevar into :_tm_parseVar from &configds;
35928     +   quit;
35929     +
35930     +
35931     +%let _hasmultitermdata=0;
35932     +data _config;
35933     +   set &configds;
35934     +run;
35935     +%if %sysfunc(exist(&multids))  %then %do;
35936     +    proc sql noprint;
35937     +       select count(*) into: _numMultis
35938     +       from &multids;
35939     +    quit;
35940     +   %if &_numMultis >0 %then %do;
35941     +      %let _hasmultitermdata =1;
35942     +   %end;
35943     +   %else %do;
35944     +      data _config;
35945     +         length multiterm $ 1;
35946     +         set _config;
35947     +         multiterm="";
35948     +      run;
35949     +      /* update &configds, which may change configds*/
35950     +      data  &configds;
35951     +        set _config;
35952     +      run;
35953     +   %end;
35954     +
35955     +%end;
35956     +
35957     +
35958     +   %if %eval(&syscc)>4 %then %do;
35959     +      %let  EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
35960     +      %return;
35961     +   %end;
35962     +
35963     +filename _tmcode "&prefile";
35964     +
35965     +data _null_;
35966     +   length string $256 string2 $256 string3 $256;
35967     +   file _tmcode mod;
35968     +   put;
35969     +     %if &lastprescore eq %then %do;
35970     +      put 'libname termloc "' "&em_term_loc" '";';
35971     +      put;
35972     +     %end;
35973     +
35974     +   %if &_hasmultitermdata > 0 %then %do;
35975     +
35976     +      string='%let _multifile=' || '%SYSFUNC(PATHNAME(work))'||'/'||"&NODEID._multi.txt;";
35977     +      put string;
35978     +      string='%let _multiSLength='||' %klength(&_multifile);';
35979     +      put string;
35980     +      put;
35981     +
35982     +      put "data &configds;";
35983     +      put 'length multiterm $ &_multiSLength;';
35984     +      put "set &configds;";
35985     +      string ='multiterm='|| 'ktrim(symget('||"'"||'_multifile'||"'));";
35986     +      put string;
35987     +      put 'run;';
35988     +      put;
35989     +
35990     +      put 'proc sql noprint;';
35991     +      put     'select multiencoding into: _tmmultiencoding';
35992     +      put     "from &configds;";
35993     +      put 'quit;';
35994     +
35995     +      put;
35996     +
35997     +      string= 'filename _multout '||'"'|| '&_multifile'||'";';
35998     +      put string;
35999     +      put 'data _NULL_;';
36000     +      string= "set &multids;";
36001     +      put string;
36002     +      string= 'file _multout encoding= '||'"'|| '%trim(&_tmmultiencoding)'||'";';
36003     +      put string;
36004     +      string = 'put term '||"'"|| ":3:"||"'"||' role;';
36005     +      put string;
36006     +      put 'run;';
36007     +
36008     +   %end;
36009     +
36010     + run;
36011     +
36012     +
36013     + filename _tmcode "&scorefile";
36014     +    data _NULL_;
36015     +        file _tmcode;
36016     +        length string $200;
36017     +
36018     +          /*Fix for S1155404: data step between tgscore functions*/
36019     +        %if %symexist(last_prescore_node) %then %do;
36020     +          %if (&last_filter_node eq &last_prescore_node and &last_filter_node ne &last_parse_node) %then %do;
36021     +             put;
36022     +             put 'data &em_score_output; set &em_score_output;';
36023     +             put;
36024     +          %end;
36025     +        %end;
36026     +
36027     +        %if &where_phrase ne %then %do; put "where &where_phrase;"; %end;
36028     +        put '_document_ = _n_;';
36029     +        string='rc=tgscore(' || "%trim(&_tm_parseVar)" || ',"' || "&configds" ||
36030     +           '", "' || "&termds" || '", "' || "&outds" || '", "' || '&_multifile' || '", ' ||
36031     +
36032     +           "&need_search);";
36033     +        put string;
36034     +        put 'drop rc;';
36035     +    run;
36036     +filename _tmcode;
36037     +
36038     +
36039     +%mend;
36040     +
36041     +/*
36042     + filename temp catalog 'sashelp.emutil.em_copyfile.source';
36043     + %include temp;
36044     + %tm_parse_score(nodeid=node1,termds=unittest.textparsing_terms,
36045     +configds=unittest.textparsing_tmconfig,
36046     + outds=work._tmout, prefile=c:\pre.sas,scorefile=c:\score.sas,
36047     + need_search=1);
36048     +%include "c:\pre.sas";
36049     + data work._scored;
36050     +%include "c:\score.sas";
36051     + run;
36052     +
36053     + */
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp catalog 'sashelp.emtxtext.tm_data2code.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_DATA2CODE.SOURCE.
36054     +/* ****************************************************************
36055     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
36056     + *
36057     + * Name:             tm_data2code.sas
36058     + * Product:          SAS Text Miner
36059     + * Language:         Sas
36060     + * Script:
36061     + *
36062     + * Usage:  %tm_data2code(data=, outdata=WORK.DATA);
36063     + *
36064     + * Purpose:          To do a data2code (like %em_data2code()) but allow the input data
36065     + *  to be view or data.
36066     + *
36067     + *    PARAMETERS:
36068     + *        DATA        = data set
36069     + *        OUTDATA     = out data set
36070     + *        OUTFILE     = file where to saved the code
36071     + *        APPEND      = append (Y/N)
36072     + * History:
36073     + * 11Jun09 Initial Coding
36074     + *
36075     + * Notes:
36076     + *
36077     + * Last Modified By:
36078     + * Last Modified On: Thu Jul 23 11:00:06 2009
36079     + *
36080     + * End
36081     + * ************************************************************** */
36082     +%macro tm_data2code(data=, outdata=WORK.DATA, outfile=, append=N);
36083     +%if &data eq %then %do;
36084     +   %put ERROR: Data set not defined;
36085     +   %end;
36086     +%else %do;
36087     +   %if (^%sysfunc(exist(&data)) and ^%sysfunc(exist(&data, view))) %then %do;
36088     +       %put ERROR: Data set does not exist;
36089     +       %end;
36090     +   %else %do;
36091     +      %global em_data em_outdata em_codefile em_append;
36092     +      %let em_data=&data;
36093     +      %let em_outdata=&outdata;
36094     +      %let em_codefile=&outfile;
36095     +      %let em_append=&append;
36096     +      proc display c=sashelp.emutil.data2code.scl; run;
36097     +      %end;
36098     +   %end;
36099     +%mend;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS3.TextTopic_repTopics(drop=_cat);
MPRINT(SCORE):   set EMWS3.TextTopic_topics;
MPRINT(SCORE):   label _displayCat = "Category";
MPRINT(SCORE):   select(ksubstr(_cat,1,1));
MPRINT(SCORE):   when('S') _displayCat = "Single";
MPRINT(SCORE):   when('M') _displayCat = "Multiple";
MPRINT(SCORE):   when('U') _displayCat = "User";
MPRINT(SCORE):   otherwise;
MPRINT(SCORE):   end;
MPRINT(SCORE):   run;
 
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_REPTOPICS has 20 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   cellwgt="LOG";
MPRINT(SCORE):   set EMWS3.TextFilter_tmconfig;
MPRINT(SCORE):   call symput('cellwgt',cellwgt);
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TEXTFILTER_TMCONFIG.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc sql noprint;
MPRINT(SCORE):   create table work._termtopics as select a.* from EMWS3.TextTopic_termtopics as a, EMWS3.TextTopic_topics as b where a._topicid=b._topicid and abs(_weight)>=_termCutoff ;
NOTE: Table WORK._TERMTOPICS created, with 1247 rows and 3 columns.
 
MPRINT(SCORE):   select parsevar into :_tm_parseVar from EMWS3.TextFilter_tmconfig;
MPRINT(SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(TMT_SCORE):   data EMWS3.TextTopic_tmout;
MPRINT(TMT_SCORE):   set EMWS3.TextTopic_tmout_normalized;
MPRINT(TMT_SCORE):   run;
 
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT_NORMALIZED.
NOTE: The data set EMWS3.TEXTTOPIC_TMOUT has 37047 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=EMWS3.TextTopic_topics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _topicid;
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS3.TEXTTOPIC_TOPICS has 20 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sort data=work._termtopics nodupkey;
MPRINT(TMT_DOC_SCORE):   by _termid _topicid;
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: There were 1247 observations read from the data set WORK._TERMTOPICS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK._TERMTOPICS has 1247 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select max(_topicid), min(_topicid) into :_maxtopic, :_mintopic from EMWS3.TextTopic_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   proc sql noprint;
MPRINT(TMT_DOC_SCORE):   select _name into :_tmlab1 - :_tmlab20 from EMWS3.TextTopic_topics;
MPRINT(TMT_DOC_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TMT_DOC_SCORE):   data EMWS3.TextTopic_TRAIN (drop=_topicid _doccutoff _termCutoff _name _cat _displaycat _numterms _numdocs _weight _termid rc _termnum_ i _count_) ;
MPRINT(TMT_DOC_SCORE):   if 0 then set EMWS3.TextTopic_topics work._termtopics;
MPRINT(TMT_DOC_SCORE):   dcl hash _topic_hash(dataset: "EMWS3.TextTopic_topics", ordered: "a");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineKey("_topicid");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineData("_topicid","_docCutoff","_termCutoff","_name","_cat","_numterms", "_numdocs");
MPRINT(TMT_DOC_SCORE):   _topic_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   dcl hiter _it_topic("_topic_hash");
MPRINT(TMT_DOC_SCORE):   dcl hash _termtopics(multidata: "Y");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineKey("_termid");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineData("_termid","_topicid", "_weight");
MPRINT(TMT_DOC_SCORE):   _termtopics.defineDone();
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set work._termtopics end=eof;
MPRINT(TMT_DOC_SCORE):   if _topic_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   put "topic " _topicid " not found in topic data set";
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else if abs(_weight)>= _termCutoff then do;
MPRINT(TMT_DOC_SCORE):   _termtopics.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   array _topic{1:20} TextTopic_raw1-TextTopic_raw20;
MPRINT(TMT_DOC_SCORE):   format TextTopic_raw1-TextTopic_raw20 5.3;
MPRINT(TMT_DOC_SCORE):   array trunc{1:20} TextTopic_1-TextTopic_20;
MPRINT(TMT_DOC_SCORE):   array notrunc{1:20} TextTopic_raw1-TextTopic_raw20;
MPRINT(TMT_DOC_SCORE):   label TextTopic_1= "_1_0_+great,great,+always,+atmosphere,+place";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw1= "+great,great,+always,+atmosphere,+place";
MPRINT(TMT_DOC_SCORE):   label TextTopic_2= "_1_0_amazing,+trip,+amaze,+wonderful,delicious";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw2= "amazing,+trip,+amaze,+wonderful,delicious";
MPRINT(TMT_DOC_SCORE):   label TextTopic_3= "_1_0_+curry,+order,+chicken,rice,+thai";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw3= "+curry,+order,+chicken,rice,+thai";
MPRINT(TMT_DOC_SCORE):   label TextTopic_4= "_1_0_+pizza,+pasta,+italian,+italian,+italy";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw4= "+pizza,+pasta,+italian,+italian,+italy";
MPRINT(TMT_DOC_SCORE):   label TextTopic_5= "_1_0_+time,+eat,+year,+always,+visit";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw5= "+time,+eat,+year,+always,+visit";
MPRINT(TMT_DOC_SCORE):   label TextTopic_6= "_1_0_+hotel,+stay,+breakfast,+dinner,pullman";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw6= "+hotel,+stay,+breakfast,+dinner,pullman";
MPRINT(TMT_DOC_SCORE):   label TextTopic_7= "_1_0_+view,+nice,+beautiful,+atmosphere,+service";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw7= "+view,+nice,+beautiful,+atmosphere,+service";
MPRINT(TMT_DOC_SCORE):   label TextTopic_8= "_1_0_+phuket,+visit,+patong,+dinner,+good";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw8= "+phuket,+visit,+patong,+dinner,+good";
MPRINT(TMT_DOC_SCORE):   label TextTopic_9= "_1_0_+friendly,+staff,+owner,+helpful,+delicious";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw9= "+friendly,+staff,+owner,+helpful,+delicious";
MPRINT(TMT_DOC_SCORE):   label TextTopic_10= "_1_0_+review,+read,+tripadvisor,+decide,+disappoint";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw10= "+review,+read,+tripadvisor,+decide,+disappoint";
MPRINT(TMT_DOC_SCORE):   label TextTopic_11= "_1_0_+thai,+menu,+dish,+cuisine,+italian";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw11= "+thai,+menu,+dish,+cuisine,+italian";
MPRINT(TMT_DOC_SCORE):   label TextTopic_12= "_1_0_+eat,+thai,+good,best,+excellent";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw12= "+eat,+thai,+good,best,+excellent";
MPRINT(TMT_DOC_SCORE):   label TextTopic_13= "_1_0_+little,+restaurant,+small,+beach,+find";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw13= "+little,+restaurant,+small,+beach,+find";
MPRINT(TMT_DOC_SCORE):   label TextTopic_14= "_1_0_+night,+last,+meal,+dinner,+dine";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw14= "+night,+last,+meal,+dinner,+dine";
MPRINT(TMT_DOC_SCORE):   label TextTopic_15= "_1_0_+recommend,+highly,+excellent,+great,+definitely";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw15= "+recommend,+highly,+excellent,+great,+definitely";
MPRINT(TMT_DOC_SCORE):   label TextTopic_16= "_1_0_+price,+good,+reasonable,+service,quality";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw16= "+price,+good,+reasonable,+service,quality";
MPRINT(TMT_DOC_SCORE):   label TextTopic_17= "_1_0_+place,+eat,+amaze,+look,+tasty";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw17= "+place,+eat,+amaze,+look,+tasty";
MPRINT(TMT_DOC_SCORE):   label TextTopic_18= "_1_0_+excellent,+meal,+service,+feel,+always";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw18= "+excellent,+meal,+service,+feel,+always";
MPRINT(TMT_DOC_SCORE):   label TextTopic_19= "_1_0_+visit,+indian,+definitely,+phuket,+love";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw19= "+visit,+indian,+definitely,+phuket,+love";
MPRINT(TMT_DOC_SCORE):   label TextTopic_20= "_1_0_+meal,+thai,+lovely,+family,+owner";
MPRINT(TMT_DOC_SCORE):   label TextTopic_raw20= "+meal,+thai,+lovely,+family,+owner";
MPRINT(TMT_DOC_SCORE):   dcl hash _doc_hash(hashexp:16,ordered: 'a');
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineKey("_document_");
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineData("_document_" ,"TextTopic_raw1" ,"TextTopic_raw2" ,"TextTopic_raw3" ,"TextTopic_raw4" ,"TextTopic_raw5" ,"TextTopic_raw6" ,"TextTopic_raw7" ,"TextTopic_raw8" ,"TextTopic_raw9" ,"TextTopic_raw10"
,"TextTopic_raw11" ,"TextTopic_raw12" ,"TextTopic_raw13" ,"TextTopic_raw14" ,"TextTopic_raw15" ,"TextTopic_raw16" ,"TextTopic_raw17" ,"TextTopic_raw18" ,"TextTopic_raw19" ,"TextTopic_raw20" );
MPRINT(TMT_DOC_SCORE):   _doc_hash.defineDone();
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS3.TextTopic_tmout end=eof;
MPRINT(TMT_DOC_SCORE):   if _doc_hash.find() ne 0 then do;
MPRINT(TMT_DOC_SCORE):   do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.add();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _termid=_termnum_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find();
MPRINT(TMT_DOC_SCORE):   if rc = 0 then do;
MPRINT(TMT_DOC_SCORE):   do while(rc=0);
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}= _topic{_topicid}+_weight*_count_;
MPRINT(TMT_DOC_SCORE):   rc=_termtopics.find_next();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.replace();
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   _doc_hash.output(dataset: "docds");
MPRINT(TMT_DOC_SCORE):   eof=0;
MPRINT(TMT_DOC_SCORE):   do until(eof);
MPRINT(TMT_DOC_SCORE):   set EMWS3.TextFilter_TRAIN end=eof;
MPRINT(TMT_DOC_SCORE):   rc=_doc_hash.find();
MPRINT(TMT_DOC_SCORE):   if rc ne 0 then do i=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{i}=0;
MPRINT(TMT_DOC_SCORE):   trunc{i} = 0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else do _topicid=1 to 20;
MPRINT(TMT_DOC_SCORE):   _topic{_topicid}=round( _topic{_topicid},.001);
MPRINT(TMT_DOC_SCORE):   _topic_hash.find();
MPRINT(TMT_DOC_SCORE):   if _topic{_topicid} >= _doccutoff then do;
MPRINT(TMT_DOC_SCORE):   trunc{_topicid} = 1;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   else trunc{_topicid} = 0;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   output EMWS3.TextTopic_TRAIN;
MPRINT(TMT_DOC_SCORE):  ;
MPRINT(TMT_DOC_SCORE):   end;
MPRINT(TMT_DOC_SCORE):   * _termtopics.output(dataset: "&termtopds");
MPRINT(TMT_DOC_SCORE):   run;
 
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: The data set WORK.DOCDS has 3047 observations and 21 variables.
NOTE: There were 20 observations read from the data set EMWS3.TEXTTOPIC_TOPICS.
NOTE: There were 1247 observations read from the data set WORK._TERMTOPICS.
NOTE: There were 37047 observations read from the data set EMWS3.TEXTTOPIC_TMOUT.
NOTE: There were 4400 observations read from the data set EMWS3.TEXTPARSING_TRAIN.
NOTE: There were 4400 observations read from the data set EMWS3.TEXTFILTER_DOC_IDS.
NOTE: There were 4400 observations read from the data set EMWS3.TEXTFILTER_TRAIN.
NOTE: The data set EMWS3.TEXTTOPIC_TRAIN has 4400 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TMT_SCORE):  ;
MPRINT(TMT_SCORE):   proc sql noprint;
MPRINT(TMT_SCORE):   create view EMWS3.TextTopic_TRANSACTION as select ktrim(term) || '|' || role as _item_, b.* from EMWS3.TextTopic_weightedterms as a, EMWS3.TextTopic_weightedtmout as b where b._termnum_=a.key and a._ispar ne '.' order by b._termnum_,
b._document_ ;
NOTE: SQL view EMWS3.TEXTTOPIC_TRANSACTION has been defined.
MPRINT(TMT_SCORE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename _meta "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _meta;
MPRINT(SCORE):   put 'if CREATOR = "&EM_NODEID" and upcase(NAME) =: upcase("&EM_NODEID") then do;';
MPRINT(SCORE):   put '   if upcase(NAME) =: upcase("&EM_NODEID._RAW") then do;';
MPRINT(SCORE):   put '      ROLE="INPUT";';
MPRINT(SCORE):   put '      LEVEL="INTERVAL";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   put '   else do;';
MPRINT(SCORE):   put '      ROLE="SEGMENT";';
MPRINT(SCORE):   put '      LEVEL="BINARY";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   put '   end;';
MPRINT(SCORE):   put '   if upcase(NAME) = "_DOCUMENT_" then do;';
MPRINT(SCORE):   put '      ROLE="ID";';
MPRINT(SCORE):   put '      LEVEL="NOMINAL";';
MPRINT(SCORE):   put '      end;';
MPRINT(SCORE):   run;
 
NOTE: The file _META is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:17:54:55,
      Create Time=01Jan2022:12:20:17
 
NOTE: 14 records were written to the file _META.
      The minimum record length was 7.
      The maximum record length was 75.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _meta;
NOTE: Fileref _META has been deassigned.
MPRINT(SCORE):   filename _meta "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRANSACTION.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _meta;
MPRINT(SCORE):   put 'if upcase(NAME)="_DOCUMENT_" then do;';
MPRINT(SCORE):   put '   ROLE="ID";';
MPRINT(SCORE):   put '   LEVEL="NOMINAL";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   put 'if upcase(NAME)="_ITEM_" then do;';
MPRINT(SCORE):   put '   ROLE="TARGET";';
MPRINT(SCORE):   put '   LEVEL="NOMINAL";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   put 'if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;';
MPRINT(SCORE):   put '   ROLE="REJECTED";';
MPRINT(SCORE):   put 'end;';
MPRINT(SCORE):   run;
 
NOTE: The file _META is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRANSACTION.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:17:54:55,
      Create Time=01Jan2022:12:20:34
 
NOTE: 11 records were written to the file _META.
      The minimum record length was 4.
      The maximum record length was 51.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _meta;
NOTE: Fileref _META has been deassigned.
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   call symput("emwspath", strip(pathname("EMWS3")));
MPRINT(SCORE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename topicpre "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\PRESCORECODE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file topicpre;
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.tmt_doc_score.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp catalog "sashelp.emtxtext.row_pivot_normalize.source";';
MPRINT(SCORE):   put '%include temp;';
MPRINT(SCORE):   put 'filename temp;';
MPRINT(SCORE):   run;
 
NOTE: The file TOPICPRE is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\PRESCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:17:54:55,
      Create Time=16Jan2022:17:54:55
 
NOTE: 5 records were written to the file TOPICPRE.
      The minimum record length was 14.
      The maximum record length was 68.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename tmpre "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextFilter\PRESCORECODE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file topicpre MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("tmpre",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file TOPICPRE is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\PRESCORECODE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=182,
      Last Modified=16Jan2022:17:54:55,
      Create Time=16Jan2022:17:54:55
 
NOTE: 23 records were written to the file TOPICPRE.
      The minimum record length was 1.
      The maximum record length was 118.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename tmpre;
NOTE: Fileref TMPRE has been deassigned.
MPRINT(SCORE):   libname termloc "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3";
NOTE: Libref TERMLOC refers to the same physical library as EMWS3.
NOTE: Libref TERMLOC was successfully assigned as follows:
      Engine:        V9
      Physical Name: D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3
MPRINT(SCORE):   filename topicpre;
NOTE: Fileref TOPICPRE has been deassigned.
MPRINT(SCORE):   filename _tpcscr "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   file _tpcscr ;
MPRINT(SCORE):   put '/* First we create a Weighted TMOUT Data Set based on weighted terms*/';
MPRINT(SCORE):   put "proc tmutil data=work.TextFilter_out key=termloc.TextFilter_filtterms;";
MPRINT(SCORE):   put "control init release;";
MPRINT(SCORE):   put "weight cellwgt=LOG in_weight=termloc.TextFilter_filtterms (keep=key weight);";
MPRINT(SCORE):   put "output out=work._weighted_tmout;"/;
MPRINT(SCORE):   put '%row_pivot_normalize(transds=work._weighted_tmout, outtransds=WORK.TMOUTNORM,';
MPRINT(SCORE):   put '      col_sumds=work._termsumds,row=_document_,col=_termnum_,entry=_count_,';
MPRINT(SCORE):   put "      pivot=0.7,tmt_config=termloc.TextFilter_tmconfig,tmt_train=0,prefix=TextTopic);"/;
MPRINT(SCORE):   put '/*initialize topics and termtopics datasets in case they do not exist (0 topics case)*/';
MPRINT(SCORE):   put '%macro tmt_check_topics_exist;';
MPRINT(SCORE):   put '%if(^%sysfunc(exist('"termloc.TextTopic_topics"'))) %then %do;';
MPRINT(SCORE):   put '   proc sql noprint; create table '"termloc.TextTopic_topics";
MPRINT(SCORE):   put '   (_topicid decimal, _docCutoff decimal, _termCutoff decimal, _name char(1024), _cat char(4), /* _apply char(1), */ _numterms decimal, _numdocs decimal, _displayCat char(200) );';
MPRINT(SCORE):   put '   quit;';
MPRINT(SCORE):   put '%end;';
MPRINT(SCORE):   put '%if(^%sysfunc(exist('"termloc.TextTopic_termtopics"'))) %then %do;';
MPRINT(SCORE):   put '   proc sql noprint; create table '"termloc.TextTopic_termtopics";
MPRINT(SCORE):   put '   (_topicid decimal, _weight decimal, _termid decimal);';
MPRINT(SCORE):   put '   quit;';
MPRINT(SCORE):   put '%end;';
MPRINT(SCORE):   put '%mend tmt_check_topics_exist;';
MPRINT(SCORE):   put '%tmt_check_topics_exist;';
MPRINT(SCORE):   put "data work.TextTopic_termtopics; set termloc.TextTopic_termtopics; run;";
MPRINT(SCORE):   put "data work.TextTopic_topics; set termloc.TextTopic_topics; run;";
MPRINT(SCORE):   put '%'"tmt_doc_score(termtopds=work.TextTopic_termtopics"', docds=&em_score_output,';
MPRINT(SCORE):   put "outds=WORK.TMOUTNORM, topicds=work.TextTopic_topics, newdocds=work._newdocds, scoring=yes,";
MPRINT(SCORE):   put "termsumds=work._termsumds, prefix=TextTopic_,pivot=0.7);";
MPRINT(SCORE):   put 'data &em_score_output; set work._newdocds;';
MPRINT(SCORE):   ;
MPRINT(SCORE):   run;
 
NOTE: The file _TPCSCR is:
      Filename=D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16Jan2022:17:54:55,
      Create Time=16Jan2022:17:54:55
 
NOTE: 30 records were written to the file _TPCSCR.
      The minimum record length was 0.
      The maximum record length was 178.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename _tpcscr;
NOTE: Fileref _TPCSCR has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: TextTopic;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36100      *------------------------------------------------------------*;
36101      * End SCORE: TextTopic;
36102      *------------------------------------------------------------*;
36103
 
36105      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
36106      * TextTopic: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * TextTopic: Computing metadata for TRAIN data;
36107      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.TextTopic_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.TextTopic_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS3.TextTopic_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.TextTopic_TRAIN out=WORK.M09_J2ZD noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09_J2ZD;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M09_J2ZD(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09_J2ZD;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M09_J2ZD;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2O1IHTN NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0F9AT0X(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O1IHTN;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.TextFilter_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.TextFilter_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.TextTopic_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextTopic";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if CREATOR = "TextTopic" and upcase(NAME) =: upcase("TextTopic") then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: upcase("TextTopic_RAW") then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE="SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL="BINARY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "_DOCUMENT_" then do;
MPRINT(EM_DIAGRAM):   ROLE="ID";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36467      proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36468      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36469      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36470      proc sort data = EMWS3.TextTopic_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS3.TextTopic_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36471      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36472      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTTOPIC_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36473      data EMWS3.TextTopic_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS3.TextTopic_EMINFO;
36474      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36475      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36476      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 5 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTTOPIC_EMINFO has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36477      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
36478      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
36479      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
36480      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36481      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36482      * TextTopic: Computing metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   * TextTopic: Computing metadata for TRANSACTION data;
36483      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRANSACTION data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\CDELTA_TRANSACTION.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.TextTopic_TRANSACTION out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.TextTopic_TRANSACTION');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.TextTopic_TRANSACTION out=WORK.M10_Z9DS noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10_Z9DS;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M10_Z9DS(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M10_Z9DS;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M10_Z9DS;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3GS7FYG NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1S92238(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   set WORK.M3GS7FYG;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.TextFilter_TRANSACTION noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.TextFilter_CMeta_TRANSACTION out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.TextTopic_CMeta_TRANSACTION;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "TextTopic";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TextTopic: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME)="_DOCUMENT_" then do;
MPRINT(EM_DIAGRAM):   ROLE="ID";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME)="_ITEM_" then do;
MPRINT(EM_DIAGRAM):   ROLE="TARGET";
MPRINT(EM_DIAGRAM):   LEVEL="NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in ("_COUNT_","_TERMNUM_") then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36832      proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS3.TextFilter_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
36833      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36834      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS3.TEXTFILTER_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36835      proc sort data = EMWS3.TextTopic_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS3.TextTopic_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
36836      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36837      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS3.TEXTTOPIC_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36838      data EMWS3.TextTopic_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS3.TextTopic_EMINFO;
36839      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
36840      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36841      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 7 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TEXTTOPIC_EMINFO has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36842      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
36843      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
36844      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
36845      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "January 16, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:54:56" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                January 16, 2022
Time:                17:54:56
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3BH4IV5 "D:\Msc Data Science\CourseWorks\ASDM\Sentimental Analysis\Sentimental_Analysis_SAS\Workspaces\EMWS3\TextTopic\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3BH4IV5 new;
MPRINT(EM_DIAGRAM):   run;
36869      %let EMEXCEPTIONSTRING=;
36870      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
36871      * REPORT: TextTopic;
MPRINT(EM_DIAGRAM):   * REPORT: TextTopic;
36872      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36873      %let EM_ACTION = REPORT;
36874      %let syscc = 0;
36875      %macro main;
36876          %if %upcase(&EM_ACTION) = CREATE %then %do;
36877              filename temp catalog 'sashelp.emtxtext.topic_create.source';
36878              %include temp;
36879              %create;
36880          %end;
36881          %if %upcase(&EM_ACTION) = TRAIN %then %do;
36882              filename temp catalog 'sashelp.emtxtext.topic_train.source';
36883              %include temp;
36884              %train;
36885          %end;
36886         %if %upcase(&EM_ACTION) = SCORE %then %do;
36887              filename temp catalog 'sashelp.emtxtext.topic_score.source';
36888              %include temp;
36889              %score;
36890          %end;
36891          %if %upcase(&EM_ACTION) = REPORT %then %do;
36892              filename temp catalog 'sashelp.emtxtext.topic_report.source';
36893              %include temp;
36894              %report;
36895          %end;
36896      %mend main;
36897
36898      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emtxtext.topic_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TOPIC_REPORT.SOURCE.
36899     +/* ****************************************************************
36900     + * Copyright (C) 2009 by SAS Institute Inc., Cary, NC 27513
36901     + *
36902     + * Name:             topic_report.sas
36903     + * Support:          cox  James A. Cox
36904     + * Product:          SAS/GRAPH
36905     + * Language:         Sas
36906     + * Script:
36907     + *
36908     + * Usage:
36909     + *
36910     + * Purpose:
36911     + *
36912     + * History:
36913     + * 03Jun09 Initial Coding [cox]
36914     + *
36915     + * Notes:
36916     + *
36917     + * Last Modified By:
36918     + * Last Modified On: Thu Oct 10 15:14:23 2013
36919     + *
36920     + * End
36921     + * ************************************************************** */
36922     +%macro report();
36924     +   /* drop _cat from display table; */
36925     +   %em_getname(key=repTopics, type=data);
36926     +   %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
36928     +   /* Generate reports for terms with term weights */
36929     +   %em_checkmacro(name=tmm_num_display_terms,      global=Y, value=20000);
36931     +   %EM_GETNAME(KEY=GRAPH_TABLE, TYPE=DATA);
36932     +   %EM_GETNAME(KEY=TOPICS, TYPE=DATA);
36933     +   %EM_GETNAME(KEY=SVDU, TYPE=DATA);
36934     +   %em_getname(key=termtopics,       type=data);
36935     +   %EM_GETNAME(KEY=weightedterms, TYPE=DATA);
36936     +  /* Get number of topics */
36937     +   proc sql noprint; select count(*) into :_n_topics from &em_user_topics; quit;
36938     +      %let _n_topics=%kleft(&_n_topics);
36939     +   proc sort data=&em_user_termtopics; by _termid _topicid;
36940     +   data &em_user_svdu(drop=_i _topicid _weight);
36941     +     retain topic1-topic&_n_topics;
36942     +     array _topics{*} topic1-topic&_n_topics;
36943     +     set &em_user_termtopics; by _termid;
36944     +      if first._termid then do;
36945     +         do _i=1 to &_n_topics; _topics{_i}=0; end;
36946     +         end;
36947     +      _topics{_topicid}=_weight;
36948     +      if last._termid then output;
36949     +      run;
36950     +   filename temp catalog "sashelp.emtxtext.apply_labels.source";
36951     +   %include temp;
36952     +   %apply_labels(&EM_USER_SVDU,&EM_USER_TOPICS,prefix=topic);
36954     +  /* include graphing macros */
36955     +   FILENAME TEMP CATALOG 'SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE';
36956     +   %INCLUDE TEMP;
36957     +   /* get the top level terms */
36958     +   %GRAPH_TOP_TERMS(KEY=GRAPH_TABLE, MAXTERMS=20000, KEEPKEY=Y,
36959     +                 termds=&em_user_weightedterms);
36960     +   /* merge terms table with col values */
36961     +    proc sql noprint;
36962     +        create table &em_user_graph_table(drop=key _id_) as
36963     +            select a.*, b.* from &em_user_graph_table(drop=_ispar parent_id) a
36964     +            left join &em_user_svdu b on a.key=b._termid order by numdocs desc,
36965     +           term, rolestring;
36966     +    quit;
36968     +    /* can have 2+ SVD values to create matrix with */
36969     +    %let Yvars=Y1=topic1, Y2=topic2;
36970     +    %do i=3 %to %sysfunc(MIN(&_n_topics, 5));
36971     +        %let Yvars=&Yvars , Y&i=topic&i;
36972     +    %end;
36974     +    %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_topicterms_title, NOQUOTE));
36975     +    %EM_REPORT(KEY=GRAPH_TABLE, VIEWTYPE=MATRIXPLOT, DESCRIPTION= %nrbquote(&desc), AUTODISPLAY=Y,
36976     +        &Yvars. , COLOR=RANK, TIP=TERM);
36978     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_topics_title, NOQUOTE));
36979     +   %em_report(key=reptopics, viewtype=DATA,
36980     +              description=%nrbquote(&desc), autodisplay=Y);
36982     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_termsbytopic_title, NOQUOTE));
36983     +   %em_report(key=reptopics, viewtype=BAR, x=_topicid, freq=_numterms, tiptext=_name,
36984     +              group=_displayCat, sortorder=desc, description=%nrbquote(&desc),
36985     +              autodisplay=Y);
36987     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_docsbytopic_title, NOQUOTE));
36988     +   %em_report(key=reptopics, viewtype=BAR, x=_topicid, freq=_numdocs, tiptext=_name,
36989     +              group=_displayCat,  sortorder=desc, description=%nrbquote(&desc),
36990     +              autodisplay=Y);
36992     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_prescore_title, NOQUOTE));
36993     +   %EM_REPORT(KEY=PRESCORECODE, VIEWTYPE=SOURCE, DESCRIPTION=%nrbquote(&desc),
36994     +              BLOCK=Scoring, AUTODISPLAY=N);
36996     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   select count(*) into :_n_topics from EMWS3.TextTopic_TOPICS;
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   proc sort data=EMWS3.TextTopic_termtopics;
MPRINT(REPORT):   by _termid _topicid;
 
NOTE: There were 21520 observations read from the data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_TERMTOPICS has 21520 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   data EMWS3.TextTopic_SVDU(drop=_i _topicid _weight);
MPRINT(REPORT):   retain topic1-topic20;
MPRINT(REPORT):   array _topics{*} topic1-topic20;
MPRINT(REPORT):   set EMWS3.TextTopic_termtopics;
MPRINT(REPORT):   by _termid;
MPRINT(REPORT):   if first._termid then do;
MPRINT(REPORT):   do _i=1 to 20;
MPRINT(REPORT):   _topics{_i}=0;
MPRINT(REPORT):   end;
MPRINT(REPORT):   end;
MPRINT(REPORT):   _topics{_topicid}=_weight;
MPRINT(REPORT):   if last._termid then output;
MPRINT(REPORT):   run;
 
NOTE: There were 21520 observations read from the data set EMWS3.TEXTTOPIC_TERMTOPICS.
NOTE: The data set EMWS3.TEXTTOPIC_SVDU has 1076 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   filename temp catalog "sashelp.emtxtext.apply_labels.source";
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.APPLY_LABELS.SOURCE.
36997     +/* ****************************************************************
36998     + * Copyright (C) 2013 by SAS Institute Inc., Cary, NC 27513
36999     + *
37000     + * Name:             apply_labels.sas
37001     + * Support:          cox  James A. Cox
37002     + * Product:          SAS Text Miner
37003     + * Language:         Sas
37004     + * Script:
37005     + *
37006     + * Usage:
37007     + *
37008     + * Purpose: to apply descriptions from one data set as labels to a list of
37009     + *        variables in another
37010     + *
37011     + * History:
37012     + * 07Aug13 Initial Coding [cox]
37013     + *
37014     + * Notes:
37015     + *
37016     + * Last Modified By:
37017     + * Last Modified On: Fri Aug 30 16:22:02 2013
37018     + *
37019     + * End
37020     + * ************************************************************** */
37021     +%macro apply_labels(inds,labelds,label_col=_name,col_id=_topicid,prefix=COL,outds=);
37022     +%if &outds= %then %let outds=&inds;
37023     +proc sql noprint;
37024     +    select max(&col_id), min(&col_id) into :_maxvar, :_minvar from &labelds;
37025     +       quit;
37026     +%if &_minvar eq . %then %let _minvar=1;
37027     +%let _minvar=%left(&_minvar);
37028     +%let _maxvar=%left(&_maxvar);
37029     +
37030     +/* Do the following if there are any vars to be scored */
37031     +%if &_maxvar >0 %then %do;
37032     +
37033     +%let _minlab=%ktrim(_tmlab)&_minvar;
37034     +%let _maxlab=%ktrim(_tmlab)&_maxvar;
37035     +proc sql noprint;
37036     +    select &label_col into :&_minlab - :&_maxlab from &labelds;
37037     +       quit;
37038     +data &outds;
37039     +   set &inds;
37040     +   array vars{&_minvar:&_maxvar} &prefix.&_minvar-&prefix.&_maxvar;
37041     +         %do i=&_minvar %to &_maxvar;
37042     +            %let _tm_tmp=%bquote(&&_tmlab&i);
37043     +            label &prefix.&i="&_tm_tmp";
37044     +            %end;
37045     +
37046     +         %end;
37047     +run;
37048     +
37049     +%mend;
37050     +/*
37051     + * Example code;
37052     +
37053     +%let num_vars=20;
37054     + data vars(drop=j);
37055     +   array cols{&num_vars} col1-col&num_vars;
37056     +   do i=1 to 10;
37057     +      do j=1 to &num_vars;
37058     +         cols{j}=ranuni(0);
37059     +         end;
37060     +      output;
37061     +      end;
37062     +   run;
37063     + data labels;
37064     +    do i=1 to 20;
37065     +       label = "a"||put(i,2.);
37066     +       output;
37067     +       end;
37068     +run;
37069     +
37070     +   filename temp catalog "sashelp.emtxtext.apply_labels.source";
37071     +   %include temp;
37072     +%apply_labels(vars,labels,label_col=label,col_id=i,prefix=col);
37073     +
37074     +*/
NOTE: %INCLUDE (level 1) ending.
MPRINT(APPLY_LABELS):   proc sql noprint;
MPRINT(APPLY_LABELS):   select max(_topicid), min(_topicid) into :_maxvar, :_minvar from EMWS3.TextTopic_TOPICS;
MPRINT(APPLY_LABELS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(APPLY_LABELS):   proc sql noprint;
MPRINT(APPLY_LABELS):   select _name into :_tmlab1 - :_tmlab20 from EMWS3.TextTopic_TOPICS;
MPRINT(APPLY_LABELS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(APPLY_LABELS):   data EMWS3.TextTopic_SVDU;
MPRINT(APPLY_LABELS):   set EMWS3.TextTopic_SVDU;
MPRINT(APPLY_LABELS):   array vars{1:20} topic1-topic20;
MPRINT(APPLY_LABELS):   label topic1= "+great,great,+always,+atmosphere,+place";
MPRINT(APPLY_LABELS):   label topic2= "amazing,+trip,+amaze,+wonderful,delicious";
MPRINT(APPLY_LABELS):   label topic3= "+curry,+order,+chicken,rice,+thai";
MPRINT(APPLY_LABELS):   label topic4= "+pizza,+pasta,+italian,+italian,+italy";
MPRINT(APPLY_LABELS):   label topic5= "+time,+eat,+year,+always,+visit";
MPRINT(APPLY_LABELS):   label topic6= "+hotel,+stay,+breakfast,+dinner,pullman";
MPRINT(APPLY_LABELS):   label topic7= "+view,+nice,+beautiful,+atmosphere,+service";
MPRINT(APPLY_LABELS):   label topic8= "+phuket,+visit,+patong,+dinner,+good";
MPRINT(APPLY_LABELS):   label topic9= "+friendly,+staff,+owner,+helpful,+delicious";
MPRINT(APPLY_LABELS):   label topic10= "+review,+read,+tripadvisor,+decide,+disappoint";
MPRINT(APPLY_LABELS):   label topic11= "+thai,+menu,+dish,+cuisine,+italian";
MPRINT(APPLY_LABELS):   label topic12= "+eat,+thai,+good,best,+excellent";
MPRINT(APPLY_LABELS):   label topic13= "+little,+restaurant,+small,+beach,+find";
MPRINT(APPLY_LABELS):   label topic14= "+night,+last,+meal,+dinner,+dine";
MPRINT(APPLY_LABELS):   label topic15= "+recommend,+highly,+excellent,+great,+definitely";
MPRINT(APPLY_LABELS):   label topic16= "+price,+good,+reasonable,+service,quality";
MPRINT(APPLY_LABELS):   label topic17= "+place,+eat,+amaze,+look,+tasty";
MPRINT(APPLY_LABELS):   label topic18= "+excellent,+meal,+service,+feel,+always";
MPRINT(APPLY_LABELS):   label topic19= "+visit,+indian,+definitely,+phuket,+love";
MPRINT(APPLY_LABELS):   label topic20= "+meal,+thai,+lovely,+family,+owner";
MPRINT(APPLY_LABELS):   run;
 
NOTE: There were 1076 observations read from the data set EMWS3.TEXTTOPIC_SVDU.
NOTE: The data set EMWS3.TEXTTOPIC_SVDU has 1076 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(REPORT):   FILENAME TEMP CATALOG 'SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMTXTEXT.TM_GRAPHS.SOURCE.
37075     +%MACRO GRAPH_TOP_TERMS(KEY=, MAXTERMS=ALL, FILTER=N, KEEPKEY=N, termds=);
37076     +/*
37077     + * A gtable of all "top-level" terms, that is, all terms that do not have a different term as a parent.  This
37078     + * table would be linked to all graphs in this window such that the rows in the table are selected when points
37079     + * representing those terms are selected in the graphs.
37080     + */
37081     +
37082     +   %em_getname(key=&key);
37083     +   %LOCAL GRAPH_DATA;
37084     +   %LET GRAPH_DATA = &&EM_USER_&KEY;
37085     +   %if ^%symexist(tm_debug) %then %let tm_debug=0;
37086     +   %if "&FILTER"="Y" %then %do;
37087     +       %em_getname(key=terms_tmf, type=data);
37088     +       * sort by freq for the reports graph ;
37089     +       proc sort data=&EM_USER_TERMS_tmf out=_sortedTerms;
37090     +          by descending numdocs;
37091     +       run;
37092     +   %end;
37093     +   %else %do;
37094     +      %if &termds= %then %do;
37095     +         %let termds=&em_user_terms;
37096     +         %em_getname(key=terms, type=data);
37097     +         %end;
37098     +
37099     +       * sort by freq for the reports graph ;
37100     +       proc sort data=&termds out=_sortedTerms;
37101     +          by descending numdocs;
37102     +       run;
37103     +   %end;
37104     +
37105     +
37106     +   data &GRAPH_DATA;
37107     +      FORMAT TERM $256.;
37108     +      SET _sortedTerms(drop=PARENT %IF &keepkey=N %THEN KEY; where=(_ISPAR ne '.'));
37109     +      LABEL ROLESTRING= "%sysfunc(sasmsg(sashelp.tmine, rpt_text_role_vlabel,NOQUOTE))"
37110     +            NUMDOCS=    "%sysfunc(sasmsg(sashelp.tmine, rpt_text_numdocs_vlabel,   NOQUOTE))"
37111     +            RANK= "%sysfunc(sasmsg(sashelp.tmine, rpt_text_rank_vlabel,   NOQUOTE))"
37112     +            FREQ=       "%sysfunc(sasmsg(sashelp.tmine, rpt_text_freq_vlabel,      NOQUOTE))"
37113     +            ATTRSTRING=  "%sysfunc(sasmsg(sashelp.tmine, rpt_text_attribute_vlabel, NOQUOTE))"
37114     +            %if "&FILTER"="Y" %then %do;
37115     +                WEIGHT          = "%sysfunc(sasmsg(sashelp.tmine, rpt_text_weight_vlabel,             NOQUOTE))"
37116     +           %end;
37117     +            KEEP=       "%sysfunc(sasmsg(sashelp.tmine, rpt_text_keep_vlabel,      NOQUOTE))"
37118     +            PARENT_ID=  "%sysfunc(sasmsg(sashelp.tmine, rpt_text_parentid_vlabel,  NOQUOTE))"
37119     +            _ISPAR=     "%sysfunc(sasmsg(sashelp.tmine, rpt_text_isparent_vlabel,  NOQUOTE))";
37120     +       drop ROLE ATTRIBUTE;
37121     +      /* mark the parents */
37122     +      IF _ISPAR = '+' THEN TERM = '+ ' || TERM;
37123     +       %if "%upcase(&MAXTERMS)" ne "ALL" %then %do;
37124     +           if _N_<=&maxterms then output;
37125     +       %end;
37126     +    run;
37127     +
37128     +
37129     +
37130     +    proc rank data=&graph_data out=&graph_data descending ties=low;
37131     +       var numdocs;
37132     +       ranks Rank;
37133     +    run;
37134     +
37135     +
37136     +
37137     +
37138     +
37139     +    %if &tm_debug =0 %then %do;
37140     +       proc datasets lib=work nolist;
37141     +          delete _sortedTerms ;
37142     +       run;
37143     +    %end;
37144     +
37145     +
37146     +    quit;
37147     +
37148     +
37149     +   %let block = %sysfunc(sasmsg(sashelp.tmine, rpt_text_terms_title, NOQUOTE));
37150     +
37151     +   %let desc = %sysfunc(sasmsg(sashelp.tmine, rpt_text_terms_title, NOQUOTE));
37152     +   %EM_REPORT(KEY=&KEY, VIEWTYPE=DATA, DESCRIPTION= %nrbquote(&desc), BLOCK= %nrbquote(&block), AUTODISPLAY=Y, where=%str(KEEP='Y'));
37153     +
37154     +%MEND GRAPH_TOP_TERMS;
NOTE: %INCLUDE (level 1) ending.
MPRINT(GRAPH_TOP_TERMS):  ;
MPRINT(GRAPH_TOP_TERMS):   * sort by freq for the reports graph ;
MPRINT(GRAPH_TOP_TERMS):   proc sort data=EMWS3.TextTopic_weightedterms out=_sortedTerms;
MPRINT(GRAPH_TOP_TERMS):   by descending numdocs;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: There were 1076 observations read from the data set EMWS3.TEXTTOPIC_WEIGHTEDTERMS.
NOTE: The data set WORK._SORTEDTERMS has 1076 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GRAPH_TOP_TERMS):   data EMWS3.TextTopic_GRAPH_TABLE;
MPRINT(GRAPH_TOP_TERMS):   FORMAT TERM $256.;
MPRINT(GRAPH_TOP_TERMS):   SET _sortedTerms(drop=PARENT where=(_ISPAR ne '.'));
MPRINT(GRAPH_TOP_TERMS):   LABEL ROLESTRING= "Role" NUMDOCS= "# Docs" RANK= "Rank" FREQ= "Freq" ATTRSTRING= "Attribute" KEEP= "Keep" PARENT_ID= "Parent ID" _ISPAR= "Parent/Child Status";
MPRINT(GRAPH_TOP_TERMS):   drop ROLE ATTRIBUTE;
MPRINT(GRAPH_TOP_TERMS):   IF _ISPAR = '+' THEN TERM = '+ ' || TERM;
MPRINT(GRAPH_TOP_TERMS):   if _N_<=20000 then output;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: Variable RANK is uninitialized.
NOTE: There were 1076 observations read from the data set WORK._SORTEDTERMS.
      WHERE _ISPAR not = '.';
NOTE: The data set EMWS3.TEXTTOPIC_GRAPH_TABLE has 1076 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GRAPH_TOP_TERMS):   proc rank data=EMWS3.TextTopic_GRAPH_TABLE out=EMWS3.TextTopic_GRAPH_TABLE descending ties=low;
MPRINT(GRAPH_TOP_TERMS):   var numdocs;
MPRINT(GRAPH_TOP_TERMS):   ranks Rank;
MPRINT(GRAPH_TOP_TERMS):   run;
 
NOTE: The data set EMWS3.TEXTTOPIC_GRAPH_TABLE has 1076 observations and 11 variables.
NOTE: PROCEDURE RANK used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(GRAPH_TOP_TERMS):   quit;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "KEEP='Y'";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Terms";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Terms";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.703354181118;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 133 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GRAPH_TOP_TERMS):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc sql noprint;
MPRINT(REPORT):   create table EMWS3.TextTopic_GRAPH_TABLE(drop=key _id_) as select a.*, b.* from EMWS3.TextTopic_GRAPH_TABLE(drop=_ispar parent_id) a left join EMWS3.TextTopic_SVDU b on a.key=b._termid order by numdocs desc, term, rolestring;
WARNING: This CREATE TABLE statement recursively references the target table. A consequence of this is a possible data integrity problem.
WARNING: The variable _id_ in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: Table EMWS3.TEXTTOPIC_GRAPH_TABLE created, with 1076 rows and 29 columns.
 
MPRINT(REPORT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "GRAPH_TABLE";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "MATRIXPLOT";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Topic Terms";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "RANK";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "TERM";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "topic1";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "topic2";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "topic3";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "topic4";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "topic5";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.27209057857845;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 133 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 265 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Topics";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.75019091169824;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 265 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "desc";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Number of Terms by Topics";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_topicid";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
The SAS System
 
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_numterms";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "_displayCat";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_name";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.40813501151657;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "reptopics";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "desc";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "Number of Documents by Topics";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_topicid";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_numdocs";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "_displayCat";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_name";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47912046475295;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 661 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "PRESCORECODE";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SAS Prescore Code";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "Scoring";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11905443487644;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 661 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: TextTopic;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
37155      *------------------------------------------------------------*;
37156      * End REPORT: TextTopic;
37157      *------------------------------------------------------------*;
37158
 
37159      /* Reset EM Options */
37160      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
37161      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
37162      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
37163      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
37164      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
37165      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
